{"version":3,"sources":["webpack:///./src/components/transactionalEmail/syncTemplates/index.tsx"],"names":["Text","props","fetch","params","RunAction","CloseThisDialog","this","setState","isError","errorText","console","log","handleOkClick","WhenError","type","style","whiteSpace","textAlign","Button","onClick","WhenLoading","src","bind","state","loadingText","componentDidMount","render","content","className","React","Component"],"mappings":"0iEAAA,cACA,SACA,SACA,YACA,YAEQA,EAAA,aAAAA,KAUR,cACI,WAAYC,GAAZ,MACI,YAAMA,IAAM,K,OAchB,EAAAC,MAAQ,SAAOC,G,YAAA,IAAAA,MAAA,I,uGAGP,O,sBAAA,GAAM,UAAYC,UAAU,wC,cAA5B,SACA,UAAYC,kB,+BAEZC,KAAKC,SAAS,CAAEC,SAAS,EAAMC,UAAW,IAC1CC,QAAQC,IAAI,G,+BAIpB,EAAAC,cAAgB,WACZ,UAAYP,mBAGhB,EAAAQ,UAAY,WACR,OAAO,2BACH,2BACI,gBAACb,EAAI,CAACc,KAAK,SAASC,MAAO,CAAEC,WAAY,WAAU,wCAEvD,uBAAKD,MAAO,CAAEE,UAAW,WACrB,gBAAC,EAAAC,OAAM,CAACJ,KAAK,SAASK,QAAS,EAAKP,eAAa,SAK7D,EAAAQ,YAAc,WACV,OAAO,2BACH,2BACI,uBAAKC,IAAI,iCAEb,2BACI,4DA7CR,EAAKT,cAAgB,EAAKA,cAAcU,KAAK,GAC7C,EAAKC,MAAQ,CACTf,SAAS,EACTgB,YAAa,4BACbf,UAAW,I,EAuDvB,OA9D6D,OAWnD,YAAAgB,kBAAN,W,0FAEI,SAAMnB,KAAKJ,S,cAAX,S,YA0CJ,YAAAwB,OAAA,WACI,IAAIC,EAAUrB,KAAKiB,MAAMf,QAAU,gBAACF,KAAKO,UAAS,MAAM,gBAACP,KAAKc,YAAW,MACzE,OACI,uBAAKQ,UAAU,0BACVD,IAGjB,EA9DA,CAA6DE,EAAMC,W","file":"4.79d6b4d1fb89f67ecae2.hot-update.js","sourcesContent":["import * as React from \"react\";\r\nimport { Button } from 'antd';\r\nimport { Typography } from 'antd';\r\nimport WebApiUtils from \"../../../common/webapiUtils\";\r\nimport DialogUtils from \"../../../common/dialogUtils\";\r\n\r\nconst { Text } = Typography;\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    isError: boolean;\r\n    errorText: string;\r\n    loadingText: string;\r\n}\r\n\r\nexport default class TransactionalEmailSyncTemplates extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.handleOkClick = this.handleOkClick.bind(this);\r\n        this.state = {\r\n            isError: false,\r\n            loadingText: 'Синхронизируем шаблоны...',\r\n            errorText: ''\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        debugger;\r\n        await this.fetch();\r\n    }\r\n\r\n    fetch = async (params = {}) => {\r\n        debugger;\r\n        try {\r\n            await WebApiUtils.RunAction(\"cmb_TransactionalEmailTemplatesSync\");\r\n            DialogUtils.CloseThisDialog();\r\n        } catch (error) {\r\n            this.setState({ isError: true, errorText: error })\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    handleOkClick = () => {\r\n        DialogUtils.CloseThisDialog();\r\n    };\r\n\r\n    WhenError = () => {\r\n        return <div>\r\n            <div>\r\n                <Text type=\"danger\" style={{ whiteSpace: 'nowrap' }}>Произошла ошибка. Попробуйте позже.</Text>\r\n            </div>\r\n            <div style={{ textAlign: 'center' }}>\r\n                <Button type=\"danger\" onClick={this.handleOkClick}>Ок</Button>\r\n            </div>\r\n        </div>;\r\n    };\r\n\r\n    WhenLoading = () => {\r\n        return <div>\r\n            <div>\r\n                <img src='/_imgs/AdvFind/progress.gif'></img>\r\n            </div>\r\n            <div>\r\n                <span>Синхронизируем шаблоны...</span>\r\n            </div>\r\n        </div>;\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        var content = this.state.isError ? <this.WhenError /> : <this.WhenLoading />;\r\n        return (\r\n            <div className=\"content-sync-templates\">\r\n                {content}\r\n            </div>);\r\n    }\r\n}\r\n"],"sourceRoot":""}