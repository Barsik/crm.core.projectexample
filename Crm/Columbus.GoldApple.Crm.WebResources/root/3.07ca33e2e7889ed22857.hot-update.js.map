{"version":3,"sources":["webpack:///./src/app/templateMergeTagsBuilderApp.tsx","webpack:///./src/components/transactionalEmail/templateMergeTagsBuilder/index.tsx","webpack:///./src/components/transactionalEmail/templateMergeTagsBuilder/mergeTagItem.tsx","webpack:///./src/common/webResourceUtils.ts","webpack:///./src/common/commonUtils.ts"],"names":["ReactDOM","render","document","getElementById","Content","props","componentDidMount","this","GetMetadata","fetch","Xrm","Page","context","getClientUrl","json","body","metadata","value","map","entity","key","SchemaName","DisplayName","UserLocalizedLabel","Label","attributes","Attributes","attribute","attributeKey","LogicalName","attributeValue","setState","state","CommonUtils","ShowNotification","console","log","handleAddTagClick","bind","tags","templateId","GetGuid","WebResourceUtils","GetParameter","defaultEntityMetadata","length","tag","entitySchemaName","undefined","attributeSchemaName","mergeTagName","crmId","index","push","renderTags","Layout","Button","onClick","type","size","React","Component","Option","onChangeEntityMetadata","onChangeAttributeMetadata","onChangeTag","event","target","onDelete","isDeleted","deleteRecord","onSave","cmb_mergetag","cmb_attributepath","cmb_entityname","cmb_name","dynamicsWebApi","create","response","currentEntityMetadataAttributes","currentEntityMetadata","find","m","Select","showSearch","style","width","placeholder","optionFilterProp","onChange","defaultValue","disabled","entityMetadata","attributeMetadata","Input","icon","hidden","parameter","regex","RegExp","result","decodeURIComponent","location","search","substring","split","filter","p","match","GetDataParameter","guid","replace","toUpperCase","description","title","notification","message"],"mappings":"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","file":"3.07ca33e2e7889ed22857.hot-update.js","sourcesContent":["import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport \"./../assets/main.scss\"\r\nimport TemplateMergeTagsBuilder from \"../components/transactionalEmail/templateMergeTagsBuilder\";\r\n\r\nReactDOM.render(\r\n  <TemplateMergeTagsBuilder />,\r\n  document.getElementById(\"root\")\r\n);\r\n","import * as React from \"react\";\r\nimport { Layout, Button } from \"antd\";\r\nimport { MergeTagsBuilderState } from \"../../../models/mergeTagsBuilderState\";\r\nimport { EntityMetadata } from \"../../../models/entityMetadata\";\r\nimport { SimpleKeyValue } from \"../../../models/simpleKeyValue\";\r\nimport MergeTagItem from \"./mergeTagItem\";\r\nimport { MergeTag } from \"../../../models/mergeTag\";\r\nimport { WebResourceUtils } from \"../../../common/webResourceUtils\";\r\nimport { CommonUtils } from \"../../../common/commonUtils\";\r\n\r\nconst { Content } = Layout;\r\n\r\ninterface IProps {\r\n}\r\n\r\nexport default class TemplateMergeTagsBuilder extends React.Component<IProps, MergeTagsBuilderState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.handleAddTagClick = this.handleAddTagClick.bind(this);\r\n\r\n        this.state = {\r\n            metadata: [],\r\n            tags: [],\r\n            templateId: CommonUtils.GetGuid(WebResourceUtils.GetParameter(\"data\") ?? '')\r\n        };\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await this.GetMetadata();\r\n    }\r\n\r\n    GetMetadata = async () => {\r\n        try {\r\n            var response = await fetch(`${Xrm.Page.context.getClientUrl()}/api/data/v8.0/EntityDefinitions?$select=DisplayName,SchemaName&$filter=LogicalName eq 'contact' or LogicalName eq 'cmb_config'&$expand=Attributes($select=LogicalName,DisplayName)`);\r\n            const body = await response.json();\r\n\r\n            var metadata: Array<EntityMetadata> = body.value.map(function (entity: any): EntityMetadata {\r\n                return {\r\n                    key: entity.SchemaName,\r\n                    value: (entity.DisplayName != null && entity.DisplayName.UserLocalizedLabel != null) ? entity.DisplayName.UserLocalizedLabel.Label : null,\r\n                    attributes: entity.Attributes.map(function (attribute: any): SimpleKeyValue {\r\n                        const attributeKey = attribute.LogicalName;\r\n                        const attributeValue = (attribute.DisplayName != null && attribute.DisplayName.UserLocalizedLabel != null) ? attribute.DisplayName.UserLocalizedLabel.Label : null;\r\n\r\n                        return {\r\n                            key: attributeKey,\r\n                            value: attributeValue ?? attributeKey\r\n                        };\r\n                    })\r\n                };\r\n            });\r\n\r\n            this.setState({ ...this.state, metadata: metadata });\r\n        } catch (error) {\r\n            CommonUtils.ShowNotification('error', error, '');\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    handleAddTagClick() {\r\n\r\n        var defaultEntityMetadata = (this.state.metadata.length > 0) ? this.state.metadata[0] : null;\r\n\r\n        var tag: MergeTag = {\r\n            entitySchemaName: defaultEntityMetadata != null ? defaultEntityMetadata.key : undefined,\r\n            attributeSchemaName: undefined,\r\n            mergeTagName: '',\r\n            crmId: undefined,\r\n            index: -1,\r\n            templateId: this.state.templateId\r\n        };\r\n\r\n        var tags: Array<MergeTag> = this.state.tags;\r\n        tags.push(tag);\r\n        this.setState({ ...this.state, tags: tags });\r\n    }\r\n\r\n    renderTags() {\r\n        return (\r\n            <table>\r\n                {this.state.tags.length > 0 ?\r\n                    <thead>\r\n                        <tr>\r\n                            <td>Сущность</td>\r\n                            <td>Атрибут</td>\r\n                            <td>Тег</td>\r\n                        </tr>\r\n                    </thead>\r\n                    :\r\n                    <thead></thead>\r\n                }\r\n                <tbody>\r\n                    {this.state.tags.map((tag, index) => {\r\n                        tag.index = index;\r\n                        return (\r\n                            <MergeTagItem tag={tag} metadata={this.state.metadata} />\r\n                        );\r\n                    })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Layout>\r\n                    <Content>\r\n                        <div>\r\n                            <h2>Конструктор тегов слияния</h2>\r\n                        </div>\r\n                        <div>\r\n                            {this.renderTags()}\r\n                        </div>\r\n                        <div>\r\n                            <Button onClick={this.handleAddTagClick} type=\"link\" size={'small'}>\r\n                                Добавить</Button>\r\n                        </div>\r\n                        <hr />\r\n                        <div>\r\n                            <Button>Закрыть</Button>\r\n                        </div>\r\n                    </Content>\r\n                </Layout>\r\n            </div>);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Select, Button, Input } from \"antd\";\r\nimport { MergeTag } from \"../../../models/mergeTag\";\r\nimport { EntityMetadata } from \"../../../models/entityMetadata\";\r\nimport { SimpleKeyValue } from \"../../../models/simpleKeyValue\";\r\n\r\nimport DynamicsWebApi from \"dynamics-web-api\"\r\n\r\n\r\nconst { Option } = Select;\r\n\r\ninterface MergeTagItemProps {\r\n    tag: MergeTag;\r\n    metadata: Array<EntityMetadata>;\r\n}\r\n\r\ninterface MergeTagItemState extends MergeTag {\r\n    isDeleted: boolean;\r\n}\r\n\r\nexport default class MergeTagItem extends React.Component<MergeTagItemProps, MergeTagItemState> {\r\n    constructor(props: MergeTagItemProps) {\r\n        super(props);\r\n\r\n        this.onChangeEntityMetadata = this.onChangeEntityMetadata.bind(this);\r\n        this.onChangeAttributeMetadata = this.onChangeAttributeMetadata.bind(this);\r\n        this.onChangeTag = this.onChangeTag.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.onSave = this.onSave.bind(this);\r\n\r\n        this.state = {\r\n            attributeSchemaName: props.tag.attributeSchemaName,\r\n            crmId: props.tag.crmId,\r\n            entitySchemaName: props.tag.entitySchemaName,\r\n            index: props.tag.index,\r\n            mergeTagName: props.tag.mergeTagName,\r\n            templateId: props.tag.templateId,\r\n            isDeleted: false\r\n        };\r\n    }\r\n\r\n    onChangeEntityMetadata = (value: string) => {\r\n        this.setState({ ...this.state, entitySchemaName: value, attributeSchemaName: undefined, mergeTagName: '' });\r\n    }\r\n\r\n    onChangeAttributeMetadata = (value: string) => {\r\n        this.setState({ ...this.state, attributeSchemaName: value });\r\n    }\r\n\r\n    onChangeTag = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ ...this.state, mergeTagName: event.target.value });\r\n    }\r\n\r\n    onDelete = () => {\r\n        if (this.state.crmId == null) {\r\n            this.setState({ ...this.state, isDeleted: true })\r\n        } else {\r\n            var dynamicsWebApi = new DynamicsWebApi();\r\n            dynamicsWebApi.deleteRecord(this.state.crmId, \"cmb_mergetags\");\r\n        }\r\n    }\r\n\r\n    onSave = async () => {\r\n\r\n        var cmb_mergetag = {\r\n            cmb_attributepath: this.state.attributeSchemaName,\r\n            cmb_entityname: this.state.entitySchemaName,\r\n            cmb_name: this.state.mergeTagName,\r\n            \"cmb_emailtemplateid@odata.bind\": `/cmb_emailtemplates(${this.state.templateId})`\r\n        };\r\n\r\n        var dynamicsWebApi = new DynamicsWebApi();\r\n\r\n        try {\r\n            var response = await dynamicsWebApi.create(cmb_mergetag, \"cmb_mergetags\");\r\n            this.setState({ ...this.state, crmId: response });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    currentEntityMetadataAttributes = (): Array<SimpleKeyValue> => {\r\n\r\n        var currentEntityMetadata = this.props.metadata.find(m => m.key == this.state.entitySchemaName);\r\n\r\n        if (currentEntityMetadata != null) {\r\n            return currentEntityMetadata.attributes;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    render = () => {\r\n        console.log(this.state);\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    <Select\r\n                        showSearch\r\n                        style={{ width: 200 }}\r\n                        placeholder=\"Выберите сущность\"\r\n                        optionFilterProp=\"children\"\r\n                        onChange={this.onChangeEntityMetadata}\r\n                        defaultValue={this.state.entitySchemaName}\r\n                        disabled={(this.state.crmId != null)}\r\n                    >\r\n                        {this.props.metadata.map((entityMetadata) => <Option value={entityMetadata.key}>{entityMetadata.value}</Option>)}\r\n                    </Select>\r\n                </td>\r\n                <td>\r\n                    <Select\r\n                        showSearch\r\n                        style={{ width: 200 }}\r\n                        placeholder=\"Выберите поле\"\r\n                        optionFilterProp=\"children\"\r\n                        onChange={this.onChangeAttributeMetadata}\r\n                        defaultValue={this.state.attributeSchemaName}\r\n                        disabled={(this.state.crmId != null)}\r\n                    >\r\n                        {this.currentEntityMetadataAttributes().map((attributeMetadata) => <Option value={attributeMetadata.key}>{attributeMetadata.value}</Option>)}\r\n                    </Select>\r\n                </td>\r\n                <td>\r\n                    <Input placeholder=\"Тег\" onChange={this.onChangeTag} disabled={(this.state.crmId != null)} />\r\n                </td>\r\n                <td>\r\n                    <Button icon=\"save\" onClick={this.onSave} hidden={(this.state.crmId != null)}></Button>\r\n                </td>\r\n                <td>\r\n                    <Button type=\"danger\" icon=\"delete\"></Button>\r\n                </td>\r\n            </tr>);\r\n    }\r\n}","export class WebResourceUtils {\r\n    static GetParameter(parameter: string): string | null {\r\n        const regex = new RegExp(`${parameter}=(.+)`);\r\n        const result = decodeURIComponent(location.search)\r\n            .substring(1)\r\n            .split('&')\r\n            .filter(p => p.search(regex) !== -1)\r\n            .map(p => (p.match(regex) as RegExpMatchArray)[1]);\r\n        return result.length ? result[0] : null;\r\n    }\r\n    static GetDataParameter(): string | null {\r\n        return WebResourceUtils.GetParameter('data');\r\n    }\r\n}","import { notification } from \"antd\";\r\n\r\nexport class CommonUtils {\r\n    static GetGuid = (guid: string): string => {\r\n        return guid.replace(/{|}/g, '').toUpperCase();\r\n    };\r\n\r\n    static ShowNotification = (type: string, description: string, title: string) => {\r\n        notification[type]({\r\n            message: title,\r\n            description: description,\r\n        });\r\n    };\r\n}"],"sourceRoot":""}