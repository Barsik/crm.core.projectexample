{"version":3,"sources":["webpack:///./src/app/templateMergeTagsBuilderApp.tsx","webpack:///./src/components/transactionalEmail/templateMergeTagsBuilder/index.tsx","webpack:///./src/components/transactionalEmail/templateMergeTagsBuilder/mergeTagItem.tsx","webpack:///./src/common/webResourceUtils.ts","webpack:///./src/common/commonUtils.ts"],"names":["ReactDOM","render","document","getElementById","Content","props","componentDidMount","this","GetMetadata","GetTags","retrieveMultiple","undefined","state","templateId","response","tags","value","map","t","entitySchemaName","cmb_entityname","attributeSchemaName","cmb_attributepath","mergeTagName","cmb_name","crmId","cmb_mergetagid","index","setState","CommonUtils","ShowNotification","console","log","fetch","Xrm","Page","context","getClientUrl","json","body","metadata","entity","key","SchemaName","DisplayName","UserLocalizedLabel","Label","attributes","Attributes","attribute","attributeKey","LogicalName","attributeValue","handleAddTagClick","defaultEntityMetadata","length","tag","push","renderTags","Layout","Button","onClick","type","size","bind","GetGuid","WebResourceUtils","GetParameter","React","Component","Option","onChangeEntityMetadata","onChangeAttributeMetadata","onChangeTag","event","target","onDelete","isDeleted","dynamicsWebApi","deleteRecord","onSave","cmb_mergetag","create","update","currentEntityMetadataAttributes","currentEntityMetadata","find","m","hidden","Select","showSearch","style","width","placeholder","optionFilterProp","onChange","defaultValue","disabled","entityMetadata","attributeMetadata","Input","icon","parameter","regex","RegExp","result","decodeURIComponent","location","search","substring","split","filter","p","match","GetDataParameter","guid","replace","toUpperCase","description","title","notification","message"],"mappings":"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","file":"3.789604b2d0fa3a641e7c.hot-update.js","sourcesContent":["import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport \"./../assets/main.scss\"\r\nimport TemplateMergeTagsBuilder from \"../components/transactionalEmail/templateMergeTagsBuilder\";\r\n\r\nReactDOM.render(\r\n  <TemplateMergeTagsBuilder />,\r\n  document.getElementById(\"root\")\r\n);\r\n","import * as React from \"react\";\r\nimport { Layout, Button } from \"antd\";\r\nimport { MergeTagsBuilderState } from \"../../../models/mergeTagsBuilderState\";\r\nimport { EntityMetadata } from \"../../../models/entityMetadata\";\r\nimport { SimpleKeyValue } from \"../../../models/simpleKeyValue\";\r\nimport MergeTagItem from \"./mergeTagItem\";\r\nimport { MergeTag } from \"../../../models/mergeTag\";\r\nimport { WebResourceUtils } from \"../../../common/webResourceUtils\";\r\nimport { CommonUtils } from \"../../../common/commonUtils\";\r\nimport DynamicsWebApi from \"dynamics-web-api\"\r\n\r\nconst { Content } = Layout;\r\n\r\ninterface IProps {\r\n}\r\n\r\nexport default class TemplateMergeTagsBuilder extends React.Component<IProps, MergeTagsBuilderState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.handleAddTagClick = this.handleAddTagClick.bind(this);\r\n\r\n        this.state = {\r\n            metadata: [],\r\n            tags: [],\r\n            templateId: CommonUtils.GetGuid(WebResourceUtils.GetParameter(\"data\") ?? '')\r\n        };\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await this.GetMetadata();\r\n        await this.GetTags();\r\n    }\r\n\r\n    GetTags = async () => {\r\n        try {\r\n            var dynamicsWebApi = new DynamicsWebApi();\r\n            var response = await dynamicsWebApi.retrieveMultiple(\"cmb_mergetags\", undefined, `_cmb_emailtemplateid_value eq ${this.state.templateId}`);\r\n\r\n            if (response != null) {\r\n                var tags = response.value.map((t: any) => {\r\n                    var tag: MergeTag = {\r\n                        entitySchemaName: t.cmb_entityname,\r\n                        attributeSchemaName: t.cmb_attributepath,\r\n                        mergeTagName: t.cmb_name,\r\n                        crmId: t.cmb_mergetagid,\r\n                        index: -1,\r\n                        templateId: this.state.templateId\r\n                    };\r\n                    return tag;\r\n                });\r\n\r\n                this.setState({ ...this.state, tags: tags });\r\n            }\r\n\r\n        } catch (error) {\r\n            CommonUtils.ShowNotification('error', error, 'Ошибка');\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    GetMetadata = async () => {\r\n        try {\r\n            var response = await fetch(`${Xrm.Page.context.getClientUrl()}/api/data/v8.0/EntityDefinitions?$select=DisplayName,SchemaName&$filter=LogicalName eq 'contact' or LogicalName eq 'cmb_config'&$expand=Attributes($select=LogicalName,DisplayName)`);\r\n            const body = await response.json();\r\n\r\n            var metadata: Array<EntityMetadata> = body.value.map(function (entity: any): EntityMetadata {\r\n                return {\r\n                    key: entity.SchemaName,\r\n                    value: (entity.DisplayName != null && entity.DisplayName.UserLocalizedLabel != null) ? entity.DisplayName.UserLocalizedLabel.Label : null,\r\n                    attributes: entity.Attributes.map(function (attribute: any): SimpleKeyValue {\r\n                        const attributeKey = attribute.LogicalName;\r\n                        const attributeValue = (attribute.DisplayName != null && attribute.DisplayName.UserLocalizedLabel != null) ? attribute.DisplayName.UserLocalizedLabel.Label : null;\r\n\r\n                        return {\r\n                            key: attributeKey,\r\n                            value: attributeValue ?? attributeKey\r\n                        };\r\n                    })\r\n                };\r\n            });\r\n\r\n            this.setState({ ...this.state, metadata: metadata });\r\n        } catch (error) {\r\n            CommonUtils.ShowNotification('error', error, 'Ошибка');\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    handleAddTagClick = () => {\r\n\r\n        var defaultEntityMetadata = (this.state.metadata.length > 0) ? this.state.metadata[0] : null;\r\n\r\n        var tag: MergeTag = {\r\n            entitySchemaName: defaultEntityMetadata != null ? defaultEntityMetadata.key : undefined,\r\n            attributeSchemaName: undefined,\r\n            mergeTagName: '',\r\n            crmId: undefined,\r\n            index: -1,\r\n            templateId: this.state.templateId\r\n        };\r\n\r\n        var tags: Array<MergeTag> = this.state.tags;\r\n        tags.push(tag);\r\n        this.setState({ ...this.state, tags: tags });\r\n    }\r\n\r\n    renderTags = () => {\r\n        return (\r\n            <table>\r\n                {this.state.tags.length > 0 ?\r\n                    <thead>\r\n                        <tr>\r\n                            <td>Сущность</td>\r\n                            <td>Атрибут</td>\r\n                            <td>Тег</td>\r\n                        </tr>\r\n                    </thead>\r\n                    :\r\n                    <thead></thead>\r\n                }\r\n                <tbody>\r\n                    {this.state.tags.map((tag, index) => {\r\n                        tag.index = index;\r\n                        return (\r\n                            <MergeTagItem tag={tag} metadata={this.state.metadata} />\r\n                        );\r\n                    })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                <Layout>\r\n                    <Content>\r\n                        <div>\r\n                            <h2>Конструктор тегов слияния</h2>\r\n                        </div>\r\n                        <div>\r\n                            {this.renderTags()}\r\n                        </div>\r\n                        <div>\r\n                            <Button onClick={this.handleAddTagClick} type=\"link\" size={'small'}>\r\n                                Добавить</Button>\r\n                        </div>\r\n                        <hr />\r\n                        <div>\r\n                            <Button>Закрыть</Button>\r\n                        </div>\r\n                    </Content>\r\n                </Layout>\r\n            </div>);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Select, Button, Input } from \"antd\";\r\nimport { MergeTag } from \"../../../models/mergeTag\";\r\nimport { EntityMetadata } from \"../../../models/entityMetadata\";\r\nimport { SimpleKeyValue } from \"../../../models/simpleKeyValue\";\r\n\r\nimport DynamicsWebApi from \"dynamics-web-api\"\r\nimport { CommonUtils } from \"../../../common/commonUtils\";\r\n\r\n\r\nconst { Option } = Select;\r\n\r\ninterface MergeTagItemProps {\r\n    tag: MergeTag;\r\n    metadata: Array<EntityMetadata>;\r\n}\r\n\r\ninterface MergeTagItemState extends MergeTag {\r\n    isDeleted: boolean;\r\n}\r\n\r\nexport default class MergeTagItem extends React.Component<MergeTagItemProps, MergeTagItemState> {\r\n    constructor(props: MergeTagItemProps) {\r\n        super(props);\r\n\r\n        this.onChangeEntityMetadata = this.onChangeEntityMetadata.bind(this);\r\n        this.onChangeAttributeMetadata = this.onChangeAttributeMetadata.bind(this);\r\n        this.onChangeTag = this.onChangeTag.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.onSave = this.onSave.bind(this);\r\n\r\n        this.state = {\r\n            attributeSchemaName: props.tag.attributeSchemaName,\r\n            crmId: props.tag.crmId,\r\n            entitySchemaName: props.tag.entitySchemaName,\r\n            index: props.tag.index,\r\n            mergeTagName: props.tag.mergeTagName,\r\n            templateId: props.tag.templateId,\r\n            isDeleted: false\r\n        };\r\n    }\r\n\r\n    onChangeEntityMetadata = (value: string) => {\r\n        this.setState({ ...this.state, entitySchemaName: value, attributeSchemaName: undefined, mergeTagName: '' });\r\n    }\r\n\r\n    onChangeAttributeMetadata = (value: string) => {\r\n        this.setState({ ...this.state, attributeSchemaName: value });\r\n    }\r\n\r\n    onChangeTag = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ ...this.state, mergeTagName: event.target.value });\r\n    }\r\n\r\n    onDelete = async () => {\r\n        if (this.state.crmId == null) {\r\n            this.setState({ ...this.state, isDeleted: true })\r\n        } else {\r\n            var dynamicsWebApi = new DynamicsWebApi();\r\n            try {\r\n                await dynamicsWebApi.deleteRecord(this.state.crmId, \"cmb_mergetags\");\r\n                this.setState({ ...this.state, isDeleted: true })\r\n            } catch (error) {\r\n                CommonUtils.ShowNotification('error', error, 'Ошибка');\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    onSave = async () => {\r\n\r\n        var cmb_mergetag = {\r\n            cmb_attributepath: this.state.attributeSchemaName,\r\n            cmb_entityname: this.state.entitySchemaName,\r\n            cmb_name: this.state.mergeTagName,\r\n            \"cmb_emailtemplateid@odata.bind\": `/cmb_emailtemplates(${this.state.templateId})`\r\n        };\r\n\r\n        var dynamicsWebApi = new DynamicsWebApi();\r\n\r\n        try {\r\n            if (this.state.crmId == null) {\r\n                var response = await dynamicsWebApi.create(cmb_mergetag, \"cmb_mergetags\");\r\n                this.setState({ ...this.state, crmId: response });\r\n            } else {\r\n                var response = await dynamicsWebApi.update(this.state.crmId, \"cmb_mergetags\", cmb_mergetag);\r\n            }\r\n        } catch (error) {\r\n            CommonUtils.ShowNotification('error', error, 'Ошибка');\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    currentEntityMetadataAttributes = (): Array<SimpleKeyValue> => {\r\n\r\n        var currentEntityMetadata = this.props.metadata.find(m => m.key == this.state.entitySchemaName);\r\n\r\n        if (currentEntityMetadata != null) {\r\n            return currentEntityMetadata.attributes;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <tr hidden={this.state.isDeleted}>\r\n                <td>\r\n                    <Select\r\n                        showSearch\r\n                        style={{ width: 200 }}\r\n                        placeholder=\"Выберите сущность\"\r\n                        optionFilterProp=\"children\"\r\n                        onChange={this.onChangeEntityMetadata}\r\n                        defaultValue={this.state.entitySchemaName}\r\n                        disabled={(this.state.crmId != null)}\r\n                    >\r\n                        {this.props.metadata.map((entityMetadata) => <Option value={entityMetadata.key}>{entityMetadata.value}</Option>)}\r\n                    </Select>\r\n                </td>\r\n                <td>\r\n                    <Select\r\n                        showSearch\r\n                        style={{ width: 200 }}\r\n                        placeholder=\"Выберите поле\"\r\n                        optionFilterProp=\"children\"\r\n                        onChange={this.onChangeAttributeMetadata}\r\n                        defaultValue={this.state.attributeSchemaName}\r\n                        disabled={(this.state.crmId != null)}\r\n                    >\r\n                        {this.currentEntityMetadataAttributes().map((attributeMetadata) => <Option value={attributeMetadata.key}>{attributeMetadata.value}</Option>)}\r\n                    </Select>\r\n                </td>\r\n                <td>\r\n                    <Input placeholder=\"Тег\" onChange={this.onChangeTag} value={this.state.mergeTagName} disabled={(this.state.crmId != null)} />\r\n                </td>\r\n                <td>\r\n                    <Button icon=\"save\" onClick={this.onSave} hidden={(this.state.crmId != null)}></Button>\r\n                </td>\r\n                <td>\r\n                    <Button type=\"danger\" icon=\"delete\" onClick={this.onDelete} ></Button>\r\n                </td>\r\n            </tr>);\r\n    }\r\n}","export class WebResourceUtils {\r\n    static GetParameter(parameter: string): string | null {\r\n        const regex = new RegExp(`${parameter}=(.+)`);\r\n        const result = decodeURIComponent(location.search)\r\n            .substring(1)\r\n            .split('&')\r\n            .filter(p => p.search(regex) !== -1)\r\n            .map(p => (p.match(regex) as RegExpMatchArray)[1]);\r\n        return result.length ? result[0] : null;\r\n    }\r\n    static GetDataParameter(): string | null {\r\n        return WebResourceUtils.GetParameter('data');\r\n    }\r\n}","import { notification } from \"antd\";\r\n\r\nexport class CommonUtils {\r\n    static GetGuid = (guid: string): string => {\r\n        return guid.replace(/{|}/g, '').toUpperCase();\r\n    };\r\n\r\n    static ShowNotification = (type: string, description: string, title: string | undefined | null) => {\r\n        notification[type]({\r\n            message: title ?? '',\r\n            description: description,\r\n        });\r\n    };\r\n}"],"sourceRoot":""}