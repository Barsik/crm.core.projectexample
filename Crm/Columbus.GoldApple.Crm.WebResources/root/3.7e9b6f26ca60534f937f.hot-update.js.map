{"version":3,"sources":["webpack:///./src/app/templateMergeTagsBuilderApp.tsx","webpack:///./src/components/transactionalEmail/templateMergeTagsBuilder/index.tsx","webpack:///./src/components/transactionalEmail/templateMergeTagsBuilder/mergeTagItem.tsx","webpack:///./src/common/webResourceUtils.ts","webpack:///./src/common/commonUtils.ts"],"names":["ReactDOM","render","document","getElementById","Content","props","componentDidMount","this","GetMetadata","fetch","Xrm","Page","context","getClientUrl","json","body","metadata","value","map","entity","key","SchemaName","DisplayName","UserLocalizedLabel","Label","attributes","Attributes","attribute","attributeKey","LogicalName","attributeValue","setState","state","console","log","handleAddTagClick","bind","tags","templateId","CommonUtils","GetGuid","WebResourceUtils","GetParameter","defaultEntityMetadata","length","tag","entitySchemaName","undefined","attributeSchemaName","mergeTagName","crmId","index","push","renderTags","Layout","Button","onClick","type","size","React","Component","Option","onChangeEntityMetadata","onChangeAttributeMetadata","onChangeTag","onDelete","onSave","event","target","cmb_mergetag","cmb_attributepath","cmb_entityname","cmb_name","dynamicsWebApi","create","response","currentEntityMetadataAttributes","currentEntityMetadata","find","m","Select","showSearch","style","width","placeholder","optionFilterProp","onChange","defaultValue","disabled","entityMetadata","attributeMetadata","Input","icon","parameter","regex","RegExp","result","decodeURIComponent","location","search","substring","split","filter","p","match","GetDataParameter","guid","replace","toUpperCase"],"mappings":"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","file":"3.7e9b6f26ca60534f937f.hot-update.js","sourcesContent":["import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport \"./../assets/main.scss\"\r\nimport TemplateMergeTagsBuilder from \"../components/transactionalEmail/templateMergeTagsBuilder\";\r\n\r\nReactDOM.render(\r\n  <TemplateMergeTagsBuilder />,\r\n  document.getElementById(\"root\")\r\n);\r\n","import * as React from \"react\";\r\nimport { Layout, Button } from \"antd\";\r\nimport { MergeTagsBuilderState } from \"../../../models/mergeTagsBuilderState\";\r\nimport { EntityMetadata } from \"../../../models/entityMetadata\";\r\nimport { SimpleKeyValue } from \"../../../models/simpleKeyValue\";\r\nimport MergeTagItem from \"./mergeTagItem\";\r\nimport { MergeTag } from \"../../../models/mergeTag\";\r\nimport { WebResourceUtils } from \"../../../common/webResourceUtils\";\r\nimport { CommonUtils } from \"../../../common/commonUtils\";\r\n\r\nconst { Content } = Layout;\r\n\r\ninterface IProps {\r\n}\r\n\r\nexport default class TemplateMergeTagsBuilder extends React.Component<IProps, MergeTagsBuilderState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.handleAddTagClick = this.handleAddTagClick.bind(this);\r\n\r\n        this.state = {\r\n            metadata: [],\r\n            tags: [],\r\n            templateId: CommonUtils.GetGuid(WebResourceUtils.GetParameter(\"data\") ?? '')\r\n        };\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await this.GetMetadata();\r\n    }\r\n\r\n    GetMetadata = async () => {\r\n        try {\r\n            var response = await fetch(`${Xrm.Page.context.getClientUrl()}/api/data/v8.0/EntityDefinitions?$select=DisplayName,SchemaName&$filter=LogicalName eq 'contact' or LogicalName eq 'cmb_config'&$expand=Attributes($select=LogicalName,DisplayName)`);\r\n            const body = await response.json();\r\n\r\n            var metadata: Array<EntityMetadata> = body.value.map(function (entity: any): EntityMetadata {\r\n                return {\r\n                    key: entity.SchemaName,\r\n                    value: (entity.DisplayName != null && entity.DisplayName.UserLocalizedLabel != null) ? entity.DisplayName.UserLocalizedLabel.Label : null,\r\n                    attributes: entity.Attributes.map(function (attribute: any): SimpleKeyValue {\r\n                        const attributeKey = attribute.LogicalName;\r\n                        const attributeValue = (attribute.DisplayName != null && attribute.DisplayName.UserLocalizedLabel != null) ? attribute.DisplayName.UserLocalizedLabel.Label : null;\r\n\r\n                        return {\r\n                            key: attributeKey,\r\n                            value: attributeValue ?? attributeKey\r\n                        };\r\n                    })\r\n                };\r\n            });\r\n\r\n            this.setState({ ...this.state, metadata: metadata });\r\n\r\n            console.log(this.state);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    handleAddTagClick() {\r\n\r\n        var defaultEntityMetadata = (this.state.metadata.length > 0) ? this.state.metadata[0] : null;\r\n\r\n        var tag: MergeTag = {\r\n            entitySchemaName: defaultEntityMetadata != null ? defaultEntityMetadata.key : undefined,\r\n            attributeSchemaName: undefined,\r\n            mergeTagName: '',\r\n            crmId: undefined,\r\n            index: -1,\r\n            templateId: this.state.templateId\r\n        };\r\n\r\n        var tags: Array<MergeTag> = this.state.tags;\r\n        tags.push(tag);\r\n        this.setState({ ...this.state, tags: tags });\r\n    }\r\n\r\n    renderTags() {\r\n        return (\r\n            <table>\r\n                {this.state.tags.length > 0 ?\r\n                    <thead>\r\n                        <tr>\r\n                            <td>Сущность</td>\r\n                            <td>Атрибут</td>\r\n                            <td>Тег</td>\r\n                        </tr>\r\n                    </thead>\r\n                    :\r\n                    <thead></thead>\r\n                }\r\n                <tbody>\r\n                    {this.state.tags.map((tag, index) => {\r\n                        tag.index = index;\r\n                        return (\r\n                            <MergeTagItem tag={tag} metadata={this.state.metadata} />\r\n                        );\r\n                    })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Layout>\r\n                    <Content>\r\n                        <div>\r\n                            <h2>Конструктор тегов слияния</h2>\r\n                        </div>\r\n                        <div>\r\n                            {this.renderTags()}\r\n                        </div>\r\n                        <div>\r\n                            <Button onClick={this.handleAddTagClick} type=\"link\" size={'small'}>\r\n                                Добавить</Button>\r\n                        </div>\r\n                        <hr />\r\n                        <div>\r\n                            <Button>Закрыть</Button>\r\n                        </div>\r\n                    </Content>\r\n                </Layout>\r\n            </div>);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Select, Button, Input } from \"antd\";\r\nimport { MergeTag } from \"../../../models/mergeTag\";\r\nimport { EntityMetadata } from \"../../../models/entityMetadata\";\r\nimport { SimpleKeyValue } from \"../../../models/simpleKeyValue\";\r\n\r\nimport DynamicsWebApi from \"dynamics-web-api\"\r\n\r\n\r\nconst { Option } = Select;\r\n\r\ninterface MergeTagItemProps {\r\n    tag: MergeTag;\r\n    metadata: Array<EntityMetadata>;\r\n}\r\n\r\ninterface MergeTagItemState extends MergeTag {\r\n\r\n}\r\n\r\nexport default class MergeTagItem extends React.Component<MergeTagItemProps, MergeTagItemState> {\r\n    constructor(props: MergeTagItemProps) {\r\n        super(props);\r\n\r\n        this.onChangeEntityMetadata = this.onChangeEntityMetadata.bind(this);\r\n        this.onChangeAttributeMetadata = this.onChangeAttributeMetadata.bind(this);\r\n        this.onChangeTag = this.onChangeTag.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.onSave = this.onSave.bind(this);\r\n\r\n        this.state = {\r\n            attributeSchemaName: props.tag.attributeSchemaName,\r\n            crmId: props.tag.crmId,\r\n            entitySchemaName: props.tag.entitySchemaName,\r\n            index: props.tag.index,\r\n            mergeTagName: props.tag.mergeTagName,\r\n            templateId: props.tag.templateId\r\n        };\r\n    }\r\n\r\n    onChangeEntityMetadata(value: string) {\r\n        this.setState({ ...this.state, entitySchemaName: value, attributeSchemaName: undefined, mergeTagName: '' });\r\n    }\r\n\r\n    onChangeAttributeMetadata(value: string) {\r\n        this.setState({ ...this.state, attributeSchemaName: value });\r\n    }\r\n\r\n    onChangeTag(event: React.ChangeEvent<HTMLInputElement>) {\r\n        this.setState({ ...this.state, mergeTagName: event.target.value });\r\n    }\r\n\r\n    onDelete() {\r\n\r\n    }\r\n\r\n    async onSave() {\r\n\r\n        var cmb_mergetag = {\r\n            cmb_attributepath: this.state.attributeSchemaName,\r\n            cmb_entityname: this.state.entitySchemaName,\r\n            cmb_name: this.state.mergeTagName,\r\n            \"cmb_emailtemplateid@odata.bind\": `/cmb_emailtemplates(${this.state.templateId})`\r\n        };\r\n\r\n        var dynamicsWebApi = new DynamicsWebApi();\r\n\r\n        try {\r\n            var response = await dynamicsWebApi.create(cmb_mergetag, \"cmb_mergetags\");\r\n            this.setState({ ...this.state, crmId: response });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    currentEntityMetadataAttributes(): Array<SimpleKeyValue> {\r\n\r\n        var currentEntityMetadata = this.props.metadata.find(m => m.key == this.state.entitySchemaName);\r\n\r\n        if (currentEntityMetadata != null) {\r\n            return currentEntityMetadata.attributes;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    <Select\r\n                        showSearch\r\n                        style={{ width: 200 }}\r\n                        placeholder=\"Выберите сущность\"\r\n                        optionFilterProp=\"children\"\r\n                        onChange={this.onChangeEntityMetadata}\r\n                        defaultValue={this.state.entitySchemaName}\r\n                        disabled={(this.state.crmId != null)}\r\n                    >\r\n                        {this.props.metadata.map((entityMetadata) => <Option value={entityMetadata.key}>{entityMetadata.value}</Option>)}\r\n                    </Select>\r\n                </td>\r\n                <td>\r\n                    <Select\r\n                        showSearch\r\n                        style={{ width: 200 }}\r\n                        placeholder=\"Выберите поле\"\r\n                        optionFilterProp=\"children\"\r\n                        onChange={this.onChangeAttributeMetadata}\r\n                        defaultValue={this.state.attributeSchemaName}\r\n                        disabled={(this.state.crmId != null)}\r\n                    >\r\n                        {this.currentEntityMetadataAttributes().map((attributeMetadata) => <Option value={attributeMetadata.key}>{attributeMetadata.value}</Option>)}\r\n                    </Select>\r\n                </td>\r\n                <td>\r\n                    <Input placeholder=\"Тег\" onChange={this.onChangeTag} disabled={(this.state.crmId != null)} />\r\n                </td>\r\n                <td>\r\n                    <Button icon=\"save\" onClick={this.onSave}></Button>\r\n                </td>\r\n                <td>\r\n                    <Button type=\"danger\" icon=\"delete\"></Button>\r\n                </td>\r\n            </tr>);\r\n    }\r\n}","export class WebResourceUtils {\r\n    static GetParameter(parameter: string): string | null {\r\n        const regex = new RegExp(`${parameter}=(.+)`);\r\n        const result = decodeURIComponent(location.search)\r\n            .substring(1)\r\n            .split('&')\r\n            .filter(p => p.search(regex) !== -1)\r\n            .map(p => (p.match(regex) as RegExpMatchArray)[1]);\r\n        return result.length ? result[0] : null;\r\n    }\r\n    static GetDataParameter(): string | null {\r\n        return WebResourceUtils.GetParameter('data');\r\n    }\r\n}","export class CommonUtils {\r\n    static GetGuid = (guid: string): string => {\r\n        return guid.replace(/{|}/g, '').toUpperCase();\r\n    }\r\n}"],"sourceRoot":""}