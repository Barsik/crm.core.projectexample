{"version":3,"sources":["webpack:///./node_modules/dynamics-web-api/lib/helpers/ErrorHelper.js","webpack:///./node_modules/dynamics-web-api/lib/dwa.js","webpack:///./node_modules/dynamics-web-api/lib/utilities/Utility.js","webpack:///./node_modules/dynamics-web-api/lib/requests/xhr.js","webpack:///./node_modules/dynamics-web-api/lib/polyfills/string-es6.js","webpack:///./node_modules/dynamics-web-api/lib/dynamics-web-api.js","webpack:///./node_modules/dynamics-web-api/lib/utilities/buildFunctionParameters.js","webpack:///./node_modules/dynamics-web-api/lib/utilities/getFetchXmlPagingCookie.js","webpack:///./node_modules/dynamics-web-api/lib/utilities/convertToReferenceObject.js","webpack:///./node_modules/dynamics-web-api/lib/requests/sendRequest.js","webpack:///./node_modules/dynamics-web-api/lib/utilities/RequestConverter.js","webpack:///./node_modules/dynamics-web-api/lib/utilities/buildPreferHeader.js","webpack:///./node_modules/dynamics-web-api/lib/utilities/BatchConverter.js","webpack:///./node_modules/dynamics-web-api/lib/requests/helpers/parseResponse.js","webpack:///./node_modules/dynamics-web-api/lib/requests/helpers/dateReviver.js","webpack:///./node_modules/dynamics-web-api/lib/requests/helpers/parseResponseHeaders.js","webpack:///./node_modules/dynamics-web-api/lib/polyfills/Array-es6.js"],"names":["throwParameterError","functionName","parameterName","type","Error","ErrorHelper","handleErrorResponse","req","status","message","parameterCheck","parameter","stringParameterCheck","arrayParameterCheck","constructor","Array","stringOrArrayParameterCheck","numberParameterCheck","isNaN","parseInt","boolParameterCheck","guidParameterCheck","exec","error","keyParameterCheck","match","alternateKeys","split","length","i","trim","replace","join","callbackParameterCheck","callbackParameter","batchIncompatible","isBatch","batchNotStarted","handleHttpError","parsedError","parameters","Object","keys","forEach","k","module","exports","DWA","Types","ResponseBase","this","oDataContext","Response","call","value","ReferenceResponse","id","collection","MultipleResponse","oDataNextLink","oDataCount","FetchXmlResponse","PagingInfo","cookie","page","nextPage","Prefer","ReturnRepresentation","Annotations","AssociatedNavigationProperty","LookupLogicalName","All","FormattedValue","FetchXmlPagingCookie","isNull","getXrmContext","GetGlobalContext","Xrm","Utility","getGlobalContext","Page","context","getClientUrl","clientUrl","substring","buildFunctionParameters","getFetchXmlPagingCookie","convertToReferenceObject","generateUUID","d","Date","getTime","performance","now","c","r","Math","random","floor","toString","getXrmInternal","Internal","getXrmUtility","initWebApiUrl","version","parseResponse","parseResponseHeaders","isArray","options","method","uri","data","additionalHeaders","responseParams","successCallback","errorCallback","isAsync","request","XMLHttpRequest","key","open","setRequestHeader","onreadystatechange","readyState","responseHeaders","getAllResponseHeaders","response","responseText","headers","errorParsed","e","statusText","timeout","onerror","ontimeout","send","String","prototype","endsWith","searchString","position","subjectString","isFinite","lastIndex","lastIndexOf","startsWith","substr","Request","DynamicsWebApi","config","_internalConfig","webApiVersion","webApiUrl","impersonate","onTokenRefresh","includeAnnotations","maxPageSize","returnRepresentation","_isBatch","setConfig","useEntityNames","_makeRequest","Promise","resolve","reject","makeRequest","createRequest","then","create","object","prefer","select","entity","retrieveRequest","isRef","retrieve","expand","updateRequest","ifmatch","test","valueIfEmpty","catch","update","updateSingleProperty","keyValuePair","field","fieldValue","navigationProperty","deleteRequest","deleteRecord","propertyName","upsertRequest","ifnonematch","upsert","retrieveMultipleRequest","nextPageLink","url","_retrieveAllRequest","records","concat","pageLink","result","oDataDeltaLink","retrieveAllRequest","count","filter","toCount","countAll","retrieveMultiple","retrieveAll","executeFetchXml","fetchXml","pageNumber","pagingCookie","impersonateUserId","replacementString","fetch","_executeFetchXmlAll","innerExecuteFetchXmlAll","fetchAll","executeFetchXmlAll","associate","primaryKey","relationshipName","relatedCollection","relatedKey","_additionalUrl","disassociate","associateSingleValued","singleValuedNavigationPropertyName","disassociateSingleValued","executeUnboundFunction","_executeFunction","executeBoundFunction","isUnbound","_unboundRequest","executeUnboundAction","actionName","requestObject","_executeAction","executeBoundAction","createEntity","entityDefinition","updateEntity","mergeLabels","MetadataId","retrieveEntity","entityKey","retrieveEntities","createAttribute","attributeDefinition","updateAttribute","attributeType","navigationPropertyKey","metadataAttributeType","retrieveAttributes","retrieveAttribute","attributeKey","createRelationship","relationshipDefinition","updateRelationship","relationshipType","deleteRelationship","metadataId","retrieveRelationships","retrieveRelationship","createGlobalOptionSet","globalOptionSetDefinition","updateGlobalOptionSet","deleteGlobalOptionSet","globalOptionSetKey","retrieveGlobalOptionSet","castType","retrieveGlobalOptionSets","startBatch","executeBatch","initializeInstance","utility","getCollectionName","parameterNames","functionParameters","urlQuery","JSON","stringify","pageCookies","currentPageNumber","unescape","info","responseData","_entityNames","RequestConverter","BatchConverter","findCollectionName","entityName","xrmInternal","getEntitySetName","collectionName","setStandardHeaders","batchRequestCollection","responseParseParams","sendRequest","path","push","stringifiedData","regularExpression","valueParts","undefined","chr","charCodeAt","stringifyData","batchResult","convertToBatch","body","boundary","convertedToBatch","batchBoundary","batchBody","executeRequest","process","sendInternalRequest","token","hasOwnProperty","accessToken","_getCollectionName","indexOf","_isEntityNameException","toLowerCase","xrmUtility","getEntityMetadata","convertRequest","noCache","LogicalName","EntitySetName","async","_getEntityNames","_clearEntityNames","buildPreferHeader","convertRequestOptions","joinSymbol","requestArray","shift","removeBracketsFromGuidReg","filterResult","m","index","regex","replacement","encodeURIComponent","savedQuery","userQuery","top","orderBy","duplicateDetection","contentId","expandRequestArray","property","expandQuery","query","trackChanges","item","requests","currentChangeSet","isGet","contentIdValue","dateReviver","getFormattedKeyValue","keyName","newKey","format","parseData","parseParams","currentKey","j","formattedKeyValue","aliasKeys","_dwaType","parseResult","batch","parseBatchResponse","requestNumber","delimiter","batchResponseParts","pop","batchResponse","batchToProcess","httpStatusReg","httpStatus","httpStatusMessage","parsedResponse","parse","statusMessage","plainContentReg","plainContent","entityUrl","guidResult","a","UTC","headerStr","headerPairs","ilen","headerPair","arg"],"mappings":"sCAAA,SAASA,EAAoBC,EAAcC,EAAeC,GACtD,MAAM,IAAIC,MAAMD,EACVF,EAAe,iBAAmBC,EAAgB,4BAA8BC,EAChFF,EAAe,iBAAmBC,EAAgB,eAG5D,IAAIG,EAAc,CACdC,oBAAqB,SAAUC,GAQ3B,MAAM,IAAIH,MAAM,UACZG,EAAIC,OAAS,KACbD,EAAIE,UAGZC,eAAgB,SAAUC,EAAWV,EAAcC,EAAeC,GAU1D,MAAQQ,GAAiE,IAAbA,GAC5DX,EAAoBC,EAAcC,EAAeC,IAIzDS,qBAAsB,SAAUD,EAAWV,EAAcC,GAU7B,iBAAbS,GACPX,EAAoBC,EAAcC,EAAe,WAIzDW,oBAAqB,SAAUF,EAAWV,EAAcC,GAUhDS,EAAUG,cAAgBC,OAC1Bf,EAAoBC,EAAcC,EAAe,UAIzDc,4BAA6B,SAAUL,EAAWV,EAAcC,GACxDS,EAAUG,cAAgBC,OAA6B,iBAAbJ,GAC1CX,EAAoBC,EAAcC,EAAe,oBAIzDe,qBAAsB,SAAUN,EAAWV,EAAcC,GAUrD,GAAwB,iBAAbS,EAAuB,CAC9B,GAAyB,iBAAdA,GAA0BA,IAC5BO,MAAMC,SAASR,IAChB,OAGRX,EAAoBC,EAAcC,EAAe,YAIzDkB,mBAAoB,SAAUT,EAAWV,EAAcC,GAU3B,kBAAbS,GACPX,EAAoBC,EAAcC,EAAe,YAIzDmB,mBAAoB,SAAUV,EAAWV,EAAcC,GAYnD,IAGI,MAFY,mDAAmDoB,KAAKX,GAAW,GAInF,MAAOY,GACHvB,EAAoBC,EAAcC,EAAe,iBAIzDsB,kBAAmB,SAAUb,EAAWV,EAAcC,GAElD,IACIG,EAAYO,qBAAqBD,EAAWV,EAAcC,GAG1D,IAAIuB,EAAQ,mDAAmDH,KAAKX,GACpE,GAAIc,EACA,OAAOA,EAAM,GAIjB,IAAIC,EAAgBf,EAAUgB,MAAM,KAEpC,GAAID,EAAcE,OACd,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAcE,OAAQC,IACtCH,EAAcG,GAAKH,EAAcG,GAAGC,OAAOC,QAAQ,IAAK,KACxD,mCAAmCT,KAAKI,EAAcG,IAAI,GAIlE,OAAOH,EAAcM,KAAK,KAE9B,MAAOT,GACHvB,EAAoBC,EAAcC,EAAe,+CAIzD+B,uBAAwB,SAAUC,EAAmBjC,EAAcC,GAU/B,mBAArBgC,GACPlC,EAAoBC,EAAcC,EAAe,aAIzDiC,kBAAmB,SAAUlC,EAAcmC,GACvC,GAAIA,EAEA,MADAA,GAAU,EACJ,IAAIhC,MAAMH,EAAe,wCAIvCoC,gBAAiB,SAAUD,GACvB,IAAKA,EACD,MAAM,IAAIhC,MAAM,kLAIxBkC,gBAAiB,SAAUC,EAAaC,GACpC,IAAIjB,EAAQ,IAAInB,MAYhB,OAVAqC,OAAOC,KAAKH,GAAaI,SAAQ,SAASC,GACtCrB,EAAMqB,GAAKL,EAAYK,MAGvBJ,GACAC,OAAOC,KAAKF,GAAYG,SAAQ,SAAUC,GACtCrB,EAAMqB,GAAKJ,EAAWI,MAIvBrB,IAIfsB,EAAOC,QAAUzC,G,kBCzMjB,IAAI0C,EAAM,CACNC,MAAO,CACHC,aAAc,WAEVC,KAAKC,aAAe,IAExBC,SAAU,WAENL,EAAIC,MAAMC,aAAaI,KAAKH,MAE5BA,KAAKI,MAAQ,IAEjBC,kBAAmB,WAGfR,EAAIC,MAAMC,aAAaI,KAAKH,MAE5BA,KAAKM,GAAK,GACVN,KAAKO,WAAa,IAEtBC,iBAAkB,WAIdX,EAAIC,MAAMC,aAAaI,KAAKH,MAE5BA,KAAKS,cAAgB,GACrBT,KAAKU,WAAa,EAClBV,KAAKI,MAAQ,IAEjBO,iBAAkB,WAGdd,EAAIC,MAAMC,aAAaI,KAAKH,MAE5BA,KAAKI,MAAQ,GACbJ,KAAKY,WAAa,CAGdC,OAAQ,GACRC,KAAM,EACNC,SAAU,KAItBC,OAAQ,CAEJC,qBAAsB,wBACtBC,YAAa,CAETC,6BAA8B,sDAE9BC,kBAAmB,2CAEnBC,IAAK,IAELC,eAAgB,4CAEhBC,qBAAsB,iDAKlC5B,EAAOC,QAAUC,G,oBC/DjB,SAAS2B,EAAOpB,GACZ,YAAwB,IAAVA,GAAkC,MAATA,EAgB3C,SAASqB,IACL,GAAgC,oBAArBC,iBACP,OAAOA,mBAGP,GAAmB,oBAARC,IAAqB,CAE5B,IAAKH,EAAOG,IAAIC,WAAaJ,EAAOG,IAAIC,QAAQC,kBAC5C,OAAOF,IAAIC,QAAQC,mBAElB,IAAKL,EAAOG,IAAIG,QAAUN,EAAOG,IAAIG,KAAKC,SAC3C,OAAOJ,IAAIG,KAAKC,QAK5B,MAAM,IAAI7E,MAAM,gLAGpB,SAAS8E,IACL,IAEIC,EAFUR,IAEUO,eAKxB,OAHIC,EAAU1D,MAAM,SAChB0D,EAAYA,EAAUC,UAAU,EAAGD,EAAUvD,OAAS,IAEnDuD,EAgBX,IAAIL,EAAU,CAOVO,wBAAyB,EAAQ,KASjCC,wBAAyB,EAAQ,KAQjCC,yBAA0B,EAAQ,KAOlCb,OAAQA,EAERc,aAxFJ,WACI,IAAIC,GAAI,IAAIC,MAAOC,UAInB,MAH2B,oBAAhBC,aAA0D,mBAApBA,YAAYC,MACzDJ,GAAKG,YAAYC,OAEd,uCAAuC9D,QAAQ,SAAS,SAAU+D,GACrE,IAAIC,GAAKN,EAAoB,GAAhBO,KAAKC,UAAiB,GAAK,EAExC,OADAR,EAAIO,KAAKE,MAAMT,EAAI,KACL,MAANK,EAAYC,EAAS,EAAJA,EAAU,GAAMI,SAAS,QAkFtDxB,cAAeA,EAEfyB,eA9CJ,WAEI,MAAsB,oBAARvB,IAAsBA,IAAIwB,SAAW,MA8CnDC,cA3CJ,WACI,MAAsB,oBAARzB,IAAsBA,IAAIC,QAAU,MA4ClDI,aAAcA,EAEdqB,cAxDJ,SAAuBC,GACnB,OAAOtB,IAAiB,cAAgBsB,EAAU,MA0DtD3D,EAAOC,QAAUgC,G,oBC1GjB,IAAI2B,EAAgB,EAAQ,KACxBC,EAAuB,EAAQ,KAC/BrG,EAAc,EAAQ,KAErBU,MAAM4F,SACP,EAAQ,KA0GZ9D,EAAOC,QAnGU,SAAU8D,GACvB,IAAIC,EAASD,EAAQC,OACjBC,EAAMF,EAAQE,IACdC,EAAOH,EAAQG,KACfC,EAAoBJ,EAAQI,kBAC5BC,EAAiBL,EAAQK,eACzBC,EAAkBN,EAAQM,gBAC1BC,EAAgBP,EAAQO,cACxBC,EAAUR,EAAQQ,QAElBC,EAAU,IAAIC,eAIlB,IAAK,IAAIC,KAHTF,EAAQG,KAAKX,EAAQC,EAAKM,GAGVJ,EACZK,EAAQI,iBAAiBF,EAAKP,EAAkBO,IAGpDF,EAAQK,mBAAqB,WACzB,GAA2B,IAAvBL,EAAQM,WAAkB,CAC1B,OAAQN,EAAQ7G,QACZ,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACD,IAAIoH,EAAkBlB,EAAqBW,EAAQQ,yBAG/CC,EAAW,CACXf,KAHeN,EAAcY,EAAQU,aAAcH,EAAiBX,GAIpEe,QAASJ,EACTpH,OAAQ6G,EAAQ7G,QAGpB0G,EAAgBY,GAChB,MAEJ,QACI,IAAIvG,EACJ,IACI,IAAI0G,EAAcxB,EAAcY,EAAQU,aAAcrB,EAAqBW,EAAQQ,yBAA0BZ,GAE7G,GAAIlG,MAAM4F,QAAQsB,GAAc,CAC5Bd,EAAcc,GACd,MAGJ1G,EAAQ0G,EAAY1G,MACtB,MAAO2G,GAED3G,EADA8F,EAAQS,SAASlG,OAAS,EAClB,CAAEnB,QAAS4G,EAAQS,UAGnB,CAAErH,QAAS,oBAI3B0G,EAAc9G,EAAYiC,gBAAgBf,EAAO,CAC7Cf,OAAQ6G,EAAQ7G,OAChB2H,WAAYd,EAAQc,cAMhCd,EAAU,KACVJ,EAAerF,OAAS,IAI5BgF,EAAQwB,UACRf,EAAQe,QAAUxB,EAAQwB,SAG9Bf,EAAQgB,QAAU,WACdlB,EAAc9G,EAAYiC,gBAAgB,CACtC9B,OAAQ6G,EAAQ7G,OAChB2H,WAAYd,EAAQc,WACpB1H,QAAS4G,EAAQU,cAAgB,mBAErCd,EAAerF,OAAS,EACxByF,EAAU,MAGdA,EAAQiB,UAAY,WAChBnB,EAAc9G,EAAYiC,gBAAgB,CACtC9B,OAAQ6G,EAAQ7G,OAChB2H,WAAYd,EAAQc,WACpB1H,QAAS4G,EAAQU,cAAgB,uBAErCd,EAAerF,OAAS,EACxByF,EAAU,MAGdN,EACMM,EAAQkB,KAAKxB,GACbM,EAAQkB,S,kBC5GlBC,OAAOC,UAAUC,SAAW,SAAUC,EAAcC,GAChD,IAAIC,EAAgB3F,KAAKiD,YACD,iBAAbyC,IAA0BE,SAASF,IAAa5C,KAAKE,MAAM0C,KAAcA,GAAYA,EAAWC,EAAcjH,UACrHgH,EAAWC,EAAcjH,QAE7BgH,GAAYD,EAAa/G,OACzB,IAAImH,EAAYF,EAAcG,YAAYL,EAAcC,GACxD,OAAsB,IAAfG,GAAoBA,IAAcH,GAG7CJ,OAAOC,UAAUQ,WAAa,SAAUN,EAAcC,GAElD,OADAA,EAAWA,GAAY,EAChB1F,KAAKgG,OAAON,EAAUD,EAAa/G,UAAY+G,I,iCCVhD,EAAQ,KAAlB,IACI7D,EAAU,EAAQ,KAClBzE,EAAc,EAAQ,KACtB8I,EAAU,EAAQ,KAGjBX,OAAOC,UAAUC,UAAaF,OAAOC,UAAUQ,YAChD,EAAQ,KAoGZ,SAASG,EAAeC,GAEpB,IAAIC,EAAkB,CAClBC,cAAe,MACfC,UAAW,KACXC,YAAa,KACbC,eAAgB,KAChBC,mBAAoB,KACpBC,YAAa,KACbC,qBAAsB,MAGtBC,GAAW,EAEVT,IACDA,EAASC,GAUbpG,KAAK6G,UAAY,SAAUV,GAEnBA,EAAOE,gBACPlJ,EAAYO,qBAAqByI,EAAOE,cAAe,2BAA4B,wBACnFD,EAAgBC,cAAgBF,EAAOE,eAGvCF,EAAOG,WACPnJ,EAAYO,qBAAqByI,EAAOG,UAAW,2BAA4B,oBAC/EF,EAAgBE,UAAYH,EAAOG,WAEnCF,EAAgBE,UAAY1E,EAAQyB,cAAc+C,EAAgBC,eAGlEF,EAAOI,cACPH,EAAgBG,YAAcpJ,EAAYgB,mBAAmBgI,EAAOI,YAAa,2BAA4B,uBAG7GJ,EAAOK,iBACPrJ,EAAY4B,uBAAuBoH,EAAOK,eAAgB,2BAA4B,yBACtFJ,EAAgBI,eAAiBL,EAAOK,gBAGxCL,EAAOM,qBACPtJ,EAAYO,qBAAqByI,EAAOM,mBAAoB,2BAA4B,6BACxFL,EAAgBK,mBAAqBN,EAAOM,oBAG5CN,EAAOjB,UACP/H,EAAYY,qBAAqBoI,EAAOjB,QAAS,2BAA4B,kBAC7EkB,EAAgBlB,QAAUiB,EAAOjB,SAGjCiB,EAAOO,cACPvJ,EAAYY,qBAAqBoI,EAAOO,YAAa,2BAA4B,sBACjFN,EAAgBM,YAAcP,EAAOO,aAGrCP,EAAOQ,uBACPxJ,EAAYe,mBAAmBiI,EAAOQ,qBAAsB,2BAA4B,+BACxFP,EAAgBO,qBAAuBR,EAAOQ,sBAG9CR,EAAOW,iBACP3J,EAAYe,mBAAmBiI,EAAOW,eAAgB,2BAA4B,yBAClFV,EAAgBU,eAAiBX,EAAOW,iBAIhD9G,KAAK6G,UAAUV,GAEf,IAAIY,EAAe,SAAUpD,EAAQQ,EAASpH,EAAcgH,GAExD,OADAI,EAAQjF,QAAU0H,EACX,IAAII,SAAQ,SAAUC,EAASC,GAClCjB,EAAQkB,YAAYxD,EAAQQ,EAASpH,EAAcqJ,EAAiBrC,EAAgBkD,EAASC,OA2BrGlH,KAAKoH,cAAgB,SAAUjD,GAG3B,OAFAhH,EAAYK,eAAe2G,EAAS,wBAAyB,WAEtD4C,EAAa,OAAQ5C,EAAS,UAChCkD,MAAK,SAAUzC,GACZ,OAAOA,EAASf,SAwB5B7D,KAAKsH,OAAS,SAAUC,EAAQhH,EAAYiH,EAAQC,GAChDtK,EAAYK,eAAe+J,EAAQ,wBAAyB,UAC5DpK,EAAYO,qBAAqB6C,EAAY,wBAAyB,cAElEiH,GACArK,EAAYW,4BAA4B0J,EAAQ,wBAAyB,UAGzEC,GACAtK,EAAYQ,oBAAoB8J,EAAQ,wBAAyB,UAGrE,IAAItD,EAAU,CACV5D,WAAYA,EACZkH,OAAQA,EACRD,OAAQA,EACRE,OAAQH,GAGZ,OAAOvH,KAAKoH,cAAcjD,IAuB9BnE,KAAK2H,gBAAkB,SAAUxD,GAC7BhH,EAAYK,eAAe2G,EAAS,0BAA2B,WAG/D,IAAIyD,EAA0B,MAAlBzD,EAAQsD,QAA4C,IAA1BtD,EAAQsD,OAAO/I,QAAgByF,EAAQsD,OAAO,GAAGjC,SAAS,SAChG,OAAOuB,EAAa,MAAO5C,EAAS,WAAY,CAAEyD,MAAOA,IAASP,MAAK,SAAUzC,GAC7E,OAAOA,EAASf,SAaxB7D,KAAK6H,SAAW,SAAUxD,EAAK9D,EAAYkH,EAAQK,GAE/C3K,EAAYO,qBAAqB2G,EAAK,0BAA2B,OACjEA,EAAMlH,EAAYmB,kBAAkB+F,EAAK,0BAA2B,OACpElH,EAAYO,qBAAqB6C,EAAY,0BAA2B,cAEpEkH,GAAUA,EAAO/I,QACjBvB,EAAYQ,oBAAoB8J,EAAQ,0BAA2B,UAGnEK,GAAUA,EAAOpJ,QACjBvB,EAAYW,4BAA4BgK,EAAQ,0BAA2B,UAG/E,IAAI3D,EAAU,CACV5D,WAAYA,EACZ8D,IAAKA,EACLoD,OAAQA,EACRK,OAAQA,GAGZ,OAAO9H,KAAK2H,gBAAgBxD,IAShCnE,KAAK+H,cAAgB,SAAU5D,GAE3BhH,EAAYK,eAAe2G,EAAS,wBAAyB,WAEtC,MAAnBA,EAAQ6D,UACR7D,EAAQ6D,QAAU,KAItB,IAAIrE,EAAS,uEAAuEsE,KAAK9D,EAAQ5D,YAC3F,MAAQ,QAGVyH,EAAU7D,EAAQ6D,QACtB,OAAOjB,EAAapD,EAAQQ,EAAS,SAAU,CAAE+D,cAAc,IAC1Db,MAAK,SAAUzC,GACZ,OAAOA,EAASf,QACjBsE,OAAM,SAAU9J,GACf,GAAI2J,GAA4B,MAAjB3J,EAAMf,OAEjB,OAAO,EAGX,MAAMe,MAclB2B,KAAKoI,OAAS,SAAU/D,EAAK9D,EAAYgH,EAAQC,EAAQC,GAErDtK,EAAYO,qBAAqB2G,EAAK,wBAAyB,OAC/DA,EAAMlH,EAAYmB,kBAAkB+F,EAAK,wBAAyB,OAClElH,EAAYK,eAAe+J,EAAQ,wBAAyB,UAC5DpK,EAAYO,qBAAqB6C,EAAY,wBAAyB,cAElEiH,GACArK,EAAYW,4BAA4B0J,EAAQ,wBAAyB,UAGzEC,GACAtK,EAAYQ,oBAAoB8J,EAAQ,wBAAyB,UAGrE,IAAItD,EAAU,CACV5D,WAAYA,EACZ8D,IAAKA,EACLoD,OAAQA,EACRD,OAAQA,EACRE,OAAQH,GAGZ,OAAOvH,KAAK+H,cAAc5D,IAa9BnE,KAAKqI,qBAAuB,SAAUhE,EAAK9D,EAAY+H,EAAcd,EAAQC,GAEzEtK,EAAYO,qBAAqB2G,EAAK,sCAAuC,OAC7EA,EAAMlH,EAAYmB,kBAAkB+F,EAAK,sCAAuC,OAChFlH,EAAYK,eAAe8K,EAAc,sCAAuC,gBAChFnL,EAAYO,qBAAqB6C,EAAY,sCAAuC,cAEpF,IAAIgI,EAAQhJ,OAAOC,KAAK8I,GAAc,GAClCE,EAAaF,EAAaC,GAmB9B,OAjBIf,GACArK,EAAYW,4BAA4B0J,EAAQ,sCAAuC,UAGvFC,GACAtK,EAAYQ,oBAAoB8J,EAAQ,sCAAuC,UAY5EV,EAAa,MATN,CACVxG,WAAYA,EACZ8D,IAAKA,EACLoD,OAAQA,EACRD,OAAQA,EACRiB,mBAAoBF,EACpB1E,KAAM,CAAEzD,MAAOoI,IAGiB,wBAC/BnB,MAAK,SAAUzC,GACZ,OAAOA,EAASf,SAU5B7D,KAAK0I,cAAgB,SAAUvE,GAE3BhH,EAAYK,eAAe2G,EAAS,wBAAyB,WAG7D,IAAI6D,EAAU7D,EAAQ6D,QACtB,OAAOjB,EAAa,SAAU5C,EAAS,SAAU,CAAE+D,cAAc,IAAQb,MAAK,SAAUzC,GACpF,OAAOA,EAASf,QACjBsE,OAAM,SAAU9J,GACf,GAAI2J,GAA4B,MAAjB3J,EAAMf,OAEjB,OAAO,EAIP,MAAMe,MAalB2B,KAAK2I,aAAe,SAAUtE,EAAK9D,EAAYqI,GAY3C,OAXAzL,EAAYO,qBAAqB6C,EAAY,8BAA+B,cAExD,MAAhBqI,GACAzL,EAAYO,qBAAqBkL,EAAc,8BAA+B,gBAQ3E7B,EAAa,SANN,CACV0B,mBAAoBG,EACpBrI,WAAYA,EACZ8D,IAAKA,GAG8B,gBAAgBgD,MAAK,gBAWhErH,KAAK6I,cAAgB,SAAU1E,GAC3BhH,EAAYK,eAAe2G,EAAS,wBAAyB,WAG7D,IAAI2E,EAAc3E,EAAQ2E,YACtBd,EAAU7D,EAAQ6D,QACtB,OAAOjB,EAAa,QAAS5C,EAAS,UACjCkD,MAAK,SAAUzC,GACZ,OAAOA,EAASf,QACjBsE,OAAM,SAAU9J,GACf,KAAIyK,GAAgC,MAAjBzK,EAAMf,QAIhB0K,GAA4B,MAAjB3J,EAAMf,QAK1B,MAAMe,MAclB2B,KAAK+I,OAAS,SAAU1E,EAAK9D,EAAYgH,EAAQC,EAAQC,GAErDtK,EAAYO,qBAAqB2G,EAAK,wBAAyB,OAC/DA,EAAMlH,EAAYmB,kBAAkB+F,EAAK,wBAAyB,OAElElH,EAAYK,eAAe+J,EAAQ,wBAAyB,UAC5DpK,EAAYO,qBAAqB6C,EAAY,wBAAyB,cAElEiH,GACArK,EAAYW,4BAA4B0J,EAAQ,wBAAyB,UAGzEC,GACAtK,EAAYQ,oBAAoB8J,EAAQ,wBAAyB,UAGrE,IAAItD,EAAU,CACV5D,WAAYA,EACZ8D,IAAKA,EACLoD,OAAQA,EACRD,OAAQA,EACRE,OAAQH,GAGZ,OAAOvH,KAAK6I,cAAc1E,IAG9B,IAAI6E,EAA0B,SAAU7E,EAAS8E,GAO7C,OALIA,IACA9L,EAAYO,qBAAqBuL,EAAc,kCAAmC,gBAClF9E,EAAQ+E,IAAMD,GAGXlC,EAAa,MAAO5C,EAAS,oBAC/BkD,MAAK,SAAUzC,GACZ,OAAOA,EAASf,SAW5B7D,KAAKgJ,wBAA0BA,EAE/B,IAAIG,EAAsB,SAAUhF,EAAS8E,EAAcG,GAGvD,OAFAA,EAAUA,GAAW,GAEdJ,EAAwB7E,EAAS8E,GAAc5B,MAAK,SAAUzC,GACjEwE,EAAUA,EAAQC,OAAOzE,EAASxE,OAElC,IAAIkJ,EAAW1E,EAASnE,cAExB,GAAI6I,EACA,OAAOH,EAAoBhF,EAASmF,EAAUF,GAGlD,IAAIG,EAAS,CAAEnJ,MAAOgJ,GAOtB,OALIxE,EAAS4E,iBACTD,EAAO,oBAAsB3E,EAAS4E,eACtCD,EAAOC,eAAiB5E,EAAS4E,gBAG9BD,MAUfvJ,KAAKyJ,mBAAqB,SAAUtF,GAEhC,OADAhH,EAAY8B,kBAAkB,oCAAqC2H,GAC5DuC,EAAoBhF,IAU/BnE,KAAK0J,MAAQ,SAAUnJ,EAAYoJ,GAC/B,IAAIxF,EAAU,CACV5D,WAAYA,GAYhB,OATc,MAAVoJ,GAA6B,MAAVA,IAAmBA,EAAOjL,OAC7CyF,EAAQsE,mBAAqB,UAG7BtE,EAAQwF,OAASA,EACjBxF,EAAQuF,OAAQ,GAIb3C,EAAa,MAAO5C,EAAS,QAAS,CAAEyF,QAASzF,EAAQuF,QAC3DrC,MAAK,SAAUzC,GACZ,OAAOA,EAASf,SAY5B7D,KAAK6J,SAAW,SAAUtJ,EAAYoJ,EAAQlC,GAE1C,OADAtK,EAAY8B,kBAAkB,0BAA2B2H,GAClDuC,EAAoB,CACvB5I,WAAYA,EACZoJ,OAAQA,EACRlC,OAAQA,IAEPJ,MAAK,SAAUzC,GACZ,OAAOA,GACAA,EAASxE,MAAQwE,EAASxE,MAAM1B,OACjC,MAalBsB,KAAK8J,iBAAmB,SAAUvJ,EAAYkH,EAAQkC,EAAQV,GAC1D,OAAOjJ,KAAKgJ,wBAAwB,CAChCzI,WAAYA,EACZkH,OAAQA,EACRkC,OAAQA,GACTV,IAWPjJ,KAAK+J,YAAc,SAAUxJ,EAAYkH,EAAQkC,GAE7C,OADAxM,EAAY8B,kBAAkB,6BAA8B2H,GACrDuC,EAAoB,CACvB5I,WAAYA,EACZkH,OAAQA,EACRkC,OAAQA,KAIhB,IAAIK,EAAkB,SAAUzJ,EAAY0J,EAAUxD,EAAoByD,EAAYC,EAAcC,GAEhGjN,EAAYO,qBAAqBuM,EAAU,iCAAkC,YAE7EC,EAAaA,GAAc,EAE3B/M,EAAYY,qBAAqBmM,EAAY,iCAAkC,cAC/E,IAAIG,EAAoB,YAAcH,EAAa,IAiBnD,OAfoB,MAAhBC,IACAhN,EAAYO,qBAAqByM,EAAc,iCAAkC,gBACjFE,GAAqB,mBAAqBF,EAAe,KAI7DF,EAAWA,EAASpL,QAAQ,YAAawL,GASlCtD,EAAa,MAPN,CACVxG,WAAYA,EACZkG,mBAAoBA,EACpBF,YAAa6D,EACbH,SAAUA,GAGsB,kBAAmB,CAAEC,WAAYA,IAChE7C,MAAK,SAAUzC,GACZ,OAAOA,EAASf,SAe5B7D,KAAKsK,MAAQN,EAabhK,KAAKgK,gBAAkBA,EAEvB,IAAIO,EAAsB,SAAUhK,EAAY0J,EAAUxD,EAAoByD,EAAYC,EAAcC,EAAmBhB,GAGvH,OAFAA,EAAUA,GAAW,GAEdY,EAAgBzJ,EAAY0J,EAAUxD,EAAoByD,EAAYC,EAAcC,GAA4B/C,MAAK,SAAUzC,GAGlI,OAFAwE,EAAUA,EAAQC,OAAOzE,EAASxE,OAE9BwE,EAAShE,WACF2J,EAAoBhK,EAAY0J,EAAUxD,EAAoB7B,EAAShE,WAAWG,SAAU6D,EAAShE,WAAWC,OAAQuJ,EAAmBhB,GAG/I,CAAEhJ,MAAOgJ,OAIpBoB,EAA0B,SAAUjK,EAAY0J,EAAUxD,EAAoB2D,GAE9E,OADAjN,EAAY8B,kBAAkB,oCAAqC2H,GAC5D2D,EAAoBhK,EAAY0J,EAAUxD,EAAoB,KAAM,KAAM2D,IAYrFpK,KAAKyK,SAAWD,EAWhBxK,KAAK0K,mBAAqBF,EAa1BxK,KAAK2K,UAAY,SAAUpK,EAAYqK,EAAYC,EAAkBC,EAAmBC,EAAYX,GAchG,OAbAjN,EAAYO,qBAAqBoN,EAAmB,2BAA4B,qBAChF3N,EAAYO,qBAAqBmN,EAAkB,2BAA4B,oBAC/ED,EAAazN,EAAYmB,kBAAkBsM,EAAY,2BAA4B,cACnFG,EAAa5N,EAAYmB,kBAAkByM,EAAY,2BAA4B,cAU5EhE,EAAa,OARN,CACViE,eAAgBH,EAAmB,QACnCtK,WAAYA,EACZ8D,IAAKuG,EACLrE,YAAa6D,EACbvG,KAAM,CAAE,YAAaiH,EAAoB,IAAMC,EAAa,MAG3B,aAChC1D,MAAK,gBAadrH,KAAKiL,aAAe,SAAU1K,EAAYqK,EAAYC,EAAkBE,EAAYX,GAWhF,OAVAjN,EAAYO,qBAAqBmN,EAAkB,8BAA+B,oBAClFE,EAAa5N,EAAYmB,kBAAkByM,EAAY,8BAA+B,aAS/EhE,EAAa,SAPN,CACViE,eAAgBH,EAAmB,IAAME,EAAa,SACtDxK,WAAYA,EACZ8D,IAAKuG,EACLrE,YAAa6D,GAGsB,gBAClC/C,MAAK,gBAcdrH,KAAKkL,sBAAwB,SAAU3K,EAAY8D,EAAK8G,EAAoCL,EAAmBC,EAAYX,GAcvH,OAZAW,EAAa5N,EAAYmB,kBAAkByM,EAAY,uCAAwC,cAC/F5N,EAAYO,qBAAqByN,EAAoC,uCAAwC,sCAC7GhO,EAAYO,qBAAqBoN,EAAmB,uCAAwC,qBAUrF/D,EAAa,MARN,CACViE,eAAgBG,EAAqC,QACrD5K,WAAYA,EACZ8D,IAAKA,EACLkC,YAAa6D,EACbvG,KAAM,CAAE,YAAaiH,EAAoB,IAAMC,EAAa,MAG5B,yBAC/B1D,MAAK,gBAYdrH,KAAKoL,yBAA2B,SAAU7K,EAAY8D,EAAK8G,EAAoCf,GAW3F,OATAjN,EAAYO,qBAAqByN,EAAoC,0CAA2C,sCASzGpE,EAAa,SAPN,CACViE,eAAgBG,EAAqC,QACrD9G,IAAKA,EACL9D,WAAYA,EACZgG,YAAa6D,GAGsB,4BAClC/C,MAAK,gBAWdrH,KAAKqL,uBAAyB,SAAUtO,EAAcuC,EAAY8K,GAC9D,OAAOkB,EAAiBvO,EAAcuC,EAAY,KAAM,KAAM8K,GAAmB,IAarFpK,KAAKuL,qBAAuB,SAAUjL,EAAIC,EAAYxD,EAAcuC,EAAY8K,GAC5E,OAAOkB,EAAiBvO,EAAcuC,EAAYiB,EAAYD,EAAI8J,IAGtE,IAAIkB,EAAmB,SAAUvO,EAAcuC,EAAYiB,EAAYD,EAAI8J,EAAmBoB,GAE1FrO,EAAYO,qBAAqBX,EAAc,iCAAkC,gBAEjF,IAAIoH,EAAU,CACV6G,eAAgBjO,EAAe6E,EAAQO,wBAAwB7C,GAC/DmM,gBAAiBD,EACjBnH,IAAK/D,EACLC,WAAYA,EACZgG,YAAa6D,GAGjB,OAAOrD,EAAa,MAAO5C,EAAS,mBAAmBkD,MAAK,SAAUzC,GAClE,OAAOA,EAASf,SAYxB7D,KAAK0L,qBAAuB,SAAUC,EAAYC,EAAexB,GAC7D,OAAOyB,EAAeF,EAAYC,EAAe,KAAM,KAAMxB,GAAmB,IAapFpK,KAAK8L,mBAAqB,SAAUxL,EAAIC,EAAYoL,EAAYC,EAAexB,GAC3E,OAAOyB,EAAeF,EAAYC,EAAerL,EAAYD,EAAI8J,IAGrE,IAAIyB,EAAiB,SAAUF,EAAYC,EAAerL,EAAYD,EAAI8J,EAAmBoB,GAEzFrO,EAAYO,qBAAqBiO,EAAY,+BAAgC,cAgB7E,OAAO5E,EAAa,OAdN,CACViE,eAAgBW,EAChBF,gBAAiBD,EACjBjL,WAAYA,EACZ8D,IAAK/D,EACLiG,YAAa6D,EACbvG,KAAM+H,GAQ2B,iBAAiBvE,MALtC,SAAUzC,GACtB,OAAOA,EAASf,SAaxB7D,KAAK+L,aAAe,SAAUC,GAE1B7O,EAAYK,eAAewO,EAAkB,8BAA+B,oBAE5E,IAAI7H,EAAU,CACV5D,WAAY,oBACZmH,OAAQsE,GAEZ,OAAOhM,KAAKoH,cAAcjD,IAU9BnE,KAAKiM,aAAe,SAAUD,EAAkBE,GAE5C/O,EAAYK,eAAewO,EAAkB,8BAA+B,oBAC5E7O,EAAYgB,mBAAmB6N,EAAiBG,WAAY,8BAA+B,+BAE3F,IAAIhI,EAAU,CACV5D,WAAY,oBACZ2L,YAAaA,EACb7H,IAAK2H,EAAiBG,WACtBzE,OAAQsE,GAEZ,OAAOhM,KAAK+H,cAAc5D,IAW9BnE,KAAKoM,eAAiB,SAAUC,EAAW5E,EAAQK,GAE/C3K,EAAYmB,kBAAkB+N,EAAW,gCAAiC,aAE1E,IAAIlI,EAAU,CACV5D,WAAY,oBACZ8D,IAAKgI,EACL5E,OAAQA,EACRK,OAAQA,GAGZ,OAAO9H,KAAK2H,gBAAgBxD,IAUhCnE,KAAKsM,iBAAmB,SAAU7E,EAAQkC,GACtC,IAAIxF,EAAU,CACV5D,WAAY,oBACZkH,OAAQA,EACRkC,OAAQA,GAGZ,OAAO3J,KAAK2H,gBAAgBxD,IAUhCnE,KAAKuM,gBAAkB,SAAUF,EAAWG,GACxCrP,EAAYmB,kBAAkB+N,EAAW,iCAAkC,aAC3ElP,EAAYK,eAAegP,EAAqB,iCAAkC,uBAElF,IAAIrI,EAAU,CACV5D,WAAY,oBACZ8D,IAAKgI,EACL3E,OAAQ8E,EACR/D,mBAAoB,cAGxB,OAAOzI,KAAKoH,cAAcjD,IAY9BnE,KAAKyM,gBAAkB,SAAUJ,EAAWG,EAAqBE,EAAeR,GAC5E/O,EAAYmB,kBAAkB+N,EAAW,iCAAkC,aAC3ElP,EAAYK,eAAegP,EAAqB,iCAAkC,uBAClFrP,EAAYgB,mBAAmBqO,EAAoBL,WAAY,iCAAkC,kCAE7FO,GACAvP,EAAYO,qBAAqBgP,EAAe,iCAAkC,iBAGtF,IAAIvI,EAAU,CACV5D,WAAY,oBACZ8D,IAAKgI,EACL3E,OAAQ8E,EACR/D,mBAAoB,aACpBkE,sBAAuBH,EAAoBL,WAC3CD,YAAaA,EACbU,sBAAuBF,GAG3B,OAAO1M,KAAK+H,cAAc5D,IAa9BnE,KAAK6M,mBAAqB,SAAUR,EAAWK,EAAejF,EAAQkC,EAAQ7B,GAE1E3K,EAAYmB,kBAAkB+N,EAAW,oCAAqC,aAE1EK,GACAvP,EAAYO,qBAAqBgP,EAAe,oCAAqC,iBAGzF,IAAIvI,EAAU,CACV5D,WAAY,oBACZ8D,IAAKgI,EACL5D,mBAAoB,aACpBhB,OAAQA,EACRkC,OAAQA,EACR7B,OAAQA,EACR8E,sBAAuBF,GAG3B,OAAO1M,KAAK2H,gBAAgBxD,IAahCnE,KAAK8M,kBAAoB,SAAUT,EAAWU,EAAcL,EAAejF,EAAQK,GAE/E3K,EAAYmB,kBAAkB+N,EAAW,mCAAoC,aAC7ElP,EAAYmB,kBAAkByO,EAAc,mCAAoC,gBAE5EL,GACAvP,EAAYO,qBAAqBgP,EAAe,mCAAoC,iBAGxF,IAAIvI,EAAU,CACV5D,WAAY,oBACZ8D,IAAKgI,EACL5D,mBAAoB,aACpBhB,OAAQA,EACRK,OAAQA,EACR8E,sBAAuBF,EACvBC,sBAAuBI,GAG3B,OAAO/M,KAAK2H,gBAAgBxD,IAShCnE,KAAKgN,mBAAqB,SAAUC,GAEhC9P,EAAYK,eAAeyP,EAAwB,oCAAqC,0BAExF,IAAI9I,EAAU,CACV5D,WAAY,0BACZmH,OAAQuF,GAEZ,OAAOjN,KAAKoH,cAAcjD,IAW9BnE,KAAKkN,mBAAqB,SAAUD,EAAwBE,EAAkBjB,GAE1E/O,EAAYK,eAAeyP,EAAwB,oCAAqC,0BACxF9P,EAAYgB,mBAAmB8O,EAAuBd,WAAY,oCAAqC,qCAEvG,IAAIhI,EAAU,CACV5D,WAAY,0BACZ2L,YAAaA,EACb7H,IAAK4I,EAAuBd,WAC5BzE,OAAQuF,EACRxE,mBAAoB0E,GAGxB,OAAOnN,KAAK+H,cAAc5D,IAS9BnE,KAAKoN,mBAAqB,SAAUC,GAChClQ,EAAYmB,kBAAkB+O,EAAY,oCAAqC,cAE/E,IAAIlJ,EAAU,CACV5D,WAAY,0BACZ8D,IAAKgJ,GAGT,OAAOrN,KAAK0I,cAAcvE,IAW9BnE,KAAKsN,sBAAwB,SAAUH,EAAkB1F,EAAQkC,GAE7D,IAAIxF,EAAU,CACV5D,WAAY,0BACZkI,mBAAoB0E,EACpB1F,OAAQA,EACRkC,OAAQA,GAGZ,OAAO3J,KAAKgJ,wBAAwB7E,IAWxCnE,KAAKuN,qBAAuB,SAAUF,EAAYF,EAAkB1F,GAEhEtK,EAAYmB,kBAAkB+O,EAAY,sCAAuC,cAEjF,IAAIlJ,EAAU,CACV5D,WAAY,0BACZkI,mBAAoB0E,EACpB9I,IAAKgJ,EACL5F,OAAQA,GAGZ,OAAOzH,KAAK2H,gBAAgBxD,IAShCnE,KAAKwN,sBAAwB,SAAUC,GAEnCtQ,EAAYK,eAAeiQ,EAA2B,uCAAwC,6BAE9F,IAAItJ,EAAU,CACV5D,WAAY,6BACZmH,OAAQ+F,GAGZ,OAAOzN,KAAKoH,cAAcjD,IAU9BnE,KAAK0N,sBAAwB,SAAUD,EAA2BvB,GAE9D/O,EAAYK,eAAeiQ,EAA2B,uCAAwC,6BAC9FtQ,EAAYgB,mBAAmBsP,EAA0BtB,WAAY,uCAAwC,wCAE7G,IAAIhI,EAAU,CACV5D,WAAY,6BACZ2L,YAAaA,EACb7H,IAAKoJ,EAA0BtB,WAC/BzE,OAAQ+F,GAEZ,OAAOzN,KAAK+H,cAAc5D,IAS9BnE,KAAK2N,sBAAwB,SAAUC,GACnCzQ,EAAYmB,kBAAkBsP,EAAoB,uCAAwC,sBAE1F,IAAIzJ,EAAU,CACV5D,WAAY,6BACZ8D,IAAKuJ,GAGT,OAAO5N,KAAK0I,cAAcvE,IAW9BnE,KAAK6N,wBAA0B,SAAUD,EAAoBE,EAAUrG,GACnEtK,EAAYmB,kBAAkBsP,EAAoB,yCAA0C,sBAE5F,IAAIzJ,EAAU,CACV5D,WAAY,6BACZ8D,IAAKuJ,EACLnF,mBAAoBqF,EACpBrG,OAAQA,GAGZ,OAAOzH,KAAK2H,gBAAgBxD,IAUhCnE,KAAK+N,yBAA2B,SAAUD,EAAUrG,GAEhD,IAAItD,EAAU,CACV5D,WAAY,6BACZkI,mBAAoBqF,EACpBrG,OAAQA,GAGZ,OAAOzH,KAAKgJ,wBAAwB7E,IAOxCnE,KAAKgO,WAAa,WACdpH,GAAW,GAOf5G,KAAKiO,aAAe,WAIhB,OAHA9Q,EAAYgC,gBAAgByH,GAE5BA,GAAW,EACJG,EAAa,OAAQ,CAAExG,WAAY,UAAY,gBACjD8G,MAAK,SAAUzC,GACZ,OAAOA,EAASf,SAU5B7D,KAAKkO,mBAAqB,SAAU/H,GAKhC,OAJKA,IACDA,EAASC,GAGN,IAAIF,EAAeC,IAQlCD,EAAeX,UAAU4I,QAAU,CAQ/BC,kBAAmBnI,EAAQmI,mBAS/BzO,EAAOC,QAAUsG,G,kBCt5CjBvG,EAAOC,QAAU,SAAiCN,GAC9C,GAAIA,EAAY,CAKZ,IAJA,IAAI+O,EAAiB9O,OAAOC,KAAKF,GAC7BgP,EAAqB,GACrBC,EAAW,GAEN5P,EAAI,EAAGA,GAAK0P,EAAe3P,OAAQC,IAAK,CAC7C,IAAI3B,EAAgBqR,EAAe1P,EAAI,GACnCyB,EAAQd,EAAWtC,GAET,OAAVoD,IAGiB,iBAAVA,GAAuBA,EAAM2F,WAAW,0BAIzB,iBAAV3F,IACZA,EAAQoO,KAAKC,UAAUrO,IAJvBA,EAAQ,IAAMA,EAAQ,IAOtBzB,EAAI,IACJ2P,GAAsB,IACtBC,GAAY,KAGhBD,GAAsBtR,EAAgB,MAAQ2B,EAC9C4P,GAAY,KAAO5P,EAAI,IAAMyB,GAGjC,MAAO,IAAMkO,EAAqB,KAAOC,EAGzC,MAAO,O,kBChCf5O,EAAOC,QAAU,SAAiC8O,EAAaC,GAC3DD,EAAcA,GAA4B,GAC1CC,EAAoBA,GAAwC,EAG5DD,EAAcE,SAASA,SAASF,IAEhC,IAAIG,EAAO,mDAAmDzQ,KAAKsQ,GAEnE,GAAY,MAARG,EAAc,CACd,IAAI/N,EAAO7C,SAAS4Q,EAAK,IACzB,MAAO,CACHhO,OAAQgO,EAAK,GAAGhQ,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,MAAO,KAAMA,QAAQ,MAAO,UAChGiC,KAAMA,EACNC,SAAUD,EAAO,GAIrB,MAAO,CACHD,OAAQ,GACRC,KAAM6N,EACN5N,SAAU4N,EAAoB,K,kBCf1ChP,EAAOC,QAAU,SAAkCkP,GAC/C,IAAIvF,EAAS,8DAA8DnL,KAAK0Q,EAAa,cAC7F,MAAO,CAAExO,GAAIiJ,EAAO,GAAIhJ,WAAYgJ,EAAO,GAAItJ,aAAc6O,EAAa,qB,qBCf9E,gBAIIC,EAJJ,EAAc,EAAQ,KAClBC,EAAmB,EAAQ,KAC3BC,EAAiB,EAAQ,KAW7B,SAASC,EAAmBC,GACxB,IAAIC,EAAcxN,EAAQsB,iBAE1B,IAAKtB,EAAQJ,OAAO4N,IAAwD,mBAAjCA,EAAYC,iBACnD,OAAOD,EAAYC,iBAAiBF,IAAeA,EAGvD,IAAIG,EAAiB,KAErB,IAAK1N,EAAQJ,OAAOuN,KAChBO,EAAiBP,EAAaI,GAC1BvN,EAAQJ,OAAO8N,IACf,IAAK,IAAIjL,KAAO0K,EACZ,GAAIA,EAAa1K,KAAS8K,EACtB,OAAOA,EAMvB,OAAOG,EAGX,SAASC,EAAmBzL,GAMxB,OALAA,EAA0B,OAAI,mBAC9BA,EAAkB,oBAAsB,MACxCA,EAAkB,iBAAmB,MACrCA,EAAkB,gBAAkB,kCAE7BA,EA4DX,IAAI0L,EAAyB,GACzBC,EAAsB,GAgB1B,SAASC,EAAY/L,EAAQgM,EAAMxJ,EAAQtC,EAAMC,EAAmBC,EAAgBC,EAAiBC,EAAe/E,EAASgF,GAEzHJ,EAAoBA,GAAqB,GACzCC,EAAiBA,GAAkB,GAGnC0L,EAAoBG,KAAK7L,GAGzB,IAAI8L,EAnFR,SAAuBhM,EAAMsC,GACzB,IAAI0J,EAqDJ,OApDIhM,IA+CAgM,GA9CAA,EAAkBrB,KAAKC,UAAU5K,GAAM,SAAUQ,EAAKjE,GAElD,GAAIiE,EAAImB,SAAS,gBAAkBnB,EAAImB,SAAS,cAC5C,GAAqB,iBAAVpF,IAAuBA,EAAM2F,WAAW,KAAM,CAMrD,GAJI,oBAAoBkC,KAAK7H,KACzBA,EAAQA,EAAMvB,QAAQ,0BAA2B,WAGjDsH,EAAOW,eAAgB,CAEvB,IAAIgJ,EAAoB,0BACpBC,EAAaD,EAAkB1R,KAAKgC,GACxC,GAAI2P,EAAWrR,OAAS,EAAG,CACvB,IAAI4Q,EAAiBJ,EAAmBa,EAAW,IAE9CnO,EAAQJ,OAAO8N,KAChBlP,EAAQA,EAAMvB,QAAQiR,EAAmBR,EAAiB,QAKjElP,EAAM2F,WAAWI,EAAOG,aAErBjC,EAAImB,SAAS,eACRpF,EAAM2F,WAAW,OAClB3F,EAAQ,IAAMA,GAIlBA,EAAQ+F,EAAOG,UAAYlG,EAAMvB,QAAQ,MAAO,WAMxDwF,EAAI0B,WAAW,UACf1B,EAAImB,SAAS,eACbnB,EAAImB,SAAS,wBACbnB,EAAImB,SAAS,mBACbpF,OAAQ4P,GAGhB,OAAO5P,MAGuBvB,QAAQ,oBAAoB,SAAUoR,GACpE,MAAO,OAAS,OAASA,EAAIC,WAAW,GAAGjN,SAAS,KAAK+C,QAAQ,OAIlE6J,EA6BeM,CAActM,EAAMsC,GAE1C,GAAIjH,EACAsQ,EAAuBI,KAAK,CACxBjM,OAAQA,EAAQgM,KAAMA,EAAMxJ,OAAQA,EAAQtC,KAAMgM,EAAiB/K,QAAShB,QAFpF,CAOA,GAAa,WAAT6L,EAAmB,CACnB,IAAIS,EAAcnB,EAAeoB,eAAeb,GAEhDK,EAAkBO,EAAYE,KAG9Bd,EAAuB9Q,OAAS,GAEhCoF,EAAoByL,EAAmBzL,IACrB,gBAAkB,4BAA8BsM,EAAYG,cAG9EzM,EAAoByL,EAAmBzL,GAM3C,GAHAC,EAAeyM,kBAAmB,EAG9Bb,EAAKjR,OAAS,IAAM,CACpB,IAAI+R,EAAgB,aAAe7O,EAAQU,eAEvCoO,EAAY,GAMhB,IAAK,IAAIrM,KALTqM,EAAUd,KAAK,KAAOa,GACtBC,EAAUd,KAAK,kCACfc,EAAUd,KAAK,uCACfc,EAAUd,KAAKjM,EAAS,IAAMwC,EAAOG,UAAYqJ,EAAO,aAExC7L,EACA,kBAARO,IAGJqM,EAAUd,KAAKvL,EAAM,KAAOP,EAAkBO,WAGvCP,EAAkBO,IAG7BqM,EAAUd,KAAK,OAASa,EAAgB,MAExCZ,EAAkBa,EAAU5R,KAAK,OAEjCgF,EAAoByL,EAAmBzL,IACrB,gBAAkB,4BAA8B2M,EAClEd,EAAO,SACPhM,EAAS,OAETI,EAAeyM,kBAAmB,EAOtC,IAAIG,EAJAxK,EAAOI,cAAgBzC,EAAiC,gBACxDA,EAAiC,cAAIqC,EAAOI,aAKlB,oBAAnBnC,eAEPuM,EAAiB,EAAQ,UAGD,IAAZC,IACZD,EAAiB,EAAQ,MAI7B,IAAIE,EAAsB,SAAUC,GAC5BA,IACKhN,IACDA,EAAoB,IAExBA,EAAiC,cAAI,WAChCgN,EAAMC,eAAe,eAClBD,EAAME,YACNF,IAGZH,EAAe,CACXhN,OAAQA,EACRC,IAAKuC,EAAOG,UAAYqJ,EACxB9L,KAAMgM,EACN/L,kBAAmBA,EACnBC,eAAgB0L,EAChBzL,gBAAiBA,EACjBC,cAAeA,EACfC,QAASA,EACTgB,QAASiB,EAAOjB,WAKpBiB,EAAOK,kBAAoB1C,GAAsBA,IAAsBA,EAAiC,eACxGqC,EAAOK,eAAeqK,GAGtBA,KAkDR,SAASI,EAAmB9B,EAAYhJ,EAAQnC,EAAiBC,GAE7D,GAVJ,SAAgCkL,GAK5B,MAJiB,CACb,oBAAqB,YAAa,0BAClC,6BAA8B,8BAEhB+B,QAAQ/B,IAAe,EAKrCgC,CAAuBhC,IAAevN,EAAQJ,OAAO2N,GACrDnL,EAAgBmL,QAMpB,GAFAA,EAAaA,EAAWiC,cAEnBjL,EAAOW,eAKZ,IACI,IAAIwI,EAAiBJ,EAAmBC,GAEpCvN,EAAQJ,OAAO8N,GA/D3B,SAAyBH,EAAYhJ,EAAQnC,EAAiBC,GAE1D,IAAIoN,EAAazP,EAAQwB,gBAGzB,GAAKxB,EAAQJ,OAAO6P,IAAuD,mBAAjCA,EAAWC,kBAQhD,CAED,IAaInN,EAAU6K,EAAiBuC,eAAe,CAC1ChR,WAAY,oBACZkH,OAAQ,CAAC,gBAAiB,eAC1B+J,SAAS,GACV,mBAAoBrL,GAEvBuJ,EAAY,MAAOvL,EAAQ+E,IAAK/C,EAAQ,KAAMhC,EAAQW,QAAS,MAnBjD,SAAUyE,GACpBwF,EAAe,GACf,IAAK,IAAIpQ,EAAI,EAAGA,EAAI4K,EAAO1F,KAAKzD,MAAM1B,OAAQC,IAC1CoQ,EAAaxF,EAAO1F,KAAKzD,MAAMzB,GAAG8S,aAAelI,EAAO1F,KAAKzD,MAAMzB,GAAG+S,cAG1E1N,EAAgBkL,EAAmBC,OAG1B,SAAU9Q,GACnB4F,EAAc,CAAE1G,QAAS,6CAA+Cc,EAAMd,aASI,EAAO4G,EAAQwN,YA5BrGN,EAAWC,kBAAkBnC,EAAY,IAAI9H,MAAK,SAAUzC,GAIpDZ,EAHCY,EAGeA,EAAS8M,cAFTvC,KAGrBlL,GAqDC2N,CAAgBzC,EAAYhJ,EAAQnC,EAAiBC,GAGrDD,EAAgBsL,GAGxB,MAAOjR,GACH4F,EAAc,CAAE1G,QAAS,4CAA8Cc,EAAMd,eAf7EyG,EAAgBmL,GA4BxBxP,EAAOC,QAAU,CACb8P,YAAaA,EACbvI,YAXJ,SAAqBxD,EAAQQ,EAASpH,EAAcoJ,EAAQpC,EAAgBkD,EAASC,GAMjF+J,EAAmB9M,EAAQ5D,WAAY4F,GALjB,SAAUmJ,GAC5BnL,EAAQ5D,WAAa+O,EACrB,IAAI/F,EAASyF,EAAiBuC,eAAepN,EAASpH,EAAcoJ,GACpEuJ,EAAY/L,EAAQ4F,EAAOL,IAAK/C,EAAQhC,EAAQN,MAAQM,EAAQuD,OAAQ6B,EAAOzE,QAASf,EAAgBkD,EAASC,EAAQ/C,EAAQjF,QAASqK,EAAOoI,SAErFzK,IAMhEkH,kBAAmBc,EAEnB2C,kBAAmB,WAAc9C,EAAe,S,uCCpU1C,EAAQ,KAAlB,IACI5R,EAAc,EAAQ,KACtB2U,EAAoB,EAAQ,KA0BhC,SAASC,EAAsB5N,EAASpH,EAAcmM,EAAK8I,EAAY7L,GACnE,IAAIrB,EAAU,GACVmN,EAAe,GAGnB,GAFAD,EAA2B,MAAdA,EAAqBA,EAAa,IAE3C7N,EAAS,CACT,GAAIA,EAAQsE,mBAAoB,CAI5B,GAHAtL,EAAYO,qBAAqByG,EAAQsE,mBAAoB,kBAAoB1L,EAAc,8BAC/FmM,GAAO,IAAM/E,EAAQsE,mBAEjBtE,EAAQwI,sBAERzD,GAAO,IADa/L,EAAYmB,kBAAkB6F,EAAQwI,sBAAuB,kBAAoB5P,EAAc,iCACtF,IAGE,eAA/BoH,EAAQsE,oBACJtE,EAAQyI,wBACRzP,EAAYO,qBAAqByG,EAAQyI,sBAAuB,kBAAoB7P,EAAc,iCAClGmM,GAAO,IAAM/E,EAAQyI,uBA4BjC,GAvBsB,MAAlBzI,EAAQsD,QAAkBtD,EAAQsD,OAAO/I,SACzCvB,EAAYQ,oBAAoBwG,EAAQsD,OAAQ,kBAAoB1K,EAAc,kBAE9D,YAAhBA,GAAuD,GAAzBoH,EAAQsD,OAAO/I,QAAeyF,EAAQsD,OAAO,GAAGjC,SAAS,SACvF0D,GAAO,IAAM/E,EAAQsD,OAAO,IAGxBtD,EAAQsD,OAAO,GAAG1B,WAAW,MAAwB,YAAhBhJ,IACH,MAA9BoH,EAAQsE,mBACRS,GAAO/E,EAAQsD,OAAOyK,QAGtB/N,EAAQsD,OAAOyK,SAKnB/N,EAAQsD,OAAO/I,QACfuT,EAAarC,KAAK,WAAazL,EAAQsD,OAAO3I,KAAK,QAK3DqF,EAAQwF,OAAQ,CAChBxM,EAAYO,qBAAqByG,EAAQwF,OAAQ,kBAAoB5M,EAAc,kBAKnF,IAJA,IAAIoV,EAA4B,mEAC5BC,EAAejO,EAAQwF,OAGmC,QAAtD0I,EAAIF,EAA0B/T,KAAKgU,KAAyB,CAC5DC,EAAEC,QAAUH,EAA0BtM,WACtC0M,MAAM1M,YAGV,IAAI2M,EAAcH,EAAE,GAAG7M,SAAS,KAAO,IAAM,IAC7C4M,EAAeA,EAAavT,QAAQwT,EAAE,GAAI,IAAMA,EAAE,GAAKG,GAG3DP,EAAarC,KAAK,WAAa6C,mBAAmBL,IAGlDjO,EAAQuO,YACRT,EAAarC,KAAK,cAAgBzS,EAAYgB,mBAAmBgG,EAAQuO,WAAY,kBAAoB3V,EAAc,uBAGvHoH,EAAQwO,WACRV,EAAarC,KAAK,aAAezS,EAAYgB,mBAAmBgG,EAAQwO,UAAW,kBAAoB5V,EAAc,sBAGrHoH,EAAQuF,QACRvM,EAAYe,mBAAmBiG,EAAQuF,MAAO,kBAAoB3M,EAAc,iBAChFkV,EAAarC,KAAK,UAAYzL,EAAQuF,QAGtCvF,EAAQyO,KAAOzO,EAAQyO,IAAM,IAC7BzV,EAAYY,qBAAqBoG,EAAQyO,IAAK,kBAAoB7V,EAAc,eAChFkV,EAAarC,KAAK,QAAUzL,EAAQyO,MAGjB,MAAnBzO,EAAQ0O,SAAmB1O,EAAQ0O,QAAQnU,SAC3CvB,EAAYQ,oBAAoBwG,EAAQ0O,QAAS,kBAAoB9V,EAAc,mBACnFkV,EAAarC,KAAK,YAAczL,EAAQ0O,QAAQ/T,KAAK,OAGzD,IAAI0I,EAASsK,EAAkB3N,EAASpH,EAAcoJ,GAMtD,GAJIqB,EAAO9I,SACPoG,EAAgB,OAAI0C,GAGD,MAAnBrD,EAAQ6D,SAA0C,MAAvB7D,EAAQ2E,YACnC,MAAM,IAAI5L,MAAM,kBAAoBH,EAAe,yGAyDvD,GAtDIoH,EAAQ6D,UACR7K,EAAYO,qBAAqByG,EAAQ6D,QAAS,kBAAoBjL,EAAc,mBACpF+H,EAAQ,YAAcX,EAAQ6D,SAG9B7D,EAAQ2E,cACR3L,EAAYO,qBAAqByG,EAAQ2E,YAAa,kBAAoB/L,EAAc,uBACxF+H,EAAQ,iBAAmBX,EAAQ2E,aAGnC3E,EAAQoC,cACRpJ,EAAYO,qBAAqByG,EAAQoC,YAAa,kBAAoBxJ,EAAc,uBACxF+H,EAAuB,cAAI3H,EAAYgB,mBAAmBgG,EAAQoC,YAAa,kBAAoBxJ,EAAc,wBAGjHoH,EAAQ2M,QACR3T,EAAYO,qBAAqByG,EAAQ2M,MAAO,kBAAoB/T,EAAc,iBAClF+H,EAAuB,cAAI,UAAYX,EAAQ2M,OAG/C3M,EAAQ2O,qBACR3V,EAAYe,mBAAmBiG,EAAQ2O,mBAAoB,kBAAoB/V,EAAc,8BAC7F+H,EAAQ,oCAAsC,SAG9CX,EAAQuD,QACRvK,EAAYK,eAAe2G,EAAQuD,OAAQ,kBAAoB3K,EAAc,kBAG7EoH,EAAQN,MACR1G,EAAYK,eAAe2G,EAAQN,KAAM,kBAAoB9G,EAAc,gBAG3EoH,EAAQqN,UACRrU,EAAYe,mBAAmBiG,EAAQqN,QAAS,kBAAoBzU,EAAc,mBAClF+H,EAAQ,iBAAmB,YAG3BX,EAAQ+H,cACR/O,EAAYe,mBAAmBiG,EAAQ+H,YAAa,kBAAoBnP,EAAc,uBACtF+H,EAAQ,qBAAuB,QAG/BX,EAAQ4O,YACR5V,EAAYO,qBAAqByG,EAAQ4O,UAAW,kBAAoBhW,EAAc,qBACjFoH,EAAQ4O,UAAUhN,WAAW,OAC9BjB,EAAQ,cAAgBX,EAAQ4O,YAIpC5O,EAAQjF,SACR/B,EAAYe,mBAAmBiG,EAAQjF,QAAS,kBAAoBnC,EAAc,mBAGlFoH,EAAQ2D,QAAU3D,EAAQ2D,OAAOpJ,OAEjC,GADAvB,EAAYW,4BAA4BqG,EAAQ2D,OAAQ,kBAAoB/K,EAAc,kBAC5D,iBAAnBoH,EAAQ2D,OACfmK,EAAarC,KAAK,WAAazL,EAAQ2D,YAEtC,CAED,IADA,IAAIkL,EAAqB,GAChBrU,EAAI,EAAGA,EAAIwF,EAAQ2D,OAAOpJ,OAAQC,IACvC,GAAIwF,EAAQ2D,OAAOnJ,GAAGsU,SAAU,CAC5B,IACIC,EADkBnB,EAAsB5N,EAAQ2D,OAAOnJ,GAAI5B,EAAe,WAAY,KAAM,KAC9DoW,MAC9BD,GAAeA,EAAYxU,SAC3BwU,EAAc,IAAMA,EAAc,KAEtCF,EAAmBpD,KAAKzL,EAAQ2D,OAAOnJ,GAAGsU,SAAWC,GAGzDF,EAAmBtU,QACnBuT,EAAarC,KAAK,WAAaoD,EAAmBlU,KAAK,OAMvE,MAAO,CAAEoK,IAAKA,EAAKiK,MAAOlB,EAAanT,KAAKkT,GAAalN,QAASA,GA4EtE,IAAIkK,EAAmB,CACnB+C,sBAAuBA,EACvBR,eAnEJ,SAAwBpN,EAASpH,EAAcoJ,GAC3C,IACIoD,EADAL,EAAM,GA6DV,OA3DK/E,EAAQ+E,KA8CT/L,EAAYO,qBAAqByG,EAAQ+E,IAAK,kBAAoBnM,EAAc,eAChFmM,EAAM/E,EAAQ+E,IAAIrK,QAAQsH,EAAOG,UAAW,IAC5CiD,EAASwI,EAAsB5N,EAASpH,EAAcmM,EAAK,IAAK/C,KA/C3DhC,EAAQsH,iBAAoBtH,EAAQ5D,YACrCpD,EAAYK,eAAe2G,EAAQ5D,WAAY,kBAAoBxD,EAAc,sBAEjFoH,EAAQ5D,aACRpD,EAAYO,qBAAqByG,EAAQ5D,WAAY,kBAAoBxD,EAAc,sBACvFmM,EAAM/E,EAAQ5D,WAEV4D,EAAQ4O,YACR5V,EAAYO,qBAAqByG,EAAQ4O,UAAW,kBAAoBhW,EAAc,qBAClFoH,EAAQ4O,UAAUhN,WAAW,OAC7BmD,EAAM/E,EAAQ4O,UAAY,IAAM7J,IAKpC/E,EAAQE,IACRF,EAAQE,IAAMlH,EAAYmB,kBAAkB6F,EAAQE,IAAK,kBAAoBtH,EAAc,eAEtFoH,EAAQ7D,KACb6D,EAAQE,IAAMlH,EAAYgB,mBAAmBgG,EAAQ7D,GAAI,kBAAoBvD,EAAc,eAG3FoH,EAAQE,MACR6E,GAAO,IAAM/E,EAAQE,IAAM,MAI/BF,EAAQ6G,iBACJ9B,IACAA,GAAO,KAEXA,GAAO/E,EAAQ6G,gBAGnBzB,EAASwI,EAAsB5N,EAASpH,EAAcmM,EAAK,IAAK/C,GAC5DhC,EAAQ8F,UACR9M,EAAYO,qBAAqByG,EAAQ8F,SAAU,kBAAoBlN,EAAc,oBACrFwM,EAAOL,KAAO,aAAeuJ,mBAAmBtO,EAAQ8F,WAGpDV,EAAO4J,QACP5J,EAAOL,KAAO,IAAMK,EAAO4J,QASnChP,EAAQ4M,eAAe,UAA6B,MAAjB5M,EAAQwN,OAC3CxU,EAAYe,mBAAmBiG,EAAQwN,MAAO,kBAAoB5U,EAAc,iBAChFwM,EAAOoI,MAAQxN,EAAQwN,OAGvBpI,EAAOoI,OAAQ,EAGZ,CAAEzI,IAAKK,EAAOL,IAAKpE,QAASyE,EAAOzE,QAAS6M,MAAOpI,EAAOoI,SAQrEhS,EAAOC,QAAUoP,G,oBC5RjB,IAAInP,EAAM,EAAQ,KACd1C,EAAc,EAAQ,KAS1BwC,EAAOC,QAAU,SAA2BuE,EAASpH,EAAcoJ,GAC/D,IAKIqB,EALAb,EAAuBxC,EAAQwC,qBAC/BF,EAAqBtC,EAAQsC,mBAC7BC,EAAcvC,EAAQuC,YACtB0M,EAAejP,EAAQiP,aAI3B,GAAIjP,EAAQqD,QAAUrD,EAAQqD,OAAO9I,OAMjC,IAAK,IAAIC,KALTxB,EAAYW,4BAA4BqG,EAAQqD,OAAQ,kBAAoBzK,EAAc,kBAEpE,iBADtByK,EAASrD,EAAQqD,UAEbA,EAASA,EAAO/I,MAAM,MAEZ+I,EAAQ,CAClB,IAAI6L,EAAO7L,EAAO7I,GAAGC,OACjByU,IAASxT,EAAImB,OAAOC,qBACpB0F,GAAuB,EAElB0M,EAAKnC,QAAQ,+BAAiC,EACnDzK,EAAqB4M,EAAKxU,QAAQ,6BAA8B,IAAIA,QAAQ,KAAM,IAE7EwU,EAAKtN,WAAW,sBACrBW,EAAc2M,EAAKxU,QAAQ,qBAAsB,IAAIA,QAAQ,KAAM,IAE9DwU,EAAKnC,QAAQ,wBAA0B,IAC5CkC,GAAe,GAmC3B,OA9BA5L,EAAS,GAELrB,IAC4B,MAAxBQ,IACAA,EAAuBR,EAAOQ,sBAElCF,EAAqBA,GAA0CN,EAAOM,mBACtEC,EAAcA,GAA4BP,EAAOO,aAGjDC,IACAxJ,EAAYe,mBAAmByI,EAAsB,kBAAoB5J,EAAc,gCACvFyK,EAAOoI,KAAK/P,EAAImB,OAAOC,uBAGvBwF,IACAtJ,EAAYO,qBAAqB+I,EAAoB,kBAAoB1J,EAAc,8BACvFyK,EAAOoI,KAAK,8BAAgCnJ,EAAqB,MAGjEC,GAAeA,EAAc,IAC7BvJ,EAAYY,qBAAqB2I,EAAa,kBAAoB3J,EAAc,uBAChFyK,EAAOoI,KAAK,qBAAuBlJ,IAGnC0M,IACAjW,EAAYe,mBAAmBkV,EAAc,kBAAoBrW,EAAc,wBAC/EyK,EAAOoI,KAAK,wBAGTpI,EAAO1I,KAAK,O,oBCvEvB,IAAI8C,EAAU,EAAQ,KAqFlBqN,EAAiB,CACjBoB,eA/EiB,SAAUiD,GAO3B,IANA,IAAI7C,EAAgB,aAAe7O,EAAQU,eAEvCoO,EAAY,GACZ6C,EAAmB,KACnBR,EAAY,IAEPpU,EAAI,EAAGA,EAAI2U,EAAS5U,OAAQC,IAAK,CACtC,IAAIwF,EAAUmP,EAAS3U,GACnB6U,EAA2B,QAAnBrP,EAAQR,OA0BpB,GAxBI6P,GAASD,IAET7C,EAAUd,KAAK,OAAS2D,EAAmB,MAE3CA,EAAmB,KACnBR,EAAY,KAGXQ,IACD7C,EAAUd,KAAK,OAASa,GAEnB+C,IACDD,EAAmB,aAAe3R,EAAQU,eAC1CoO,EAAUd,KAAK,0CAA4C2D,KAI9DC,GACD9C,EAAUd,KAAK,OAAS2D,GAG5B7C,EAAUd,KAAK,kCACfc,EAAUd,KAAK,sCAEV4D,EAAO,CACR,IAAIC,EAAiBtP,EAAQW,QAAQiM,eAAe,cAC9C5M,EAAQW,QAAQ,gBACdiO,EAERrC,EAAUd,KAAK,eAAiB6D,GAiBpC,IAAK,IAAIpP,KAdJF,EAAQwL,KAAK5J,WAAW,KAIzB2K,EAAUd,KAAK,KAAOzL,EAAQR,OAAS,IAAMQ,EAAQwL,KAAO,aAH5De,EAAUd,KAAK,KAAOzL,EAAQR,OAAS,IAAMQ,EAAQgC,OAAOG,UAAYnC,EAAQwL,KAAO,aAMvF6D,EACA9C,EAAUd,KAAK,4BAGfc,EAAUd,KAAK,kCAGHzL,EAAQW,QACR,kBAART,GAAmC,eAARA,GAG/BqM,EAAUd,KAAKvL,EAAM,KAAOF,EAAQW,QAAQT,KAG3CmP,GAASrP,EAAQN,MAAQM,EAAQN,KAAKnF,QACvCgS,EAAUd,KAAK,KAAOzL,EAAQN,MAUtC,OANI0P,GACA7C,EAAUd,KAAK,OAAS2D,EAAmB,MAG/C7C,EAAUd,KAAK,OAASa,EAAgB,MAEjC,CAAEF,SAAUE,EAAeH,KAAMI,EAAU5R,KAAK,SAO3Da,EAAOC,QAAUqP,G,oBCzFjB,IAAIpP,EAAM,EAAQ,KACd+B,EAAU,EAAQ,KAClBzE,EAAc,EAAQ,KACtBuW,EAAc,EAAQ,KAO1B,SAASC,EAAqBC,EAASxT,GACnC,IAAIyT,EAAS,KACb,IAA8B,IAA1BD,EAAQ1C,QAAQ,KAAa,CAC7B,IAAI4C,EAASF,EAAQnV,MAAM,KAC3B,OAAQqV,EAAO,IACX,IAAK,gBACDD,EAAS,eACT,MACJ,IAAK,cACDA,EAAS,aACTzT,EAAiB,MAATA,EACFnC,SAASmC,GACT,EACN,MACJ,IAAK,iBACDyT,EAAS,gBACT,MACJ,IAAK,kBACDA,EAAS,iBACT,MACJ,KAAKhU,EAAImB,OAAOE,YAAYI,eACxBuS,EAASC,EAAO,GAAK,aACrB,MACJ,KAAKjU,EAAImB,OAAOE,YAAYC,6BACxB0S,EAASC,EAAO,GAAK,sBACrB,MACJ,KAAKjU,EAAImB,OAAOE,YAAYE,kBACxByS,EAASC,EAAO,GAAK,gBAKjC,MAAO,CAACD,EAAQzT,GASpB,SAAS2T,EAAUxM,EAAQyM,GACvB,GAAIA,EAAa,CACb,GAAIA,EAAYpM,OAAgC,MAAvBL,EAAO,aAC5B,OAAO3F,EAAQS,yBAAyBkF,GAG5C,GAAIyM,EAAYpK,QACZ,OAAO+J,EAAqB,eAAgBpM,EAAO,iBAAiB,IAAM,EAMlF,IAFA,IAAI/H,EAAOD,OAAOC,KAAK+H,GAEd5I,EAAI,EAAGA,EAAIa,EAAKd,OAAQC,IAAK,CAClC,IAAIsV,EAAazU,EAAKb,GAEtB,GAA0B,MAAtB4I,EAAO0M,IAAuB1M,EAAO0M,GAAYrW,cAAgBC,MACjE,IAAK,IAAIqW,EAAI,EAAGA,EAAI3M,EAAO0M,GAAYvV,OAAQwV,IAC3C3M,EAAO0M,GAAYC,GAAKH,EAAUxM,EAAO0M,GAAYC,IAK7D,IAAIC,EAAoBR,EAAqBM,EAAY1M,EAAO0M,IAMhE,GALIE,EAAkB,KAClB5M,EAAO4M,EAAkB,IAAMA,EAAkB,KAId,IAAnCF,EAAW/C,QAAQ,WAAmB,CACtC,IAAIkD,EAAYH,EAAWxV,MAAM,WAEjC,GAAK8I,EAAOwJ,eAAeqD,EAAU,KAIhC,GAC+B,iBAAzB7M,EAAO6M,EAAU,KACQ,iBAAzB7M,EAAO6M,EAAU,MAAqB7M,EAAO6M,EAAU,IAAIrD,eAAe,YACjF,MAAM,IAAI7T,MAAM,4DANhBqK,EAAO6M,EAAU,IAAM,CAAEC,SAAU,SASvC9M,EAAO6M,EAAU,IAAIA,EAAU,IAAM7M,EAAO0M,IAG5CE,EAAoBR,EAAqBS,EAAU,GAAI7M,EAAO0M,KACxC,KAClB1M,EAAO6M,EAAU,IAAID,EAAkB,IAAMA,EAAkB,KAW3E,OANIH,GACIA,EAAYjD,eAAe,eAA8E,MAA7DxJ,EAAO,IAAM1H,EAAImB,OAAOE,YAAYK,wBAChFgG,EAAO3G,WAAagB,EAAQQ,wBAAwBmF,EAAO,IAAM1H,EAAImB,OAAOE,YAAYK,sBAAuByS,EAAY9J,aAI5H3C,EAvGNjC,OAAOC,UAAUC,UAAaF,OAAOC,UAAUQ,YAChD,EAAQ,KAqMZpG,EAAOC,QAAU,SAAuBgF,EAAUF,EAAiBsP,GAC/D,IAAIM,OAActE,EAClB,GAAIpL,EAASlG,OACT,GAAIkG,EAASsM,QAAQ,qBAAuB,EAAG,CAC3C,IAAIqD,EAxFhB,SAASC,EAAmB5P,EAAUoP,EAAaS,GAG/C,IAAIC,EAAY9P,EAASoB,OAAO,EAAGpB,EAASsM,QAAQ,SAChDyD,EAAqB/P,EAASnG,MAAMiW,GAExCC,EAAmBzC,QAEnByC,EAAmBC,MAEnBH,EAAgBA,GAAiB,EAGjC,IADA,IAAIlL,EAAS,GACJ5K,EAAI,EAAGA,EAAIgW,EAAmBjW,OAAQC,IAAK,CAChD,IAAIkW,EAAgBF,EAAmBhW,GACvC,GAAIkW,EAAc3D,QAAQ,yBAA2B,EAAG,CAEpD,IAAI4D,GADJD,EAAgBA,EAAcjW,QAEzBsD,UAAU2S,EAAc3D,QAAQ,QAAU,GAAGtS,OAElD2K,EAASA,EAAOF,OAAOmL,EAAmBM,EAAgBd,EAAaS,QAEtE,CAED,IAAIM,EAAgB,4CAA4C3W,KAAKyW,GACjEG,EAAa/W,SAAS8W,EAAc,IACpCE,EAAoBF,EAAc,GAAGnW,OAErCkQ,EAAe+F,EAAc3S,UAAU2S,EAAc3D,QAAQ,KAAM2D,EAAc/O,YAAY,KAAO,GAExG,GAAKgJ,EAyBA,CACD,IAAIoG,EAAiBnB,EAAUvF,KAAK2G,MAAMrG,EAAc4E,GAAcM,EAAYS,IAE9EO,GAAc,IACdzL,EAAOqG,KAAKzS,EAAYiC,gBAAgB8V,EAAgB,CACpD5X,OAAQ0X,EACR/P,WAAYgQ,EACZG,cAAeH,KAInB1L,EAAOqG,KAAKsF,QAnChB,GAAI,6BAA6BjN,KAAK4M,GAAgB,CAClD,IAAIQ,EAAkB,SAASjX,KAAKyW,EAAcjW,QAC9C0W,EAAeD,GAAmBA,EAAgB3W,OAAS2W,EAAgB,QAAKrF,EAGpFzG,EAAOqG,KAAK5R,MAAMsX,GAAgBA,EAAerX,SAASqX,SAG1D,GAAItB,EAAYtV,QAAUsV,EAAYS,IAAkBT,EAAYS,GAAe1D,eAAe,gBAC9FxH,EAAOqG,KAAKoE,EAAYS,GAAevM,kBAEtC,CACD,IAAIqN,EAAY,oBAAoBnX,KAAKyW,GAEzC,GAAIU,GAAaA,EAAU7W,OAAQ,CAC/B,IAAI8W,EAAa,wDAAwDpX,KAAKmX,EAAU,IAExFhM,EAAOqG,KAAK4F,EAAaA,EAAW,QAAKxF,QAGzCzG,EAAOqG,UAAKI,IAoBhCyE,IAGJ,OAAOlL,EAcaiL,CAAmB5P,EAAUoP,GAEzCM,EAAqC,IAAvBN,EAAYtV,QAAgBsV,EAAY,GAAGxD,iBACnD+D,EAAM,GACNA,OAGND,EAAcP,EAAUvF,KAAK2G,MAAMvQ,EAAU8O,GAAcM,EAAY,SAI3E,GAAIA,EAAYtV,QAAUsV,EAAY,GAAGjD,eAAe,gBACpDuD,EAAcN,EAAY,GAAG9L,kBAG7B,GAAIxD,EAAgB,mBAAqBA,EAAgB,kBAAmB,CACxE,IAAI6Q,EAAY7Q,EAAgB,kBAC1BA,EAAgB,kBAChBA,EAAgB,kBAElB8Q,EAAa,wDAAwDpX,KAAKmX,GAE1EC,IACAlB,EAAckB,EAAW,IAOzC,OAFAxB,EAAYtV,OAAS,EAEd4V,I,kBC9OX3U,EAAOC,QAAU,SAAqByE,EAAKjE,GAUvC,IAAIqV,EACJ,MAAqB,iBAAVrV,IACPqV,EAAI,yEAAyErX,KAAKgC,IAEvE,IAAIoC,KAAKA,KAAKkT,KAAKD,EAAE,IAAKA,EAAE,GAAK,GAAIA,EAAE,IAAKA,EAAE,IAAKA,EAAE,IAAKA,EAAE,KAGpErV,I,kBCjBXT,EAAOC,QAAU,SAA8B+V,GAC3C,IAAI7Q,EAAU,GACd,IAAK6Q,EACD,OAAO7Q,EAGX,IADA,IAAI8Q,EAAcD,EAAUlX,MAAM,QACzBE,EAAI,EAAGkX,EAAOD,EAAYlX,OAAQC,EAAIkX,EAAMlX,IAAK,CACtD,IAAImX,EAAaF,EAAYjX,GACzB2T,EAAQwD,EAAW5E,QAAQ,MAC3BoB,EAAQ,IACRxN,EAAQgR,EAAW5T,UAAU,EAAGoQ,IAAUwD,EAAW5T,UAAUoQ,EAAQ,IAG/E,OAAOxN,I,kBCbXjH,MAAM4F,QAAU,SAAUsS,GACtB,MAA+C,mBAAxCxW,OAAOgG,UAAUtC,SAAS9C,KAAK4V","file":"0.494227810635ff5009af.hot-update.js","sourcesContent":["function throwParameterError(functionName, parameterName, type) {\r\n    throw new Error(type\r\n        ? functionName + \" requires the \" + parameterName + \" parameter to be of type \" + type\r\n        : functionName + \" requires the \" + parameterName + \" parameter.\");\r\n};\r\n\r\nvar ErrorHelper = {\r\n    handleErrorResponse: function (req) {\r\n        ///<summary>\r\n        /// Private function return an Error object to the errorCallback\r\n        ///</summary>\r\n        ///<param name=\"req\" type=\"XMLHttpRequest\">\r\n        /// The XMLHttpRequest response that returned an error.\r\n        ///</param>\r\n        ///<returns>Error</returns>\r\n        throw new Error(\"Error: \" +\r\n            req.status + \": \" +\r\n            req.message);\r\n    },\r\n\r\n    parameterCheck: function (parameter, functionName, parameterName, type) {\r\n        ///<summary>\r\n        /// Private function used to check whether required parameters are null or undefined\r\n        ///</summary>\r\n        ///<param name=\"parameter\" type=\"Object\">\r\n        /// The parameter to check;\r\n        ///</param>\r\n        ///<param name=\"message\" type=\"String\">\r\n        /// The error message text to include when the error is thrown.\r\n        ///</param>\r\n        if ((typeof parameter === \"undefined\") || parameter === null || parameter == \"\") {\r\n            throwParameterError(functionName, parameterName, type);\r\n        }\r\n    },\r\n\r\n    stringParameterCheck: function (parameter, functionName, parameterName) {\r\n        ///<summary>\r\n        /// Private function used to check whether required parameters are null or undefined\r\n        ///</summary>\r\n        ///<param name=\"parameter\" type=\"String\">\r\n        /// The string parameter to check;\r\n        ///</param>\r\n        ///<param name=\"message\" type=\"String\">\r\n        /// The error message text to include when the error is thrown.\r\n        ///</param>\r\n        if (typeof parameter != \"string\") {\r\n            throwParameterError(functionName, parameterName, \"String\");\r\n        }\r\n    },\r\n\r\n    arrayParameterCheck: function (parameter, functionName, parameterName) {\r\n        ///<summary>\r\n        /// Private function used to check whether required parameters are null or undefined\r\n        ///</summary>\r\n        ///<param name=\"parameter\" type=\"String\">\r\n        /// The string parameter to check;\r\n        ///</param>\r\n        ///<param name=\"message\" type=\"String\">\r\n        /// The error message text to include when the error is thrown.\r\n        ///</param>\r\n        if (parameter.constructor !== Array) {\r\n            throwParameterError(functionName, parameterName, \"Array\");\r\n        }\r\n    },\r\n\r\n    stringOrArrayParameterCheck: function (parameter, functionName, parameterName) {\r\n        if (parameter.constructor !== Array && typeof parameter != \"string\") {\r\n            throwParameterError(functionName, parameterName, \"String or Array\");\r\n        }\r\n    },\r\n\r\n    numberParameterCheck: function (parameter, functionName, parameterName) {\r\n        ///<summary>\r\n        /// Private function used to check whether required parameters are null or undefined\r\n        ///</summary>\r\n        ///<param name=\"parameter\" type=\"Number\">\r\n        /// The string parameter to check;\r\n        ///</param>\r\n        ///<param name=\"message\" type=\"String\">\r\n        /// The error message text to include when the error is thrown.\r\n        ///</param>\r\n        if (typeof parameter != \"number\") {\r\n            if (typeof parameter === \"string\" && parameter) {\r\n                if (!isNaN(parseInt(parameter))) {\r\n                    return;\r\n                }\r\n            }\r\n            throwParameterError(functionName, parameterName, \"Number\");\r\n        }\r\n    },\r\n\r\n    boolParameterCheck: function (parameter, functionName, parameterName) {\r\n        ///<summary>\r\n        /// Private function used to check whether required parameters are null or undefined\r\n        ///</summary>\r\n        ///<param name=\"parameter\" type=\"Boolean\">\r\n        /// The string parameter to check;\r\n        ///</param>\r\n        ///<param name=\"message\" type=\"String\">\r\n        /// The error message text to include when the error is thrown.\r\n        ///</param>\r\n        if (typeof parameter != \"boolean\") {\r\n            throwParameterError(functionName, parameterName, \"Boolean\");\r\n        }\r\n    },\r\n\r\n    guidParameterCheck: function (parameter, functionName, parameterName) {\r\n        ///<summary>\r\n        /// Private function used to check whether required parameter is a valid GUID\r\n        ///</summary>\r\n        ///<param name=\"parameter\" type=\"String\">\r\n        /// The GUID parameter to check;\r\n        ///</param>\r\n        ///<param name=\"message\" type=\"String\">\r\n        /// The error message text to include when the error is thrown.\r\n        ///</param>\r\n        /// <returns type=\"String\" />\r\n\r\n        try {\r\n            var match = /[0-9A-F]{8}[-]?([0-9A-F]{4}[-]?){3}[0-9A-F]{12}/i.exec(parameter)[0];\r\n\r\n            return match;\r\n        }\r\n        catch (error) {\r\n            throwParameterError(functionName, parameterName, \"GUID String\");\r\n        }\r\n    },\r\n\r\n    keyParameterCheck: function (parameter, functionName, parameterName) {\r\n\r\n        try {\r\n            ErrorHelper.stringParameterCheck(parameter, functionName, parameterName);\r\n\r\n            //check if the param is a guid\r\n            var match = /[0-9A-F]{8}[-]?([0-9A-F]{4}[-]?){3}[0-9A-F]{12}/i.exec(parameter);\r\n            if (match) {\r\n                return match[0];\r\n            }\r\n\r\n            //check the alternate key\r\n            var alternateKeys = parameter.split(',');\r\n\r\n            if (alternateKeys.length) {\r\n                for (var i = 0; i < alternateKeys.length; i++) {\r\n                    alternateKeys[i] = alternateKeys[i].trim().replace('\"', \"'\");\r\n                    /^[\\w\\d\\_]+\\=('[^\\'\\r\\n]+'|\\d+)$/i.exec(alternateKeys[i])[0];\r\n                }\r\n            }\r\n\r\n            return alternateKeys.join(',');\r\n        }\r\n        catch (error) {\r\n            throwParameterError(functionName, parameterName, \"String representing GUID or Alternate Key\");\r\n        }\r\n    },\r\n\r\n    callbackParameterCheck: function (callbackParameter, functionName, parameterName) {\r\n        ///<summary>\r\n        /// Private function used to check whether required callback parameters are functions\r\n        ///</summary>\r\n        ///<param name=\"callbackParameter\" type=\"Function\">\r\n        /// The callback parameter to check;\r\n        ///</param>\r\n        ///<param name=\"message\" type=\"String\">\r\n        /// The error message text to include when the error is thrown.\r\n        ///</param>\r\n        if (typeof callbackParameter != \"function\") {\r\n            throwParameterError(functionName, parameterName, \"Function\");\r\n        }\r\n    },\r\n\r\n    batchIncompatible: function (functionName, isBatch) {\r\n        if (isBatch) {\r\n            isBatch = false;\r\n            throw new Error(functionName + \" cannot be used in a BATCH request.\");\r\n        }\r\n    },\r\n\r\n    batchNotStarted: function (isBatch) {\r\n        if (!isBatch) {\r\n            throw new Error(\"Batch operation has not been started. Please call a DynamicsWebApi.startBatch() function prior to calling DynamicsWebApi.executeBatch() to perform a batch request correctly.\");\r\n        }\r\n    },\r\n\r\n    handleHttpError: function (parsedError, parameters) {\r\n        var error = new Error();\r\n\r\n        Object.keys(parsedError).forEach(function(k) {\r\n            error[k] = parsedError[k];\r\n        });\r\n\r\n        if (parameters) {\r\n            Object.keys(parameters).forEach(function (k) {\r\n                error[k] = parameters[k];\r\n            });\r\n        }\r\n\r\n        return error;\r\n    }\r\n};\r\n\r\nmodule.exports = ErrorHelper;","var DWA = {\r\n    Types: {\r\n        ResponseBase: function () {\r\n            /// <field name='oDataContext' type='String'>The context URL (see [OData-Protocol]) for the payload.</field>  \r\n            this.oDataContext = \"\";\r\n        },\r\n        Response: function () {\r\n            /// <field name='value' type='Object'>Response value returned from the request.</field>  \r\n            DWA.Types.ResponseBase.call(this);\r\n\r\n            this.value = {};\r\n        },\r\n        ReferenceResponse: function () {\r\n            /// <field name='id' type='String'>A String representing the GUID value of the record.</field>  \r\n            /// <field name='collection' type='String'>The name of the Entity Collection that the record belongs to.</field>  \r\n            DWA.Types.ResponseBase.call(this);\r\n\r\n            this.id = \"\";\r\n            this.collection = \"\";\r\n        },\r\n        MultipleResponse: function () {\r\n            /// <field name='oDataNextLink' type='String'>The link to the next page.</field>  \r\n            /// <field name='oDataCount' type='Number'>The count of the records.</field>  \r\n            /// <field name='value' type='Array'>The array of the records returned from the request.</field>  \r\n            DWA.Types.ResponseBase.call(this);\r\n\r\n            this.oDataNextLink = \"\";\r\n            this.oDataCount = 0;\r\n            this.value = [];\r\n        },\r\n        FetchXmlResponse: function () {\r\n            /// <field name='value' type='Array'>The array of the records returned from the request.</field>  \r\n            /// <field name='pagingInfo' type='Object'>Paging Information</field>  \r\n            DWA.Types.ResponseBase.call(this);\r\n\r\n            this.value = [];\r\n            this.PagingInfo = {\r\n                /// <param name='cookie' type='String'>Paging Cookie</param>  \r\n                /// <param name='number' type='Number'>Page Number</param>  \r\n                cookie: \"\",\r\n                page: 0,\r\n                nextPage: 1\r\n            }\r\n        }\r\n    },\r\n    Prefer: {\r\n        /// <field type=\"String\">return=representation</field>\r\n        ReturnRepresentation: \"return=representation\",\r\n        Annotations: {\r\n            /// <field type=\"String\">Microsoft.Dynamics.CRM.associatednavigationproperty</field>\r\n            AssociatedNavigationProperty: 'Microsoft.Dynamics.CRM.associatednavigationproperty',\r\n            /// <field type=\"String\">Microsoft.Dynamics.CRM.lookuplogicalname</field>\r\n            LookupLogicalName: 'Microsoft.Dynamics.CRM.lookuplogicalname',\r\n            /// <field type=\"String\">*</field>\r\n            All: '*',\r\n            /// <field type=\"String\">OData.Community.Display.V1.FormattedValue</field>\r\n            FormattedValue: 'OData.Community.Display.V1.FormattedValue',\r\n            /// <field type=\"String\">Microsoft.Dynamics.CRM.fetchxmlpagingcookie</field>\r\n            FetchXmlPagingCookie: 'Microsoft.Dynamics.CRM.fetchxmlpagingcookie'\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = DWA;","function isNull(value) {\r\n    return typeof value === \"undefined\" || value == null;\r\n}\r\n\r\n//https://stackoverflow.com/a/8809472\r\nfunction generateUUID() { // Public Domain/MIT\r\n    var d = new Date().getTime();\r\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\r\n        d += performance.now(); //use high-precision timer if available\r\n    }\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = (d + Math.random() * 16) % 16 | 0;\r\n        d = Math.floor(d / 16);\r\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n    });\r\n}\r\n\r\nfunction getXrmContext() {\r\n    if (typeof GetGlobalContext !== 'undefined') {\r\n        return GetGlobalContext();\r\n    }\r\n    else {\r\n        if (typeof Xrm !== 'undefined') {\r\n            //d365 v.9.0\r\n            if (!isNull(Xrm.Utility) && !isNull(Xrm.Utility.getGlobalContext)) {\r\n                return Xrm.Utility.getGlobalContext();\r\n            }\r\n            else if (!isNull(Xrm.Page) && !isNull(Xrm.Page.context)) {\r\n                return Xrm.Page.context;\r\n            }\r\n        }\r\n    }\r\n\r\n    throw new Error('Xrm Context is not available. In most cases, it can be resolved by adding a reference to a ClientGlobalContext.js.aspx. Please refer to MSDN documentation for more details.');\r\n}\r\n\r\nfunction getClientUrl() {\r\n    var context = getXrmContext();\r\n\r\n    var clientUrl = context.getClientUrl();\r\n\r\n    if (clientUrl.match(/\\/$/)) {\r\n        clientUrl = clientUrl.substring(0, clientUrl.length - 1);\r\n    }\r\n    return clientUrl;\r\n}\r\n\r\nfunction initWebApiUrl(version) {\r\n    return getClientUrl() + '/api/data/v' + version + '/';\r\n}\r\n\r\nfunction getXrmInternal() {\r\n    //todo: Xrm.Internal namespace is not supported\r\n    return typeof Xrm !== \"undefined\" ? Xrm.Internal : null;\r\n}\r\n\r\nfunction getXrmUtility() {\r\n    return typeof Xrm !== \"undefined\" ? Xrm.Utility : null;\r\n}\r\n\r\nvar Utility = {\r\n    /**\r\n     * Builds parametes for a funciton. Returns '()' (if no parameters) or '([params])?[query]'\r\n     *\r\n     * @param {Object} [parameters] - Function's input parameters. Example: { param1: \"test\", param2: 3 }.\r\n     * @returns {string}\r\n     */\r\n    buildFunctionParameters: require('./buildFunctionParameters'),\r\n\r\n    /**\r\n     * Parses a paging cookie returned in response\r\n     *\r\n     * @param {string} pageCookies - Page cookies returned in @Microsoft.Dynamics.CRM.fetchxmlpagingcookie.\r\n     * @param {number} currentPageNumber - A current page number. Fix empty paging-cookie for complex fetch xmls.\r\n     * @returns {{cookie: \"\", number: 0, next: 1}}\r\n     */\r\n    getFetchXmlPagingCookie: require('./getFetchXmlPagingCookie'),\r\n\r\n    /**\r\n     * Converts a response to a reference object\r\n     *\r\n     * @param {Object} responseData - Response object\r\n     * @returns {ReferenceObject}\r\n     */\r\n    convertToReferenceObject: require('./convertToReferenceObject'),\r\n\r\n    /**\r\n     * Checks whether the value is JS Null.\r\n     * @param {Object} value\r\n     * @returns {boolean}\r\n     */\r\n    isNull: isNull,\r\n\r\n    generateUUID: generateUUID,\r\n\r\n    getXrmContext: getXrmContext,\r\n\r\n    getXrmInternal: getXrmInternal,\r\n\r\n    getXrmUtility: getXrmUtility,\r\n\r\n    getClientUrl: getClientUrl,\r\n\r\n    initWebApiUrl: initWebApiUrl\r\n};\r\n\r\nmodule.exports = Utility;","var parseResponse = require('./helpers/parseResponse');\r\nvar parseResponseHeaders = require('./helpers/parseResponseHeaders');\r\nvar ErrorHelper = require('../helpers/ErrorHelper');\r\n\r\nif (!Array.isArray) {\r\n    require(\"../polyfills/Array-es6\");\r\n}\r\n\r\n/**\r\n * Sends a request to given URL with given parameters\r\n *\r\n */\r\nvar xhrRequest = function (options) {\r\n    var method = options.method;\r\n    var uri = options.uri;\r\n    var data = options.data;\r\n    var additionalHeaders = options.additionalHeaders;\r\n    var responseParams = options.responseParams;\r\n    var successCallback = options.successCallback;\r\n    var errorCallback = options.errorCallback;\r\n    var isAsync = options.isAsync;\r\n\r\n    var request = new XMLHttpRequest();\r\n    request.open(method, uri, isAsync);\r\n\r\n    //set additional headers\r\n    for (var key in additionalHeaders) {\r\n        request.setRequestHeader(key, additionalHeaders[key]);\r\n    }\r\n\r\n    request.onreadystatechange = function () {\r\n        if (request.readyState === 4) {\r\n            switch (request.status) {\r\n                case 200: // Success with content returned in response body.\r\n                case 201: // Success with content returned in response body.\r\n                case 204: // Success with no content returned in response body.\r\n                case 304: {// Success with Not Modified\r\n                    var responseHeaders = parseResponseHeaders(request.getAllResponseHeaders());\r\n                    var responseData = parseResponse(request.responseText, responseHeaders, responseParams);\r\n\r\n                    var response = {\r\n                        data: responseData,\r\n                        headers: responseHeaders,\r\n                        status: request.status\r\n                    };\r\n\r\n                    successCallback(response);\r\n                    break;\r\n                }\r\n                default: // All other statuses are error cases.\r\n                    var error;\r\n                    try {\r\n                        var errorParsed = parseResponse(request.responseText, parseResponseHeaders(request.getAllResponseHeaders()), responseParams);\r\n\r\n                        if (Array.isArray(errorParsed)) {\r\n                            errorCallback(errorParsed);\r\n                            break;\r\n                        }\r\n\r\n                        error = errorParsed.error;\r\n                    } catch (e) {\r\n                        if (request.response.length > 0) {\r\n                            error = { message: request.response };\r\n                        }\r\n                        else {\r\n                            error = { message: \"Unexpected Error\" };\r\n                        }\r\n                    }\r\n\r\n                    errorCallback(ErrorHelper.handleHttpError(error, {\r\n                        status: request.status,\r\n                        statusText: request.statusText\r\n                    }));\r\n\r\n                    break;\r\n            }\r\n\r\n            request = null;\r\n            responseParams.length = 0;\r\n        }\r\n    };\r\n\r\n    if (options.timeout) {\r\n        request.timeout = options.timeout;\r\n    }\r\n\r\n    request.onerror = function () {\r\n        errorCallback(ErrorHelper.handleHttpError({\r\n            status: request.status,\r\n            statusText: request.statusText,\r\n            message: request.responseText || \"Network Error\"\r\n        }));\r\n        responseParams.length = 0;\r\n        request = null;\r\n    };\r\n\r\n    request.ontimeout = function () {\r\n        errorCallback(ErrorHelper.handleHttpError({\r\n            status: request.status,\r\n            statusText: request.statusText,\r\n            message: request.responseText || \"Request Timed Out\"\r\n        }));\r\n        responseParams.length = 0;\r\n        request = null;\r\n    };\r\n\r\n    data\r\n        ? request.send(data)\r\n        : request.send();\r\n};\r\n\r\nmodule.exports = xhrRequest;\r\n","String.prototype.endsWith = function (searchString, position) {\r\n    var subjectString = this.toString();\r\n    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\r\n        position = subjectString.length;\r\n    }\r\n    position -= searchString.length;\r\n    var lastIndex = subjectString.lastIndexOf(searchString, position);\r\n    return lastIndex !== -1 && lastIndex === position;\r\n};\r\n\r\nString.prototype.startsWith = function (searchString, position) {\r\n    position = position || 0;\r\n    return this.substr(position, searchString.length) === searchString;\r\n};","\"use strict\";\r\n\r\nvar DWA = require(\"./dwa\");\r\nvar Utility = require('./utilities/Utility');\r\nvar ErrorHelper = require('./helpers/ErrorHelper');\r\nvar Request = require('./requests/sendRequest');\r\n\r\n//string es6 polyfill\r\nif (!String.prototype.endsWith || !String.prototype.startsWith) {\r\n    require(\"./polyfills/string-es6\");\r\n}\r\n\r\n/* develblock:start */\r\nvar dwaExpandRequest = function () {\r\n    return {\r\n        select: [],\r\n        filter: \"\",\r\n        top: 0,\r\n        orderBy: [],\r\n        property: \"\"\r\n    };\r\n};\r\nvar dwaRequest = function () {\r\n    return {\r\n        collection: \"\",\r\n        id: \"\",\r\n        key: \"\",\r\n        duplicateDetection: true,\r\n        select: [],\r\n        expand: [],\r\n        filter: \"\",\r\n        maxPageSize: 1,\r\n        count: true,\r\n        top: 1,\r\n        orderBy: [],\r\n        includeAnnotations: \"\",\r\n        ifmatch: \"\",\r\n        ifnonematch: \"\",\r\n        returnRepresentation: true,\r\n        entity: {},\r\n        impersonate: \"\",\r\n        navigationProperty: \"\",\r\n        savedQuery: \"\",\r\n        userQuery: \"\",\r\n        mergeLabels: false\r\n    };\r\n};\r\n/* develblock:end */\r\n\r\n/**\r\n * Configuration object for DynamicsWebApi\r\n * @typedef {object} DWAConfig\r\n * @property {string} webApiUrl - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n * @property {string} webApiVersion - The version of Web API to use, for example: \"8.1\"\r\n * @property {string} impersonate - A String representing a URL to Web API (webApiVersion not required if webApiUrl specified) [not used inside of CRM]\r\n * @property {Function} onTokenRefresh - A function that is called when a security token needs to be refreshed.\r\n * @property {string} includeAnnotations - Sets Prefer header with value \"odata.include-annotations=\" and the specified annotation. Annotations provide additional information about lookups, options sets and other complex attribute types.\r\n * @property {string} maxPageSize - Sets the odata.maxpagesize preference value to request the number of entities returned in the response.\r\n * @property {boolean} returnRepresentation - Sets Prefer header request with value \"return=representation\". Use this property to return just created or updated entity in a single request.\r\n * @property {boolean} useEntityNames - Indicates whether to use Entity Logical Names instead of Collection Logical Names.\r\n*/\r\n\r\n/**\r\n * Dynamics Web Api Request\r\n * @typedef {Object} DWARequest\r\n * @property {boolean} async - XHR requests only! Indicates whether the requests should be made synchronously or asynchronously. Default value is 'true' (asynchronously).\r\n * @property {string} collection - The name of the Entity Collection or Entity Logical name.\r\n * @property {string} id - A String representing the Primary Key (GUID) of the record.\r\n * @property {Array} select - An Array (of Strings) representing the $select OData System Query Option to control which attributes will be returned.\r\n * @property {Array} expand - An array of Expand Objects (described below the table) representing the $expand OData System Query Option value to control which related records are also returned.\r\n * @property {string} key - A String representing collection record's Primary Key (GUID) or Alternate Key(s).\r\n * @property {string} filter - Use the $filter system query option to set criteria for which entities will be returned.\r\n * @property {number} maxPageSize - Sets the odata.maxpagesize preference value to request the number of entities returned in the response.\r\n * @property {boolean} count - Boolean that sets the $count system query option with a value of true to include a count of entities that match the filter criteria up to 5000 (per page). Do not use $top with $count!\r\n * @property {number} top - Limit the number of results returned by using the $top system query option. Do not use $top with $count!\r\n * @property {Array} orderBy - An Array (of Strings) representing the order in which items are returned using the $orderby system query option. Use the asc or desc suffix to specify ascending or descending order respectively. The default is ascending if the suffix isn't applied.\r\n * @property {string} includeAnnotations - Sets Prefer header with value \"odata.include-annotations=\" and the specified annotation. Annotations provide additional information about lookups, options sets and other complex attribute types.\r\n * @property {string} ifmatch - Sets If-Match header value that enables to use conditional retrieval or optimistic concurrency in applicable requests.\r\n * @property {string} ifnonematch - Sets If-None-Match header value that enables to use conditional retrieval in applicable requests.\r\n * @property {boolean} returnRepresentation - Sets Prefer header request with value \"return=representation\". Use this property to return just created or updated entity in a single request.\r\n * @property {Object} entity - A JavaScript object with properties corresponding to the logical name of entity attributes (exceptions are lookups and single-valued navigation properties).\r\n * @property {string} impersonate - Impersonates the user. A String representing the GUID value for the Dynamics 365 system user id.\r\n * @property {string} navigationProperty - A String representing the name of a single-valued navigation property. Useful when needed to retrieve information about a related record in a single request.\r\n * @property {string} navigationPropertyKey - v.1.4.3+ A String representing navigation property's Primary Key (GUID) or Alternate Key(s). (For example, to retrieve Attribute Metadata).\r\n * @property {string} metadataAttributeType - v.1.4.3+ Casts the AttributeMetadata to a specific type. (Used in requests to Attribute Metadata).\r\n * @property {boolean} noCache - If set to 'true', DynamicsWebApi adds a request header 'Cache-Control: no-cache'. Default value is 'false'.\r\n * @property {string} savedQuery - A String representing the GUID value of the saved query.\r\n * @property {string} userQuery - A String representing the GUID value of the user query.\r\n * @property {boolean} mergeLabels - If set to 'true', DynamicsWebApi adds a request header 'MSCRM.MergeLabels: true'. Default value is 'false'.\r\n * @property {boolean} isBatch - If set to 'true', DynamicsWebApi treats a request as a part of a batch request. Call ExecuteBatch to execute all requests in a batch. Default value is 'false'.\r\n * @property {string} contentId - BATCH REQUESTS ONLY! Sets Content-ID header or references request in a Change Set.\r\n * @property {boolean} trackChanges - Preference header 'odata.track-changes' is used to request that a delta link be returned which can subsequently be used to retrieve entity changes.\r\n * @property {string} deltaLink - Delta link can be used to retrieve entity changes. Important! Change Tracking must be enabled for the entity.\r\n */\r\n\r\n/**\r\n * Constructor.\r\n * @constructor\r\n * @param {DWAConfig} [config] - configuration object\r\n * @example\r\n   *var dynamicsWebApi = new DynamicsWebApi();\r\n  * @example\r\n   *var dynamicsWebApi = new DynamicsWebApi({ webApiVersion: '9.0' });\r\n  * @example\r\n   *var dynamicsWebApi = new DynamicsWebApi({\r\n   *    webApiUrl: 'https:/myorg.api.crm.dynamics.com/api/data/v9.0/',\r\n   *    includeAnnotations: 'OData.Community.Display.V1.FormattedValue'\r\n   *});\r\n */\r\nfunction DynamicsWebApi(config) {\r\n\r\n    var _internalConfig = {\r\n        webApiVersion: \"8.0\",\r\n        webApiUrl: null,\r\n        impersonate: null,\r\n        onTokenRefresh: null,\r\n        includeAnnotations: null,\r\n        maxPageSize: null,\r\n        returnRepresentation: null\r\n    };\r\n\r\n    var _isBatch = false;\r\n\r\n    if (!config) {\r\n        config = _internalConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the configuration parameters for DynamicsWebApi helper.\r\n     *\r\n     * @param {DWAConfig} config - configuration object\r\n     * @example\r\n       dynamicsWebApi.setConfig({ webApiVersion: '9.0' });\r\n     */\r\n    this.setConfig = function (config) {\r\n\r\n        if (config.webApiVersion) {\r\n            ErrorHelper.stringParameterCheck(config.webApiVersion, \"DynamicsWebApi.setConfig\", \"config.webApiVersion\");\r\n            _internalConfig.webApiVersion = config.webApiVersion;\r\n        }\r\n\r\n        if (config.webApiUrl) {\r\n            ErrorHelper.stringParameterCheck(config.webApiUrl, \"DynamicsWebApi.setConfig\", \"config.webApiUrl\");\r\n            _internalConfig.webApiUrl = config.webApiUrl;\r\n        } else {\r\n            _internalConfig.webApiUrl = Utility.initWebApiUrl(_internalConfig.webApiVersion);\r\n        }\r\n\r\n        if (config.impersonate) {\r\n            _internalConfig.impersonate = ErrorHelper.guidParameterCheck(config.impersonate, \"DynamicsWebApi.setConfig\", \"config.impersonate\");\r\n        }\r\n\r\n        if (config.onTokenRefresh) {\r\n            ErrorHelper.callbackParameterCheck(config.onTokenRefresh, \"DynamicsWebApi.setConfig\", \"config.onTokenRefresh\");\r\n            _internalConfig.onTokenRefresh = config.onTokenRefresh;\r\n        }\r\n\r\n        if (config.includeAnnotations) {\r\n            ErrorHelper.stringParameterCheck(config.includeAnnotations, \"DynamicsWebApi.setConfig\", \"config.includeAnnotations\");\r\n            _internalConfig.includeAnnotations = config.includeAnnotations;\r\n        }\r\n\r\n        if (config.timeout) {\r\n            ErrorHelper.numberParameterCheck(config.timeout, \"DynamicsWebApi.setConfig\", \"config.timeout\");\r\n            _internalConfig.timeout = config.timeout;\r\n        }\r\n\r\n        if (config.maxPageSize) {\r\n            ErrorHelper.numberParameterCheck(config.maxPageSize, \"DynamicsWebApi.setConfig\", \"config.maxPageSize\");\r\n            _internalConfig.maxPageSize = config.maxPageSize;\r\n        }\r\n\r\n        if (config.returnRepresentation) {\r\n            ErrorHelper.boolParameterCheck(config.returnRepresentation, \"DynamicsWebApi.setConfig\", \"config.returnRepresentation\");\r\n            _internalConfig.returnRepresentation = config.returnRepresentation;\r\n        }\r\n\r\n        if (config.useEntityNames) {\r\n            ErrorHelper.boolParameterCheck(config.useEntityNames, 'DynamicsWebApi.setConfig', 'config.useEntityNames');\r\n            _internalConfig.useEntityNames = config.useEntityNames;\r\n        }\r\n    };\r\n\r\n    this.setConfig(config);\r\n\r\n    var _makeRequest = function (method, request, functionName, responseParams) {\r\n        request.isBatch = _isBatch;\r\n        return new Promise(function (resolve, reject) {\r\n            Request.makeRequest(method, request, functionName, _internalConfig, responseParams, resolve, reject);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to create a new record.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api result\r\n     * @example\r\n        *var lead = {\r\n        *    subject: \"Test WebAPI\",\r\n        *    firstname: \"Test\",\r\n        *    lastname: \"WebAPI\",\r\n        *    jobtitle: \"Title\"\r\n        *};\r\n        *\r\n        *var request = {\r\n        *    entity: lead,\r\n        *    collection: \"leads\",\r\n        *    returnRepresentation: true\r\n        *}\r\n        *\r\n        *dynamicsWebApi.createRequest(request).then(function (response) {\r\n        *}).catch(function (error) {\r\n        *});\r\n     */\r\n    this.createRequest = function (request) {\r\n        ErrorHelper.parameterCheck(request, 'DynamicsWebApi.create', 'request');\r\n\r\n        return _makeRequest('POST', request, 'create')\r\n            .then(function (response) {\r\n                return response.data;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to create a new record.\r\n     *\r\n     * @param {Object} object - A JavaScript object valid for create operations.\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string|Array} [prefer] - Sets a Prefer header value. For example: ['retrun=representation', 'odata.include-annotations=\"*\"']\r\n     * @param {Array} [select] - An Array representing the $select Query Option to control which attributes will be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     * @example\r\n        *var lead = {\r\n        *    subject: \"Test WebAPI\",\r\n        *    firstname: \"Test\",\r\n        *    lastname: \"WebAPI\",\r\n        *    jobtitle: \"Title\"\r\n        *};\r\n        *\r\n        *dynamicsWebApi.create(lead, \"leads\").then(function (id) {\r\n        *}).catch(function (error) {\r\n        *});\r\n     */\r\n    this.create = function (object, collection, prefer, select) {\r\n        ErrorHelper.parameterCheck(object, \"DynamicsWebApi.create\", \"object\");\r\n        ErrorHelper.stringParameterCheck(collection, \"DynamicsWebApi.create\", \"collection\");\r\n\r\n        if (prefer) {\r\n            ErrorHelper.stringOrArrayParameterCheck(prefer, \"DynamicsWebApi.create\", \"prefer\");\r\n        }\r\n\r\n        if (select) {\r\n            ErrorHelper.arrayParameterCheck(select, \"DynamicsWebApi.create\", \"select\");\r\n        }\r\n\r\n        var request = {\r\n            collection: collection,\r\n            select: select,\r\n            prefer: prefer,\r\n            entity: object\r\n        };\r\n\r\n        return this.createRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve a record.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api result\r\n     * @example\r\n        *var request = {\r\n        *    key: '7d577253-3ef0-4a0a-bb7f-8335c2596e70',\r\n        *    collection: \"leads\",\r\n        *    select: [\"fullname\", \"subject\"],\r\n        *    ifnonematch: 'W/\"468026\"',\r\n        *    includeAnnotations: \"OData.Community.Display.V1.FormattedValue\"\r\n        *};\r\n        *\r\n        *dynamicsWebApi.retrieveRequest(request).then(function (response) {\r\n        *\r\n        *}).catch(function (error) {\r\n        *\r\n        *});\r\n     */\r\n    this.retrieveRequest = function (request) {\r\n        ErrorHelper.parameterCheck(request, 'DynamicsWebApi.retrieve', 'request');\r\n\r\n        //copy locally\r\n        var isRef = request.select != null && request.select.length === 1 && request.select[0].endsWith(\"/$ref\");\r\n        return _makeRequest('GET', request, 'retrieve', { isRef: isRef }).then(function (response) {\r\n            return response.data;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve a record.\r\n     *\r\n     * @param {string} key - A String representing the GUID value or Aternate Key for the record to retrieve.\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {Array} [select] - An Array representing the $select Query Option to control which attributes will be returned.\r\n     * @param {string|Array} [expand] - A String or Array of Expand Objects representing the $expand Query Option value to control which related records need to be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieve = function (key, collection, select, expand) {\r\n\r\n        ErrorHelper.stringParameterCheck(key, \"DynamicsWebApi.retrieve\", \"key\");\r\n        key = ErrorHelper.keyParameterCheck(key, \"DynamicsWebApi.retrieve\", \"key\");\r\n        ErrorHelper.stringParameterCheck(collection, \"DynamicsWebApi.retrieve\", \"collection\");\r\n\r\n        if (select && select.length) {\r\n            ErrorHelper.arrayParameterCheck(select, \"DynamicsWebApi.retrieve\", \"select\");\r\n        }\r\n\r\n        if (expand && expand.length) {\r\n            ErrorHelper.stringOrArrayParameterCheck(expand, \"DynamicsWebApi.retrieve\", \"expand\");\r\n        }\r\n\r\n        var request = {\r\n            collection: collection,\r\n            key: key,\r\n            select: select,\r\n            expand: expand\r\n        };\r\n\r\n        return this.retrieveRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update a record.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.updateRequest = function (request) {\r\n\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.update\", \"request\");\r\n\r\n        if (request.ifmatch == null) {\r\n            request.ifmatch = '*'; //to prevent upsert\r\n        }\r\n\r\n        //Metadata definitions, cannot be updated using \"PATCH\" method\r\n        var method = /EntityDefinitions|RelationshipDefinitions|GlobalOptionSetDefinitions/.test(request.collection)\r\n            ? 'PUT' : 'PATCH';\r\n\r\n        //copy locally\r\n        var ifmatch = request.ifmatch;\r\n        return _makeRequest(method, request, 'update', { valueIfEmpty: true })\r\n            .then(function (response) {\r\n                return response.data;\r\n            }).catch(function (error) {\r\n                if (ifmatch && error.status === 412) {\r\n                    //precondition failed - not updated\r\n                    return false;\r\n                }\r\n                //rethrow error otherwise\r\n                throw error;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update a record.\r\n     *\r\n     * @param {string} key - A String representing the GUID value or Alternate Key for the record to update.\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {Object} object - A JavaScript object valid for update operations.\r\n     * @param {string} [prefer] - If set to \"return=representation\" the function will return an updated object\r\n     * @param {Array} [select] - An Array representing the $select Query Option to control which attributes will be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.update = function (key, collection, object, prefer, select) {\r\n\r\n        ErrorHelper.stringParameterCheck(key, \"DynamicsWebApi.update\", \"key\");\r\n        key = ErrorHelper.keyParameterCheck(key, \"DynamicsWebApi.update\", \"key\");\r\n        ErrorHelper.parameterCheck(object, \"DynamicsWebApi.update\", \"object\");\r\n        ErrorHelper.stringParameterCheck(collection, \"DynamicsWebApi.update\", \"collection\");\r\n\r\n        if (prefer) {\r\n            ErrorHelper.stringOrArrayParameterCheck(prefer, \"DynamicsWebApi.update\", \"prefer\");\r\n        }\r\n\r\n        if (select) {\r\n            ErrorHelper.arrayParameterCheck(select, \"DynamicsWebApi.update\", \"select\");\r\n        }\r\n\r\n        var request = {\r\n            collection: collection,\r\n            key: key,\r\n            select: select,\r\n            prefer: prefer,\r\n            entity: object\r\n        };\r\n\r\n        return this.updateRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update a single value in the record.\r\n     *\r\n     * @param {string} key - A String representing the GUID value or Alternate Key for the record to update.\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {Object} keyValuePair - keyValuePair object with a logical name of the field as a key and a value to update with. Example: {subject: \"Update Record\"}\r\n     * @param {string|Array} [prefer] - If set to \"return=representation\" the function will return an updated object\r\n     * @param {Array} [select] - An Array representing the $select Query Option to control which attributes will be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.updateSingleProperty = function (key, collection, keyValuePair, prefer, select) {\r\n\r\n        ErrorHelper.stringParameterCheck(key, \"DynamicsWebApi.updateSingleProperty\", \"key\");\r\n        key = ErrorHelper.keyParameterCheck(key, \"DynamicsWebApi.updateSingleProperty\", \"key\");\r\n        ErrorHelper.parameterCheck(keyValuePair, \"DynamicsWebApi.updateSingleProperty\", \"keyValuePair\");\r\n        ErrorHelper.stringParameterCheck(collection, \"DynamicsWebApi.updateSingleProperty\", \"collection\");\r\n\r\n        var field = Object.keys(keyValuePair)[0];\r\n        var fieldValue = keyValuePair[field];\r\n\r\n        if (prefer) {\r\n            ErrorHelper.stringOrArrayParameterCheck(prefer, \"DynamicsWebApi.updateSingleProperty\", \"prefer\");\r\n        }\r\n\r\n        if (select) {\r\n            ErrorHelper.arrayParameterCheck(select, \"DynamicsWebApi.updateSingleProperty\", \"select\");\r\n        }\r\n\r\n        var request = {\r\n            collection: collection,\r\n            key: key,\r\n            select: select,\r\n            prefer: prefer,\r\n            navigationProperty: field,\r\n            data: { value: fieldValue }\r\n        };\r\n\r\n        return _makeRequest('PUT', request, 'updateSingleProperty')\r\n            .then(function (response) {\r\n                return response.data;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to delete a record.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.deleteRequest = function (request) {\r\n\r\n        ErrorHelper.parameterCheck(request, 'DynamicsWebApi.delete', 'request');\r\n\r\n        //copy locally\r\n        var ifmatch = request.ifmatch;\r\n        return _makeRequest('DELETE', request, 'delete', { valueIfEmpty: true }).then(function (response) {\r\n            return response.data;\r\n        }).catch(function (error) {\r\n            if (ifmatch && error.status === 412) {\r\n                //precondition failed - not deleted\r\n                return false;\r\n            }\r\n            else {\r\n                //rethrow error otherwise\r\n                throw error;\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to delete a record.\r\n     *\r\n     * @param {string} key - A String representing the GUID value or Alternate Key for the record to delete.\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} [propertyName] - The name of the property which needs to be emptied. Instead of removing a whole record only the specified property will be cleared.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.deleteRecord = function (key, collection, propertyName) {\r\n        ErrorHelper.stringParameterCheck(collection, 'DynamicsWebApi.deleteRecord', 'collection');\r\n\r\n        if (propertyName != null)\r\n            ErrorHelper.stringParameterCheck(propertyName, 'DynamicsWebApi.deleteRecord', 'propertyName');\r\n\r\n        var request = {\r\n            navigationProperty: propertyName,\r\n            collection: collection,\r\n            key: key\r\n        };\r\n\r\n        return _makeRequest('DELETE', request, 'deleteRecord').then(function () {\r\n            return;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to upsert a record.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.upsertRequest = function (request) {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.upsert\", \"request\");\r\n\r\n        //copy locally\r\n        var ifnonematch = request.ifnonematch;\r\n        var ifmatch = request.ifmatch;\r\n        return _makeRequest(\"PATCH\", request, 'upsert')\r\n            .then(function (response) {\r\n                return response.data;\r\n            }).catch(function (error) {\r\n                if (ifnonematch && error.status === 412) {\r\n                    //if prevent update\r\n                    return;\r\n                }\r\n                else if (ifmatch && error.status === 404) {\r\n                    //if prevent create\r\n                    return;\r\n                }\r\n                //rethrow error otherwise\r\n                throw error;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to upsert a record.\r\n     *\r\n     * @param {string} key - A String representing the GUID value or Alternate Key for the record to upsert.\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {Object} object - A JavaScript object valid for update operations.\r\n     * @param {string|Array} [prefer] - If set to \"return=representation\" the function will return an updated object\r\n     * @param {Array} [select] - An Array representing the $select Query Option to control which attributes will be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.upsert = function (key, collection, object, prefer, select) {\r\n\r\n        ErrorHelper.stringParameterCheck(key, \"DynamicsWebApi.upsert\", \"key\");\r\n        key = ErrorHelper.keyParameterCheck(key, \"DynamicsWebApi.upsert\", \"key\");\r\n\r\n        ErrorHelper.parameterCheck(object, \"DynamicsWebApi.upsert\", \"object\");\r\n        ErrorHelper.stringParameterCheck(collection, \"DynamicsWebApi.upsert\", \"collection\");\r\n\r\n        if (prefer) {\r\n            ErrorHelper.stringOrArrayParameterCheck(prefer, \"DynamicsWebApi.upsert\", \"prefer\");\r\n        }\r\n\r\n        if (select) {\r\n            ErrorHelper.arrayParameterCheck(select, \"DynamicsWebApi.upsert\", \"select\");\r\n        }\r\n\r\n        var request = {\r\n            collection: collection,\r\n            key: key,\r\n            select: select,\r\n            prefer: prefer,\r\n            entity: object\r\n        };\r\n\r\n        return this.upsertRequest(request);\r\n    };\r\n\r\n    var retrieveMultipleRequest = function (request, nextPageLink) {\r\n\r\n        if (nextPageLink) {\r\n            ErrorHelper.stringParameterCheck(nextPageLink, 'DynamicsWebApi.retrieveMultiple', 'nextPageLink');\r\n            request.url = nextPageLink;\r\n        }\r\n\r\n        return _makeRequest(\"GET\", request, 'retrieveMultiple')\r\n            .then(function (response) {\r\n                return response.data;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve records.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @param {string} [nextPageLink] - Use the value of the @odata.nextLink property with a new GET request to return the next page of data. Pass null to retrieveMultipleOptions.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveMultipleRequest = retrieveMultipleRequest;\r\n\r\n    var _retrieveAllRequest = function (request, nextPageLink, records) {\r\n        records = records || [];\r\n\r\n        return retrieveMultipleRequest(request, nextPageLink).then(function (response) {\r\n            records = records.concat(response.value);\r\n\r\n            var pageLink = response.oDataNextLink;\r\n\r\n            if (pageLink) {\r\n                return _retrieveAllRequest(request, pageLink, records);\r\n            }\r\n\r\n            var result = { value: records };\r\n\r\n            if (response.oDataDeltaLink) {\r\n                result[\"@odata.deltaLink\"] = response.oDataDeltaLink;\r\n                result.oDataDeltaLink = response.oDataDeltaLink;\r\n            }\r\n\r\n            return result;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve all records.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveAllRequest = function (request) {\r\n        ErrorHelper.batchIncompatible('DynamicsWebApi.retrieveAllRequest', _isBatch);\r\n        return _retrieveAllRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to count records. IMPORTANT! The count value does not represent the total number of entities in the system. It is limited by the maximum number of entities that can be returned. Returns: Number\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} [filter] - Use the $filter system query option to set criteria for which entities will be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.count = function (collection, filter) {\r\n        var request = {\r\n            collection: collection\r\n        };\r\n\r\n        if (filter == null || (filter != null && !filter.length)) {\r\n            request.navigationProperty = '$count';\r\n        }\r\n        else {\r\n            request.filter = filter;\r\n            request.count = true;\r\n        }\r\n\r\n        //if filter has not been specified then simplify the request\r\n        return _makeRequest('GET', request, 'count', { toCount: request.count })\r\n            .then(function (response) {\r\n                return response.data;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to count records. Returns: Number\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} [filter] - Use the $filter system query option to set criteria for which entities will be returned.\r\n     * @param {Array} [select] - An Array representing the $select Query Option to control which attributes will be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.countAll = function (collection, filter, select) {\r\n        ErrorHelper.batchIncompatible('DynamicsWebApi.countAll', _isBatch);\r\n        return _retrieveAllRequest({\r\n            collection: collection,\r\n            filter: filter,\r\n            select: select\r\n        })\r\n            .then(function (response) {\r\n                return response\r\n                    ? (response.value ? response.value.length : 0)\r\n                    : 0;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve records.\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {Array} [select] - Use the $select system query option to limit the properties returned.\r\n     * @param {string} [filter] - Use the $filter system query option to set criteria for which entities will be returned.\r\n     * @param {string} [nextPageLink] - Use the value of the @odata.nextLink property with a new GET request to return the next page of data. Pass null to retrieveMultipleOptions.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveMultiple = function (collection, select, filter, nextPageLink) {\r\n        return this.retrieveMultipleRequest({\r\n            collection: collection,\r\n            select: select,\r\n            filter: filter\r\n        }, nextPageLink);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve all records.\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {Array} [select] - Use the $select system query option to limit the properties returned.\r\n     * @param {string} [filter] - Use the $filter system query option to set criteria for which entities will be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveAll = function (collection, select, filter) {\r\n        ErrorHelper.batchIncompatible('DynamicsWebApi.retrieveAll', _isBatch);\r\n        return _retrieveAllRequest({\r\n            collection: collection,\r\n            select: select,\r\n            filter: filter\r\n        });\r\n    };\r\n\r\n    var executeFetchXml = function (collection, fetchXml, includeAnnotations, pageNumber, pagingCookie, impersonateUserId) {\r\n\r\n        ErrorHelper.stringParameterCheck(fetchXml, \"DynamicsWebApi.executeFetchXml\", \"fetchXml\");\r\n\r\n        pageNumber = pageNumber || 1;\r\n\r\n        ErrorHelper.numberParameterCheck(pageNumber, \"DynamicsWebApi.executeFetchXml\", \"pageNumber\");\r\n        var replacementString = '$1 page=\"' + pageNumber + '\"';\r\n\r\n        if (pagingCookie != null) {\r\n            ErrorHelper.stringParameterCheck(pagingCookie, \"DynamicsWebApi.executeFetchXml\", \"pagingCookie\");\r\n            replacementString += ' paging-cookie=\"' + pagingCookie + '\"';\r\n        }\r\n\r\n        //add page number and paging cookie to fetch xml\r\n        fetchXml = fetchXml.replace(/^(<fetch)/, replacementString);\r\n\r\n        var request = {\r\n            collection: collection,\r\n            includeAnnotations: includeAnnotations,\r\n            impersonate: impersonateUserId,\r\n            fetchXml: fetchXml\r\n        };\r\n\r\n        return _makeRequest(\"GET\", request, 'executeFetchXml', { pageNumber: pageNumber })\r\n            .then(function (response) {\r\n                return response.data;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to execute FetchXml to retrieve records. Returns: DWA.Types.FetchXmlResponse\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} fetchXml - FetchXML is a proprietary query language that provides capabilities to perform aggregation.\r\n     * @param {string} [includeAnnotations] - Use this parameter to include annotations to a result. For example: * or Microsoft.Dynamics.CRM.fetchxmlpagingcookie\r\n     * @param {number} [pageNumber] - Page number.\r\n     * @param {string} [pagingCookie] - Paging cookie. For retrieving the first page, pagingCookie should be null.\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.fetch = executeFetchXml;\r\n\r\n    /**\r\n     * Sends an asynchronous request to execute FetchXml to retrieve records. Returns: DWA.Types.FetchXmlResponse\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} fetchXml - FetchXML is a proprietary query language that provides capabilities to perform aggregation.\r\n     * @param {string} [includeAnnotations] - Use this parameter to include annotations to a result. For example: * or Microsoft.Dynamics.CRM.fetchxmlpagingcookie\r\n     * @param {number} [pageNumber] - Page number.\r\n     * @param {string} [pagingCookie] - Paging cookie. For retrieving the first page, pagingCookie should be null.\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.executeFetchXml = executeFetchXml;\r\n\r\n    var _executeFetchXmlAll = function (collection, fetchXml, includeAnnotations, pageNumber, pagingCookie, impersonateUserId, records) {\r\n        records = records || [];\r\n\r\n        return executeFetchXml(collection, fetchXml, includeAnnotations, pageNumber, pagingCookie, impersonateUserId, records).then(function (response) {\r\n            records = records.concat(response.value);\r\n\r\n            if (response.PagingInfo) {\r\n                return _executeFetchXmlAll(collection, fetchXml, includeAnnotations, response.PagingInfo.nextPage, response.PagingInfo.cookie, impersonateUserId, records);\r\n            }\r\n\r\n            return { value: records };\r\n        });\r\n    };\r\n\r\n    var innerExecuteFetchXmlAll = function (collection, fetchXml, includeAnnotations, impersonateUserId) {\r\n        ErrorHelper.batchIncompatible('DynamicsWebApi.executeFetchXmlAll', _isBatch);\r\n        return _executeFetchXmlAll(collection, fetchXml, includeAnnotations, null, null, impersonateUserId);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to execute FetchXml to retrieve all records.\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} fetchXml - FetchXML is a proprietary query language that provides capabilities to perform aggregation.\r\n     * @param {string} [includeAnnotations] - Use this parameter to include annotations to a result. For example: * or Microsoft.Dynamics.CRM.fetchxmlpagingcookie\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.fetchAll = innerExecuteFetchXmlAll;\r\n\r\n    /**\r\n     * Sends an asynchronous request to execute FetchXml to retrieve all records.\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} fetchXml - FetchXML is a proprietary query language that provides capabilities to perform aggregation.\r\n     * @param {string} [includeAnnotations] - Use this parameter to include annotations to a result. For example: * or Microsoft.Dynamics.CRM.fetchxmlpagingcookie\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.executeFetchXmlAll = innerExecuteFetchXmlAll;\r\n\r\n    /**\r\n     * Associate for a collection-valued navigation property. (1:N or N:N)\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} primaryKey - Primary entity record id.\r\n     * @param {string} relationshipName - Relationship name.\r\n     * @param {string} relatedCollection - Related name of the Entity Collection or Entity Logical name.\r\n     * @param {string} relatedKey - Related entity record id.\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.associate = function (collection, primaryKey, relationshipName, relatedCollection, relatedKey, impersonateUserId) {\r\n        ErrorHelper.stringParameterCheck(relatedCollection, \"DynamicsWebApi.associate\", \"relatedcollection\");\r\n        ErrorHelper.stringParameterCheck(relationshipName, \"DynamicsWebApi.associate\", \"relationshipName\");\r\n        primaryKey = ErrorHelper.keyParameterCheck(primaryKey, \"DynamicsWebApi.associate\", \"primaryKey\");\r\n        relatedKey = ErrorHelper.keyParameterCheck(relatedKey, \"DynamicsWebApi.associate\", \"relatedKey\");\r\n\r\n        var request = {\r\n            _additionalUrl: relationshipName + '/$ref',\r\n            collection: collection,\r\n            key: primaryKey,\r\n            impersonate: impersonateUserId,\r\n            data: { \"@odata.id\": relatedCollection + \"(\" + relatedKey + \")\" }\r\n        };\r\n\r\n        return _makeRequest(\"POST\", request, 'associate')\r\n            .then(function () { });\r\n    };\r\n\r\n    /**\r\n     * Disassociate for a collection-valued navigation property.\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} primaryKey - Primary entity record id.\r\n     * @param {string} relationshipName - Relationship name.\r\n     * @param {string} relatedKey - Related entity record id.\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.disassociate = function (collection, primaryKey, relationshipName, relatedKey, impersonateUserId) {\r\n        ErrorHelper.stringParameterCheck(relationshipName, \"DynamicsWebApi.disassociate\", \"relationshipName\");\r\n        relatedKey = ErrorHelper.keyParameterCheck(relatedKey, \"DynamicsWebApi.disassociate\", \"relatedId\");\r\n\r\n        var request = {\r\n            _additionalUrl: relationshipName + '(' + relatedKey + ')/$ref',\r\n            collection: collection,\r\n            key: primaryKey,\r\n            impersonate: impersonateUserId\r\n        };\r\n\r\n        return _makeRequest(\"DELETE\", request, 'disassociate')\r\n            .then(function () { });\r\n    };\r\n\r\n    /**\r\n     * Associate for a single-valued navigation property. (1:N)\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} key - Entity record Id that contains an attribute.\r\n     * @param {string} singleValuedNavigationPropertyName - Single-valued navigation property name (usually it's a Schema Name of the lookup attribute).\r\n     * @param {string} relatedCollection - Related collection name that the lookup (attribute) points to.\r\n     * @param {string} relatedKey - Related entity record id that needs to be associated.\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.associateSingleValued = function (collection, key, singleValuedNavigationPropertyName, relatedCollection, relatedKey, impersonateUserId) {\r\n\r\n        relatedKey = ErrorHelper.keyParameterCheck(relatedKey, \"DynamicsWebApi.associateSingleValued\", \"relatedKey\");\r\n        ErrorHelper.stringParameterCheck(singleValuedNavigationPropertyName, \"DynamicsWebApi.associateSingleValued\", \"singleValuedNavigationPropertyName\");\r\n        ErrorHelper.stringParameterCheck(relatedCollection, \"DynamicsWebApi.associateSingleValued\", \"relatedcollection\");\r\n\r\n        var request = {\r\n            _additionalUrl: singleValuedNavigationPropertyName + '/$ref',\r\n            collection: collection,\r\n            key: key,\r\n            impersonate: impersonateUserId,\r\n            data: { \"@odata.id\": relatedCollection + \"(\" + relatedKey + \")\" }\r\n        };\r\n\r\n        return _makeRequest(\"PUT\", request, 'associateSingleValued')\r\n            .then(function () { });\r\n    };\r\n\r\n    /**\r\n     * Removes a reference to an entity for a single-valued navigation property. (1:N)\r\n     *\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} key - Entity record Id that contains an attribute.\r\n     * @param {string} singleValuedNavigationPropertyName - Single-valued navigation property name (usually it's a Schema Name of the lookup attribute).\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.disassociateSingleValued = function (collection, key, singleValuedNavigationPropertyName, impersonateUserId) {\r\n\r\n        ErrorHelper.stringParameterCheck(singleValuedNavigationPropertyName, \"DynamicsWebApi.disassociateSingleValued\", \"singleValuedNavigationPropertyName\");\r\n\r\n        var request = {\r\n            _additionalUrl: singleValuedNavigationPropertyName + \"/$ref\",\r\n            key: key,\r\n            collection: collection,\r\n            impersonate: impersonateUserId\r\n        };\r\n\r\n        return _makeRequest(\"DELETE\", request, 'disassociateSingleValued')\r\n            .then(function () { });\r\n    };\r\n\r\n    /**\r\n     * Executes an unbound function (not bound to a particular entity record)\r\n     *\r\n     * @param {string} functionName - The name of the function.\r\n     * @param {Object} [parameters] - Function's input parameters. Example: { param1: \"test\", param2: 3 }.\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.executeUnboundFunction = function (functionName, parameters, impersonateUserId) {\r\n        return _executeFunction(functionName, parameters, null, null, impersonateUserId, true);\r\n    };\r\n\r\n    /**\r\n     * Executes a bound function\r\n     *\r\n     * @param {string} [id] - A String representing the GUID value for the record.\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} functionName - The name of the function.\r\n     * @param {Object} [parameters] - Function's input parameters. Example: { param1: \"test\", param2: 3 }.\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.executeBoundFunction = function (id, collection, functionName, parameters, impersonateUserId) {\r\n        return _executeFunction(functionName, parameters, collection, id, impersonateUserId);\r\n    };\r\n\r\n    var _executeFunction = function (functionName, parameters, collection, id, impersonateUserId, isUnbound) {\r\n\r\n        ErrorHelper.stringParameterCheck(functionName, \"DynamicsWebApi.executeFunction\", \"functionName\");\r\n\r\n        var request = {\r\n            _additionalUrl: functionName + Utility.buildFunctionParameters(parameters),\r\n            _unboundRequest: isUnbound,\r\n            key: id,\r\n            collection: collection,\r\n            impersonate: impersonateUserId\r\n        };\r\n\r\n        return _makeRequest(\"GET\", request, 'executeFunction').then(function (response) {\r\n            return response.data;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Executes an unbound Web API action (not bound to a particular entity record)\r\n     *\r\n     * @param {string} actionName - The name of the Web API action.\r\n     * @param {Object} [requestObject] - Action request body object.\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.executeUnboundAction = function (actionName, requestObject, impersonateUserId) {\r\n        return _executeAction(actionName, requestObject, null, null, impersonateUserId, true);\r\n    };\r\n\r\n    /**\r\n     * Executes a bound Web API action (bound to a particular entity record)\r\n     *\r\n     * @param {string} id - A String representing the GUID value for the record.\r\n     * @param {string} collection - The name of the Entity Collection or Entity Logical name.\r\n     * @param {string} actionName - The name of the Web API action.\r\n     * @param {Object} [requestObject] - Action request body object.\r\n     * @param {string} [impersonateUserId] - A String representing the GUID value for the Dynamics 365 system user id. Impersonates the user.\r\n     * @returns {Promise | Function} D365 Web Api result\r\n     */\r\n    this.executeBoundAction = function (id, collection, actionName, requestObject, impersonateUserId) {\r\n        return _executeAction(actionName, requestObject, collection, id, impersonateUserId);\r\n    };\r\n\r\n    var _executeAction = function (actionName, requestObject, collection, id, impersonateUserId, isUnbound) {\r\n\r\n        ErrorHelper.stringParameterCheck(actionName, \"DynamicsWebApi.executeAction\", \"actionName\");\r\n\r\n        var request = {\r\n            _additionalUrl: actionName,\r\n            _unboundRequest: isUnbound,\r\n            collection: collection,\r\n            key: id,\r\n            impersonate: impersonateUserId,\r\n            data: requestObject\r\n        };\r\n\r\n        var onSuccess = function (response) {\r\n            return response.data;\r\n        };\r\n\r\n\r\n        return _makeRequest(\"POST\", request, 'executeAction').then(onSuccess);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to create an entity definition.\r\n     *\r\n     * @param {string} entityDefinition - Entity Definition.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.createEntity = function (entityDefinition) {\r\n\r\n        ErrorHelper.parameterCheck(entityDefinition, 'DynamicsWebApi.createEntity', 'entityDefinition');\r\n\r\n        var request = {\r\n            collection: 'EntityDefinitions',\r\n            entity: entityDefinition\r\n        };\r\n        return this.createRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update an entity definition.\r\n     *\r\n     * @param {string} entityDefinition - Entity Definition.\r\n     * @param {boolean} [mergeLabels] - Sets MSCRM.MergeLabels header that controls whether to overwrite the existing labels or merge your new label with any existing language labels. Default value is false.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.updateEntity = function (entityDefinition, mergeLabels) {\r\n\r\n        ErrorHelper.parameterCheck(entityDefinition, 'DynamicsWebApi.updateEntity', 'entityDefinition');\r\n        ErrorHelper.guidParameterCheck(entityDefinition.MetadataId, 'DynamicsWebApi.updateEntity', 'entityDefinition.MetadataId');\r\n\r\n        var request = {\r\n            collection: 'EntityDefinitions',\r\n            mergeLabels: mergeLabels,\r\n            key: entityDefinition.MetadataId,\r\n            entity: entityDefinition\r\n        };\r\n        return this.updateRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve a specific entity definition.\r\n     *\r\n     * @param {string} entityKey - The Entity MetadataId or Alternate Key (such as LogicalName).\r\n     * @param {Array} [select] - Use the $select system query option to limit the properties returned.\r\n     * @param {string|Array} [expand] - A String or Array of Expand Objects representing the $expand Query Option value to control which related records need to be returned.\r\n    * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveEntity = function (entityKey, select, expand) {\r\n\r\n        ErrorHelper.keyParameterCheck(entityKey, 'DynamicsWebApi.retrieveEntity', 'entityKey');\r\n\r\n        var request = {\r\n            collection: 'EntityDefinitions',\r\n            key: entityKey,\r\n            select: select,\r\n            expand: expand\r\n        };\r\n\r\n        return this.retrieveRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve entity definitions.\r\n     *\r\n     * @param {Array} [select] - Use the $select system query option to limit the properties returned.\r\n     * @param {string} [filter] - Use the $filter system query option to set criteria for which entity definitions will be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveEntities = function (select, filter) {\r\n        var request = {\r\n            collection: 'EntityDefinitions',\r\n            select: select,\r\n            filter: filter\r\n        };\r\n\r\n        return this.retrieveRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to create an attribute.\r\n     *\r\n     * @param {string} entityKey - The Entity MetadataId or Alternate Key (such as LogicalName).\r\n     * @param {Object} attributeDefinition - Object that describes the attribute.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.createAttribute = function (entityKey, attributeDefinition) {\r\n        ErrorHelper.keyParameterCheck(entityKey, 'DynamicsWebApi.createAttribute', 'entityKey');\r\n        ErrorHelper.parameterCheck(attributeDefinition, 'DynamicsWebApi.createAttribute', 'attributeDefinition');\r\n\r\n        var request = {\r\n            collection: 'EntityDefinitions',\r\n            key: entityKey,\r\n            entity: attributeDefinition,\r\n            navigationProperty: 'Attributes'\r\n        };\r\n\r\n        return this.createRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update an attribute.\r\n     *\r\n     * @param {string} entityKey - The Entity MetadataId or Alternate Key (such as LogicalName).\r\n     * @param {Object} attributeDefinition - Object that describes the attribute.\r\n     * @param {string} [attributeType] - Use this parameter to cast the Attribute to a specific type.\r\n     * @param {boolean} [mergeLabels] - Sets MSCRM.MergeLabels header that controls whether to overwrite the existing labels or merge your new label with any existing language labels. Default value is false.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.updateAttribute = function (entityKey, attributeDefinition, attributeType, mergeLabels) {\r\n        ErrorHelper.keyParameterCheck(entityKey, 'DynamicsWebApi.updateAttribute', 'entityKey');\r\n        ErrorHelper.parameterCheck(attributeDefinition, 'DynamicsWebApi.updateAttribute', 'attributeDefinition');\r\n        ErrorHelper.guidParameterCheck(attributeDefinition.MetadataId, 'DynamicsWebApi.updateAttribute', 'attributeDefinition.MetadataId');\r\n\r\n        if (attributeType) {\r\n            ErrorHelper.stringParameterCheck(attributeType, 'DynamicsWebApi.updateAttribute', 'attributeType');\r\n        }\r\n\r\n        var request = {\r\n            collection: 'EntityDefinitions',\r\n            key: entityKey,\r\n            entity: attributeDefinition,\r\n            navigationProperty: 'Attributes',\r\n            navigationPropertyKey: attributeDefinition.MetadataId,\r\n            mergeLabels: mergeLabels,\r\n            metadataAttributeType: attributeType\r\n        };\r\n\r\n        return this.updateRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve attribute metadata for a specified entity definition.\r\n     *\r\n     * @param {string} entityKey - The Entity MetadataId or Alternate Key (such as LogicalName).\r\n     * @param {string} [attributeType] - Use this parameter to cast the Attributes to a specific type.\r\n     * @param {Array} [select] - Use the $select system query option to limit the properties returned.\r\n     * @param {string} [filter] - Use the $filter system query option to set criteria for which attribute definitions will be returned.\r\n     * @param {string|Array} [expand] - A String or Array of Expand Objects representing the $expand Query Option value to control which related records need to be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveAttributes = function (entityKey, attributeType, select, filter, expand) {\r\n\r\n        ErrorHelper.keyParameterCheck(entityKey, 'DynamicsWebApi.retrieveAttributes', 'entityKey');\r\n\r\n        if (attributeType) {\r\n            ErrorHelper.stringParameterCheck(attributeType, 'DynamicsWebApi.retrieveAttributes', 'attributeType');\r\n        }\r\n\r\n        var request = {\r\n            collection: 'EntityDefinitions',\r\n            key: entityKey,\r\n            navigationProperty: 'Attributes',\r\n            select: select,\r\n            filter: filter,\r\n            expand: expand,\r\n            metadataAttributeType: attributeType\r\n        };\r\n\r\n        return this.retrieveRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve a specific attribute metadata for a specified entity definition.\r\n     *\r\n     * @param {string} entityKey - The Entity MetadataId or Alternate Key (such as LogicalName).\r\n     * @param {string} attributeKey - The Attribute Metadata id.\r\n     * @param {string} [attributeType] - Use this parameter to cast the Attribute to a specific type.\r\n     * @param {Array} [select] - Use the $select system query option to limit the properties returned.\r\n     * @param {string|Array} [expand] - A String or Array of Expand Objects representing the $expand Query Option value to control which related records need to be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveAttribute = function (entityKey, attributeKey, attributeType, select, expand) {\r\n\r\n        ErrorHelper.keyParameterCheck(entityKey, 'DynamicsWebApi.retrieveAttribute', 'entityKey');\r\n        ErrorHelper.keyParameterCheck(attributeKey, 'DynamicsWebApi.retrieveAttribute', 'attributeKey');\r\n\r\n        if (attributeType) {\r\n            ErrorHelper.stringParameterCheck(attributeType, 'DynamicsWebApi.retrieveAttribute', 'attributeType');\r\n        }\r\n\r\n        var request = {\r\n            collection: 'EntityDefinitions',\r\n            key: entityKey,\r\n            navigationProperty: 'Attributes',\r\n            select: select,\r\n            expand: expand,\r\n            metadataAttributeType: attributeType,\r\n            navigationPropertyKey: attributeKey\r\n        };\r\n\r\n        return this.retrieveRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to create a relationship definition.\r\n     *\r\n     * @param {string} relationshipDefinition - Relationship Definition.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.createRelationship = function (relationshipDefinition) {\r\n\r\n        ErrorHelper.parameterCheck(relationshipDefinition, 'DynamicsWebApi.createRelationship', 'relationshipDefinition');\r\n\r\n        var request = {\r\n            collection: 'RelationshipDefinitions',\r\n            entity: relationshipDefinition\r\n        };\r\n        return this.createRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update a relationship definition.\r\n     *\r\n     * @param {string} relationshipDefinition - Relationship Definition.\r\n     * @param {string} [relationshipType] - Use this parameter to cast the Relationship to a specific type.\r\n     * @param {boolean} [mergeLabels] - Sets MSCRM.MergeLabels header that controls whether to overwrite the existing labels or merge your new label with any existing language labels. Default value is false.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.updateRelationship = function (relationshipDefinition, relationshipType, mergeLabels) {\r\n\r\n        ErrorHelper.parameterCheck(relationshipDefinition, 'DynamicsWebApi.updateRelationship', 'relationshipDefinition');\r\n        ErrorHelper.guidParameterCheck(relationshipDefinition.MetadataId, 'DynamicsWebApi.updateRelationship', 'relationshipDefinition.MetadataId');\r\n\r\n        var request = {\r\n            collection: 'RelationshipDefinitions',\r\n            mergeLabels: mergeLabels,\r\n            key: relationshipDefinition.MetadataId,\r\n            entity: relationshipDefinition,\r\n            navigationProperty: relationshipType\r\n        };\r\n\r\n        return this.updateRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to delete a relationship definition.\r\n     *\r\n     * @param {string} metadataId - A String representing the GUID value.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.deleteRelationship = function (metadataId) {\r\n        ErrorHelper.keyParameterCheck(metadataId, 'DynamicsWebApi.deleteRelationship', 'metadataId');\r\n\r\n        var request = {\r\n            collection: 'RelationshipDefinitions',\r\n            key: metadataId\r\n        };\r\n\r\n        return this.deleteRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve relationship definitions.\r\n     *\r\n     * @param {string} [relationshipType] - Use this parameter to cast a Relationship to a specific type: 1:M or M:M.\r\n     * @param {Array} [select] - Use the $select system query option to limit the properties returned.\r\n     * @param {string} [filter] - Use the $filter system query option to set criteria for which relationships will be returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveRelationships = function (relationshipType, select, filter) {\r\n\r\n        var request = {\r\n            collection: 'RelationshipDefinitions',\r\n            navigationProperty: relationshipType,\r\n            select: select,\r\n            filter: filter\r\n        };\r\n\r\n        return this.retrieveMultipleRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve a specific relationship definition.\r\n     *\r\n     * @param {string} metadataId - String representing the Metadata Id GUID.\r\n     * @param {string} [relationshipType] - Use this parameter to cast a Relationship to a specific type: 1:M or M:M.\r\n     * @param {Array} [select] - Use the $select system query option to limit the properties returned.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveRelationship = function (metadataId, relationshipType, select) {\r\n\r\n        ErrorHelper.keyParameterCheck(metadataId, 'DynamicsWebApi.retrieveRelationship', 'metadataId');\r\n\r\n        var request = {\r\n            collection: 'RelationshipDefinitions',\r\n            navigationProperty: relationshipType,\r\n            key: metadataId,\r\n            select: select\r\n        };\r\n\r\n        return this.retrieveRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to create a Global Option Set definition\r\n     *\r\n     * @param {string} globalOptionSetDefinition - Global Option Set Definition.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.createGlobalOptionSet = function (globalOptionSetDefinition) {\r\n\r\n        ErrorHelper.parameterCheck(globalOptionSetDefinition, 'DynamicsWebApi.createGlobalOptionSet', 'globalOptionSetDefinition');\r\n\r\n        var request = {\r\n            collection: 'GlobalOptionSetDefinitions',\r\n            entity: globalOptionSetDefinition\r\n        };\r\n\r\n        return this.createRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update a Global Option Set.\r\n     *\r\n     * @param {string} globalOptionSetDefinition - Global Option Set Definition.\r\n     * @param {boolean} [mergeLabels] - Sets MSCRM.MergeLabels header that controls whether to overwrite the existing labels or merge your new label with any existing language labels. Default value is false.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.updateGlobalOptionSet = function (globalOptionSetDefinition, mergeLabels) {\r\n\r\n        ErrorHelper.parameterCheck(globalOptionSetDefinition, 'DynamicsWebApi.updateGlobalOptionSet', 'globalOptionSetDefinition');\r\n        ErrorHelper.guidParameterCheck(globalOptionSetDefinition.MetadataId, 'DynamicsWebApi.updateGlobalOptionSet', 'globalOptionSetDefinition.MetadataId');\r\n\r\n        var request = {\r\n            collection: 'GlobalOptionSetDefinitions',\r\n            mergeLabels: mergeLabels,\r\n            key: globalOptionSetDefinition.MetadataId,\r\n            entity: globalOptionSetDefinition\r\n        };\r\n        return this.updateRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to delete a Global Option Set.\r\n     *\r\n     * @param {string} globalOptionSetKey - A String representing the GUID value or Alternate Key (such as Name).\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.deleteGlobalOptionSet = function (globalOptionSetKey) {\r\n        ErrorHelper.keyParameterCheck(globalOptionSetKey, 'DynamicsWebApi.deleteGlobalOptionSet', 'globalOptionSetKey');\r\n\r\n        var request = {\r\n            collection: 'GlobalOptionSetDefinitions',\r\n            key: globalOptionSetKey\r\n        };\r\n\r\n        return this.deleteRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve Global Option Set definitions.\r\n     * \r\n     * @param {string} globalOptionSetKey - The Global Option Set MetadataID or Alternate Key (such as Name).\r\n     * @param {string} [castType] - Use this parameter to cast a Global Option Set to a specific type.\r\n     * @param {Array} [select] - Use the $select system query option to limit the properties returned\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveGlobalOptionSet = function (globalOptionSetKey, castType, select) {\r\n        ErrorHelper.keyParameterCheck(globalOptionSetKey, 'DynamicsWebApi.retrieveGlobalOptionSet', 'globalOptionSetKey');\r\n\r\n        var request = {\r\n            collection: 'GlobalOptionSetDefinitions',\r\n            key: globalOptionSetKey,\r\n            navigationProperty: castType,\r\n            select: select\r\n        };\r\n\r\n        return this.retrieveRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve Global Option Set definitions.\r\n     * \r\n     * @param {string} [castType] - Use this parameter to cast a Global Option Set to a specific type.\r\n     * @param {Array} [select] - Use the $select system query option to limit the properties returned\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.retrieveGlobalOptionSets = function (castType, select) {\r\n\r\n        var request = {\r\n            collection: 'GlobalOptionSetDefinitions',\r\n            navigationProperty: castType,\r\n            select: select\r\n        };\r\n\r\n        return this.retrieveMultipleRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Starts a batch request.\r\n     * \r\n     */\r\n    this.startBatch = function () {\r\n        _isBatch = true;\r\n    };\r\n\r\n    /**\r\n     * Executes a batch request. Please call DynamicsWebApi.startBatch() first to start a batch request.\r\n     * @returns {Promise} D365 Web Api result\r\n     */\r\n    this.executeBatch = function () {\r\n        ErrorHelper.batchNotStarted(_isBatch);\r\n\r\n        _isBatch = false;\r\n        return _makeRequest('POST', { collection: '$batch' }, 'executeBatch')\r\n            .then(function (response) {\r\n                return response.data;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Creates a new instance of DynamicsWebApi\r\n     *\r\n     * @param {DWAConfig} [config] - configuration object.\r\n     * @returns {DynamicsWebApi} The new instance of a DynamicsWebApi\r\n     */\r\n    this.initializeInstance = function (config) {\r\n        if (!config) {\r\n            config = _internalConfig;\r\n        }\r\n\r\n        return new DynamicsWebApi(config);\r\n    };\r\n}\r\n\r\n/**\r\n * DynamicsWebApi Utility helper class\r\n * @typicalname dynamicsWebApi.utility\r\n */\r\nDynamicsWebApi.prototype.utility = {\r\n    /**\r\n     * Searches for a collection name by provided entity name in a cached entity metadata.\r\n     * The returned collection name can be null.\r\n     *\r\n     * @param {string} entityName - entity name\r\n     * @returns {string} a collection name\r\n     */\r\n    getCollectionName: Request.getCollectionName\r\n};\r\n\r\n/**\r\n * Microsoft Dynamics CRM Web API helper library written in JavaScript.\r\n * It is compatible with: Dynamics 365 (online), Dynamics 365 (on-premise), Dynamics CRM 2016, Dynamics CRM Online.\r\n * @module dynamics-web-api\r\n * @typicalname dynamicsWebApi\r\n */\r\nmodule.exports = DynamicsWebApi;","/**\r\n * Builds parametes for a funciton. Returns '()' (if no parameters) or '([params])?[query]'\r\n *\r\n * @param {Object} [parameters] - Function's input parameters. Example: { param1: \"test\", param2: 3 }.\r\n * @returns {string} - Function parameter result\r\n */\r\nmodule.exports = function buildFunctionParameters(parameters) {\r\n    if (parameters) {\r\n        var parameterNames = Object.keys(parameters);\r\n        var functionParameters = \"\";\r\n        var urlQuery = \"\";\r\n\r\n        for (var i = 1; i <= parameterNames.length; i++) {\r\n            var parameterName = parameterNames[i - 1];\r\n            var value = parameters[parameterName];\r\n\r\n            if (value === null)\r\n                continue;\r\n\r\n            if (typeof value === \"string\" && !value.startsWith(\"Microsoft.Dynamics.CRM\")) {\r\n                value = \"'\" + value + \"'\";\r\n            }\r\n            //fix #45\r\n            else if (typeof value === \"object\") {\r\n                value = JSON.stringify(value);\r\n            }\r\n\r\n            if (i > 1) {\r\n                functionParameters += \",\";\r\n                urlQuery += \"&\";\r\n            }\r\n\r\n            functionParameters += parameterName + \"=@p\" + i;\r\n            urlQuery += \"@p\" + i + \"=\" + value;\r\n        }\r\n\r\n        return \"(\" + functionParameters + \")?\" + urlQuery;\r\n    }\r\n    else {\r\n        return \"()\";\r\n    }\r\n};","/**\r\n * Parses a paging cookie returned in response\r\n *\r\n * @param {string} pageCookies - Page cookies returned in @Microsoft.Dynamics.CRM.fetchxmlpagingcookie.\r\n * @param {number} currentPageNumber - A current page number. Fix empty paging-cookie for complex fetch xmls.\r\n * @returns {{cookie: \"\", number: 0, next: 1}}\r\n */\r\nmodule.exports = function getFetchXmlPagingCookie(pageCookies, currentPageNumber) {\r\n    pageCookies = pageCookies ? pageCookies : \"\";\r\n    currentPageNumber = currentPageNumber ? currentPageNumber : 1;\r\n\r\n    //get the page cokies\r\n    pageCookies = unescape(unescape(pageCookies));\r\n\r\n    var info = /pagingcookie=\"(<cookie page=\"(\\d+)\".+<\\/cookie>)/.exec(pageCookies);\r\n\r\n    if (info != null) {\r\n        var page = parseInt(info[2]);\r\n        return {\r\n            cookie: info[1].replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\\"/g, '\\'').replace(/\\'/g, '&' + 'quot;'),\r\n            page: page,\r\n            nextPage: page + 1\r\n        };\r\n    } else {\r\n        //http://stackoverflow.com/questions/41262772/execution-of-fetch-xml-using-web-api-dynamics-365 workaround\r\n        return {\r\n            cookie: \"\",\r\n            page: currentPageNumber,\r\n            nextPage: currentPageNumber + 1\r\n        };\r\n    }\r\n};","/**\r\n * @typedef {Object} ReferenceObject\r\n * @property {string} id Id of the Entity record\r\n * @property {string} collection Collection name that the record belongs to\r\n * @property {string} oDataContext OData context returned in the response\r\n */\r\n\r\n/**\r\n * Converts a response to a reference object\r\n *\r\n * @param {Object} responseData - Response object\r\n * @returns {ReferenceObject} reference object\r\n */\r\nmodule.exports = function convertToReferenceObject(responseData) {\r\n    var result = /\\/(\\w+)\\(([0-9A-F]{8}[-]?([0-9A-F]{4}[-]?){3}[0-9A-F]{12})/i.exec(responseData[\"@odata.id\"]);\r\n    return { id: result[2], collection: result[1], oDataContext: responseData[\"@odata.context\"] };\r\n};","var Utility = require('../utilities/Utility');\r\nvar RequestConverter = require('../utilities/RequestConverter');\r\nvar BatchConverter = require('../utilities/BatchConverter');\r\n\r\nvar _entityNames;\r\n\r\n/**\r\n * Searches for a collection name by provided entity name in a cached entity metadata.\r\n * The returned collection name can be null.\r\n *\r\n * @param {string} entityName - entity name\r\n * @returns {string} - a collection name\r\n */\r\nfunction findCollectionName(entityName) {\r\n    var xrmInternal = Utility.getXrmInternal();\r\n\r\n    if (!Utility.isNull(xrmInternal) && typeof xrmInternal.getEntitySetName === \"function\") {\r\n        return xrmInternal.getEntitySetName(entityName) || entityName;\r\n    }\r\n\r\n    var collectionName = null;\r\n\r\n    if (!Utility.isNull(_entityNames)) {\r\n        collectionName = _entityNames[entityName];\r\n        if (Utility.isNull(collectionName)) {\r\n            for (var key in _entityNames) {\r\n                if (_entityNames[key] === entityName) {\r\n                    return entityName;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return collectionName;\r\n}\r\n\r\nfunction setStandardHeaders(additionalHeaders) {\r\n    additionalHeaders[\"Accept\"] = \"application/json\";\r\n    additionalHeaders[\"OData-MaxVersion\"] = \"4.0\";\r\n    additionalHeaders[\"OData-Version\"] = \"4.0\";\r\n    additionalHeaders['Content-Type'] = 'application/json; charset=utf-8';\r\n\r\n    return additionalHeaders;\r\n}\r\n\r\nfunction stringifyData(data, config) {\r\n    var stringifiedData;\r\n    if (data) {\r\n        stringifiedData = JSON.stringify(data, function (key, value) {\r\n            /// <param name=\"key\" type=\"String\">Description</param>\r\n            if (key.endsWith('@odata.bind') || key.endsWith('@odata.id')) {\r\n                if (typeof value === 'string' && !value.startsWith('$')) {\r\n                    //remove brackets in guid\r\n                    if (/\\(\\{[\\w\\d-]+\\}\\)/g.test(value)) {\r\n                        value = value.replace(/(.+)\\(\\{([\\w\\d-]+)\\}\\)/g, '$1($2)');\r\n                    }\r\n\r\n                    if (config.useEntityNames) {\r\n                        //replace entity name with collection name\r\n                        var regularExpression = /([\\w_]+)(\\([\\d\\w-]+\\))$/;\r\n                        var valueParts = regularExpression.exec(value);\r\n                        if (valueParts.length > 2) {\r\n                            var collectionName = findCollectionName(valueParts[1]);\r\n\r\n                            if (!Utility.isNull(collectionName)) {\r\n                                value = value.replace(regularExpression, collectionName + '$2');\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!value.startsWith(config.webApiUrl)) {\r\n                        //add full web api url if it's not set\r\n                        if (key.endsWith('@odata.bind')) {\r\n                            if (!value.startsWith('/')) {\r\n                                value = '/' + value;\r\n                            }\r\n                        }\r\n                        else {\r\n                            value = config.webApiUrl + value.replace(/^\\//, '');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else\r\n                if (key.startsWith('oData') ||\r\n                    key.endsWith('_Formatted') ||\r\n                    key.endsWith('_NavigationProperty') ||\r\n                    key.endsWith('_LogicalName')) {\r\n                    value = undefined;\r\n                }\r\n\r\n            return value;\r\n        });\r\n\r\n        stringifiedData = stringifiedData.replace(/[\\u007F-\\uFFFF]/g, function (chr) {\r\n            return \"\\\\u\" + (\"0000\" + chr.charCodeAt(0).toString(16)).substr(-4);\r\n        });\r\n    }\r\n\r\n    return stringifiedData;\r\n}\r\n\r\nvar batchRequestCollection = [];\r\nvar responseParseParams = [];\r\n\r\n/**\r\n * Sends a request to given URL with given parameters\r\n *\r\n * @param {string} method - Method of the request.\r\n * @param {string} path - Request path.\r\n * @param {Object} config - DynamicsWebApi config.\r\n * @param {Object} [data] - Data to send in the request.\r\n * @param {Object} [additionalHeaders] - Object with additional headers. IMPORTANT! This object does not contain default headers needed for every request.\r\n * @param {any} [responseParams] - parameters for parsing the response\r\n * @param {Function} successCallback - A callback called on success of the request.\r\n * @param {Function} errorCallback - A callback called when a request failed.\r\n * @param {boolean} [isBatch] - Indicates whether the request is a Batch request or not. Default: false\r\n * @param {boolean} [isAsync] - Indicates whether the request should be made synchronously or asynchronously.\r\n */\r\nfunction sendRequest(method, path, config, data, additionalHeaders, responseParams, successCallback, errorCallback, isBatch, isAsync) {\r\n\r\n    additionalHeaders = additionalHeaders || {};\r\n    responseParams = responseParams || {};\r\n\r\n    //add response parameters to parse\r\n    responseParseParams.push(responseParams);\r\n\r\n    //stringify passed data\r\n    var stringifiedData = stringifyData(data, config);\r\n\r\n    if (isBatch) {\r\n        batchRequestCollection.push({\r\n            method: method, path: path, config: config, data: stringifiedData, headers: additionalHeaders\r\n        });\r\n        return;\r\n    }\r\n\r\n    if (path === '$batch') {\r\n        var batchResult = BatchConverter.convertToBatch(batchRequestCollection);\r\n\r\n        stringifiedData = batchResult.body;\r\n\r\n        //clear an array of requests\r\n        batchRequestCollection.length = 0;\r\n\r\n        additionalHeaders = setStandardHeaders(additionalHeaders);\r\n        additionalHeaders['Content-Type'] = 'multipart/mixed;boundary=' + batchResult.boundary;\r\n    }\r\n    else {\r\n        additionalHeaders = setStandardHeaders(additionalHeaders);\r\n    }\r\n\r\n    responseParams.convertedToBatch = false;\r\n\r\n    //if the URL contains more characters than max possible limit, convert the request to a batch request\r\n    if (path.length > 2000) {\r\n        var batchBoundary = 'dwa_batch_' + Utility.generateUUID();\r\n\r\n        var batchBody = [];\r\n        batchBody.push('--' + batchBoundary);\r\n        batchBody.push('Content-Type: application/http');\r\n        batchBody.push('Content-Transfer-Encoding: binary\\n');\r\n        batchBody.push(method + ' ' + config.webApiUrl + path + ' HTTP/1.1');\r\n\r\n        for (var key in additionalHeaders) {\r\n            if (key === 'Authorization')\r\n                continue;\r\n\r\n            batchBody.push(key + ': ' + additionalHeaders[key]);\r\n\r\n            //authorization header is an exception. bug #27\r\n            delete additionalHeaders[key];\r\n        }\r\n\r\n        batchBody.push('\\n--' + batchBoundary + '--');\r\n\r\n        stringifiedData = batchBody.join('\\n');\r\n\r\n        additionalHeaders = setStandardHeaders(additionalHeaders);\r\n        additionalHeaders['Content-Type'] = 'multipart/mixed;boundary=' + batchBoundary;\r\n        path = '$batch';\r\n        method = 'POST';\r\n\r\n        responseParams.convertedToBatch = true;\r\n    }\r\n\r\n    if (config.impersonate && !additionalHeaders['MSCRMCallerID']) {\r\n        additionalHeaders['MSCRMCallerID'] = config.impersonate;\r\n    }\r\n\r\n    var executeRequest;\r\n    /* develblock:start */\r\n    if (typeof XMLHttpRequest !== 'undefined') {\r\n        /* develblock:end */\r\n        executeRequest = require('./xhr');\r\n        /* develblock:start */\r\n    }\r\n    else if (typeof process !== 'undefined') {\r\n        executeRequest = require('./http');\r\n    }\r\n    /* develblock:end */\r\n\r\n    var sendInternalRequest = function (token) {\r\n        if (token) {\r\n            if (!additionalHeaders) {\r\n                additionalHeaders = {};\r\n            }\r\n            additionalHeaders['Authorization'] = 'Bearer ' +\r\n                (token.hasOwnProperty('accessToken') ?\r\n                    token.accessToken :\r\n                    token);\r\n        }\r\n\r\n        executeRequest({\r\n            method: method,\r\n            uri: config.webApiUrl + path,\r\n            data: stringifiedData,\r\n            additionalHeaders: additionalHeaders,\r\n            responseParams: responseParseParams,\r\n            successCallback: successCallback,\r\n            errorCallback: errorCallback,\r\n            isAsync: isAsync,\r\n            timeout: config.timeout\r\n        });\r\n    };\r\n\r\n    //call a token refresh callback only if it is set and there is no \"Authorization\" header set yet\r\n    if (config.onTokenRefresh && (!additionalHeaders || (additionalHeaders && !additionalHeaders['Authorization']))) {\r\n        config.onTokenRefresh(sendInternalRequest);\r\n    }\r\n    else {\r\n        sendInternalRequest();\r\n    }\r\n}\r\n\r\nfunction _getEntityNames(entityName, config, successCallback, errorCallback) {\r\n\r\n    var xrmUtility = Utility.getXrmUtility();\r\n\r\n    //try using Xrm.Utility.getEntityMetadata first (because D365 caches metadata)\r\n    if (!Utility.isNull(xrmUtility) && typeof xrmUtility.getEntityMetadata === \"function\") {\r\n        xrmUtility.getEntityMetadata(entityName, []).then(function (response) {\r\n            if (!response)\r\n                successCallback(entityName);\r\n            else\r\n                successCallback(response.EntitySetName);\r\n        }, errorCallback);\r\n    }\r\n    else {\r\n        //make a web api call for Node.js apps\r\n        var resolve = function (result) {\r\n            _entityNames = {};\r\n            for (var i = 0; i < result.data.value.length; i++) {\r\n                _entityNames[result.data.value[i].LogicalName] = result.data.value[i].EntitySetName;\r\n            }\r\n\r\n            successCallback(findCollectionName(entityName));\r\n        };\r\n\r\n        var reject = function (error) {\r\n            errorCallback({ message: 'Unable to fetch EntityDefinitions. Error: ' + error.message });\r\n        };\r\n\r\n        var request = RequestConverter.convertRequest({\r\n            collection: 'EntityDefinitions',\r\n            select: ['EntitySetName', 'LogicalName'],\r\n            noCache: true\r\n        }, 'retrieveMultiple', config);\r\n\r\n        sendRequest('GET', request.url, config, null, request.headers, null, resolve, reject, false, request.async);\r\n    }\r\n}\r\n\r\nfunction _isEntityNameException(entityName) {\r\n    var exceptions = [\r\n        'EntityDefinitions', '$metadata', 'RelationshipDefinitions',\r\n        'GlobalOptionSetDefinitions', 'ManagedPropertyDefinitions'];\r\n\r\n    return exceptions.indexOf(entityName) > -1;\r\n}\r\n\r\nfunction _getCollectionName(entityName, config, successCallback, errorCallback) {\r\n\r\n    if (_isEntityNameException(entityName) || Utility.isNull(entityName)) {\r\n        successCallback(entityName);\r\n        return;\r\n    }\r\n\r\n    entityName = entityName.toLowerCase();\r\n\r\n    if (!config.useEntityNames) {\r\n        successCallback(entityName);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        var collectionName = findCollectionName(entityName);\r\n\r\n        if (Utility.isNull(collectionName)) {\r\n            _getEntityNames(entityName, config, successCallback, errorCallback);\r\n        }\r\n        else {\r\n            successCallback(collectionName);\r\n        }\r\n    }\r\n    catch (error) {\r\n        errorCallback({ message: 'Unable to fetch Collection Names. Error: ' + error.message });\r\n    }\r\n}\r\n\r\nfunction makeRequest(method, request, functionName, config, responseParams, resolve, reject) {\r\n    var successCallback = function (collectionName) {\r\n        request.collection = collectionName;\r\n        var result = RequestConverter.convertRequest(request, functionName, config);\r\n        sendRequest(method, result.url, config, request.data || request.entity, result.headers, responseParams, resolve, reject, request.isBatch, result.async);\r\n    };\r\n    _getCollectionName(request.collection, config, successCallback, reject);\r\n}\r\n\r\nmodule.exports = {\r\n    sendRequest: sendRequest,\r\n    makeRequest: makeRequest,\r\n    getCollectionName: findCollectionName,\r\n    /* develblock:start */\r\n    _clearEntityNames: function () { _entityNames = null; }\r\n    /* develblock:end */\r\n};\r\n","var DWA = require('../dwa');\r\nvar ErrorHelper = require('../helpers/ErrorHelper');\r\nvar buildPreferHeader = require('./buildPreferHeader');\r\n\r\n/**\r\n * @typedef {Object} ConvertedRequestOptions\r\n * @property {string} url URL (without query)\r\n * @property {string} query Query String\r\n * @property {Object} headers Heades object (always an Object; can be empty: {})\r\n */\r\n\r\n/**\r\n * @typedef {Object} ConvertedRequest\r\n * @property {string} url URL (including Query String)\r\n * @property {Object} headers Heades object (always an Object; can be empty: {})\r\n * @property {boolean} async\r\n */\r\n\r\n/**\r\n * Converts optional parameters of the request to URL. If expand parameter exists this function is called recursively.\r\n *\r\n * @param {Object} request - Request object\r\n * @param {string} functionName - Name of the function that converts a request (for Error Handling)\r\n * @param {string} url - URL beginning (with required parameters)\r\n * @param {string} [joinSymbol] - URL beginning (with required parameters)\r\n * @param {Object} [config] - DynamicsWebApi config\r\n * @returns {ConvertedRequestOptions} Additional options in request\r\n */\r\nfunction convertRequestOptions(request, functionName, url, joinSymbol, config) {\r\n    var headers = {};\r\n    var requestArray = [];\r\n    joinSymbol = joinSymbol != null ? joinSymbol : '&';\r\n\r\n    if (request) {\r\n        if (request.navigationProperty) {\r\n            ErrorHelper.stringParameterCheck(request.navigationProperty, 'DynamicsWebApi.' + functionName, 'request.navigationProperty');\r\n            url += '/' + request.navigationProperty;\r\n\r\n            if (request.navigationPropertyKey) {\r\n                var navigationKey = ErrorHelper.keyParameterCheck(request.navigationPropertyKey, 'DynamicsWebApi.' + functionName, 'request.navigationPropertyKey');\r\n                url += '(' + navigationKey + ')';\r\n            }\r\n\r\n            if (request.navigationProperty === 'Attributes') {\r\n                if (request.metadataAttributeType) {\r\n                    ErrorHelper.stringParameterCheck(request.metadataAttributeType, 'DynamicsWebApi.' + functionName, 'request.metadataAttributeType');\r\n                    url += '/' + request.metadataAttributeType;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (request.select != null && request.select.length) {\r\n            ErrorHelper.arrayParameterCheck(request.select, 'DynamicsWebApi.' + functionName, 'request.select');\r\n\r\n            if (functionName == 'retrieve' && request.select.length == 1 && request.select[0].endsWith('/$ref')) {\r\n                url += '/' + request.select[0];\r\n            }\r\n            else {\r\n                if (request.select[0].startsWith('/') && functionName == 'retrieve') {\r\n                    if (request.navigationProperty == null) {\r\n                        url += request.select.shift();\r\n                    }\r\n                    else {\r\n                        request.select.shift();\r\n                    }\r\n                }\r\n\r\n                //check if anything left in the array\r\n                if (request.select.length) {\r\n                    requestArray.push('$select=' + request.select.join(','));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (request.filter) {\r\n            ErrorHelper.stringParameterCheck(request.filter, 'DynamicsWebApi.' + functionName, \"request.filter\");\r\n            var removeBracketsFromGuidReg = /[^\"']{([\\w\\d]{8}[-]?(?:[\\w\\d]{4}[-]?){3}[\\w\\d]{12})}(?:[^\"']|$)/g;\r\n            var filterResult = request.filter;\r\n\r\n            //fix bug 2018-06-11\r\n            while ((m = removeBracketsFromGuidReg.exec(filterResult)) !== null) {\r\n                if (m.index === removeBracketsFromGuidReg.lastIndex) {\r\n                    regex.lastIndex++;\r\n                }\r\n\r\n                var replacement = m[0].endsWith(')') ? ')' : ' ';\r\n                filterResult = filterResult.replace(m[0], ' ' + m[1] + replacement);\r\n            }\r\n\r\n            requestArray.push(\"$filter=\" + encodeURIComponent(filterResult));\r\n        }\r\n\r\n        if (request.savedQuery) {\r\n            requestArray.push(\"savedQuery=\" + ErrorHelper.guidParameterCheck(request.savedQuery, 'DynamicsWebApi.' + functionName, \"request.savedQuery\"));\r\n        }\r\n\r\n        if (request.userQuery) {\r\n            requestArray.push(\"userQuery=\" + ErrorHelper.guidParameterCheck(request.userQuery, 'DynamicsWebApi.' + functionName, \"request.userQuery\"));\r\n        }\r\n\r\n        if (request.count) {\r\n            ErrorHelper.boolParameterCheck(request.count, 'DynamicsWebApi.' + functionName, \"request.count\");\r\n            requestArray.push(\"$count=\" + request.count);\r\n        }\r\n\r\n        if (request.top && request.top > 0) {\r\n            ErrorHelper.numberParameterCheck(request.top, 'DynamicsWebApi.' + functionName, \"request.top\");\r\n            requestArray.push(\"$top=\" + request.top);\r\n        }\r\n\r\n        if (request.orderBy != null && request.orderBy.length) {\r\n            ErrorHelper.arrayParameterCheck(request.orderBy, 'DynamicsWebApi.' + functionName, \"request.orderBy\");\r\n            requestArray.push(\"$orderby=\" + request.orderBy.join(','));\r\n        }\r\n\r\n        var prefer = buildPreferHeader(request, functionName, config);\r\n\r\n        if (prefer.length) {\r\n            headers['Prefer'] = prefer;\r\n        }\r\n\r\n        if (request.ifmatch != null && request.ifnonematch != null) {\r\n            throw new Error('DynamicsWebApi.' + functionName + \". Either one of request.ifmatch or request.ifnonematch parameters should be used in a call, not both.\");\r\n        }\r\n\r\n        if (request.ifmatch) {\r\n            ErrorHelper.stringParameterCheck(request.ifmatch, 'DynamicsWebApi.' + functionName, \"request.ifmatch\");\r\n            headers['If-Match'] = request.ifmatch;\r\n        }\r\n\r\n        if (request.ifnonematch) {\r\n            ErrorHelper.stringParameterCheck(request.ifnonematch, 'DynamicsWebApi.' + functionName, \"request.ifnonematch\");\r\n            headers['If-None-Match'] = request.ifnonematch;\r\n        }\r\n\r\n        if (request.impersonate) {\r\n            ErrorHelper.stringParameterCheck(request.impersonate, 'DynamicsWebApi.' + functionName, \"request.impersonate\");\r\n            headers['MSCRMCallerID'] = ErrorHelper.guidParameterCheck(request.impersonate, 'DynamicsWebApi.' + functionName, \"request.impersonate\");\r\n        }\r\n\r\n        if (request.token) {\r\n            ErrorHelper.stringParameterCheck(request.token, 'DynamicsWebApi.' + functionName, \"request.token\");\r\n            headers['Authorization'] = 'Bearer ' + request.token;\r\n        }\r\n\r\n        if (request.duplicateDetection) {\r\n            ErrorHelper.boolParameterCheck(request.duplicateDetection, 'DynamicsWebApi.' + functionName, 'request.duplicateDetection');\r\n            headers['MSCRM.SuppressDuplicateDetection'] = 'false';\r\n        }\r\n\r\n        if (request.entity) {\r\n            ErrorHelper.parameterCheck(request.entity, 'DynamicsWebApi.' + functionName, 'request.entity');\r\n        }\r\n\r\n        if (request.data) {\r\n            ErrorHelper.parameterCheck(request.data, 'DynamicsWebApi.' + functionName, 'request.data');\r\n        }\r\n\r\n        if (request.noCache) {\r\n            ErrorHelper.boolParameterCheck(request.noCache, 'DynamicsWebApi.' + functionName, 'request.noCache');\r\n            headers['Cache-Control'] = 'no-cache';\r\n        }\r\n\r\n        if (request.mergeLabels) {\r\n            ErrorHelper.boolParameterCheck(request.mergeLabels, 'DynamicsWebApi.' + functionName, 'request.mergeLabels');\r\n            headers['MSCRM.MergeLabels'] = 'true';\r\n        }\r\n\r\n        if (request.contentId) {\r\n            ErrorHelper.stringParameterCheck(request.contentId, 'DynamicsWebApi.' + functionName, 'request.contentId');\r\n            if (!request.contentId.startsWith('$')) {\r\n                headers['Content-ID'] = request.contentId;\r\n            }\r\n        }\r\n\r\n        if (request.isBatch) {\r\n            ErrorHelper.boolParameterCheck(request.isBatch, 'DynamicsWebApi.' + functionName, 'request.isBatch');\r\n        }\r\n\r\n        if (request.expand && request.expand.length) {\r\n            ErrorHelper.stringOrArrayParameterCheck(request.expand, 'DynamicsWebApi.' + functionName, \"request.expand\");\r\n            if (typeof request.expand === 'string') {\r\n                requestArray.push('$expand=' + request.expand);\r\n            }\r\n            else {\r\n                var expandRequestArray = [];\r\n                for (var i = 0; i < request.expand.length; i++) {\r\n                    if (request.expand[i].property) {\r\n                        var expandConverted = convertRequestOptions(request.expand[i], functionName + \" $expand\", null, \";\");\r\n                        var expandQuery = expandConverted.query;\r\n                        if (expandQuery && expandQuery.length) {\r\n                            expandQuery = \"(\" + expandQuery + \")\";\r\n                        }\r\n                        expandRequestArray.push(request.expand[i].property + expandQuery);\r\n                    }\r\n                }\r\n                if (expandRequestArray.length) {\r\n                    requestArray.push(\"$expand=\" + expandRequestArray.join(\",\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return { url: url, query: requestArray.join(joinSymbol), headers: headers };\r\n}\r\n\r\n/**\r\n * Converts a request object to URL link\r\n *\r\n * @param {Object} request - Request object\r\n * @param {string} [functionName] - Name of the function that converts a request (for Error Handling only)\r\n * @param {Object} [config] - DynamicsWebApi config\r\n * @returns {ConvertedRequest} Converted request\r\n */\r\nfunction convertRequest(request, functionName, config) {\r\n    var url = '';\r\n    var result;\r\n    if (!request.url) {\r\n        if (!request._unboundRequest && !request.collection) {\r\n            ErrorHelper.parameterCheck(request.collection, 'DynamicsWebApi.' + functionName, \"request.collection\");\r\n        }\r\n        if (request.collection) {\r\n            ErrorHelper.stringParameterCheck(request.collection, 'DynamicsWebApi.' + functionName, \"request.collection\");\r\n            url = request.collection;\r\n\r\n            if (request.contentId) {\r\n                ErrorHelper.stringParameterCheck(request.contentId, 'DynamicsWebApi.' + functionName, 'request.contentId');\r\n                if (request.contentId.startsWith('$')) {\r\n                    url = request.contentId + '/' + url;\r\n                }\r\n            }\r\n\r\n            //add alternate key feature\r\n            if (request.key) {\r\n                request.key = ErrorHelper.keyParameterCheck(request.key, 'DynamicsWebApi.' + functionName, \"request.key\");\r\n            }\r\n            else if (request.id) {\r\n                request.key = ErrorHelper.guidParameterCheck(request.id, 'DynamicsWebApi.' + functionName, \"request.id\");\r\n            }\r\n\r\n            if (request.key) {\r\n                url += \"(\" + request.key + \")\";\r\n            }\r\n        }\r\n\r\n        if (request._additionalUrl) {\r\n            if (url) {\r\n                url += '/';\r\n            }\r\n            url += request._additionalUrl;\r\n        }\r\n\r\n        result = convertRequestOptions(request, functionName, url, '&', config);\r\n        if (request.fetchXml) {\r\n            ErrorHelper.stringParameterCheck(request.fetchXml, 'DynamicsWebApi.' + functionName, \"request.fetchXml\");\r\n            result.url += \"?fetchXml=\" + encodeURIComponent(request.fetchXml);\r\n        }\r\n        else\r\n            if (result.query) {\r\n                result.url += \"?\" + result.query;\r\n            }\r\n    }\r\n    else {\r\n        ErrorHelper.stringParameterCheck(request.url, 'DynamicsWebApi.' + functionName, \"request.url\");\r\n        url = request.url.replace(config.webApiUrl, '');\r\n        result = convertRequestOptions(request, functionName, url, '&', config);\r\n    }\r\n\r\n    if (request.hasOwnProperty('async') && request.async != null) {\r\n        ErrorHelper.boolParameterCheck(request.async, 'DynamicsWebApi.' + functionName, \"request.async\");\r\n        result.async = request.async;\r\n    }\r\n    else {\r\n        result.async = true;\r\n    }\r\n\r\n    return { url: result.url, headers: result.headers, async: result.async };\r\n}\r\n\r\nvar RequestConverter = {\r\n    convertRequestOptions: convertRequestOptions,\r\n    convertRequest: convertRequest\r\n};\r\n\r\nmodule.exports = RequestConverter;","var DWA = require('../dwa');\r\nvar ErrorHelper = require('../helpers/ErrorHelper');\r\n\r\n/**\r\n * Builds a Prefer header value\r\n * @param {Object} request Request object\r\n * @param {string} functionName name of the current function\r\n * @param {Object} config DynamicsWebApi config\r\n * @returns {string}\r\n */\r\nmodule.exports = function buildPreferHeader(request, functionName, config) {\r\n    var returnRepresentation = request.returnRepresentation;\r\n    var includeAnnotations = request.includeAnnotations;\r\n    var maxPageSize = request.maxPageSize;\r\n    var trackChanges = request.trackChanges;\r\n\r\n    var prefer;\r\n\r\n    if (request.prefer && request.prefer.length) {\r\n        ErrorHelper.stringOrArrayParameterCheck(request.prefer, \"DynamicsWebApi.\" + functionName, \"request.prefer\");\r\n        prefer = request.prefer;\r\n        if (typeof prefer === \"string\") {\r\n            prefer = prefer.split(',');\r\n        }\r\n        for (var i in prefer) {\r\n            var item = prefer[i].trim();\r\n            if (item === DWA.Prefer.ReturnRepresentation) {\r\n                returnRepresentation = true;\r\n            }\r\n            else if (item.indexOf(\"odata.include-annotations=\") > -1) {\r\n                includeAnnotations = item.replace('odata.include-annotations=', '').replace(/\"/g, '');\r\n            }\r\n            else if (item.startsWith(\"odata.maxpagesize=\")) {\r\n                maxPageSize = item.replace('odata.maxpagesize=', '').replace(/\"/g, '');\r\n            }\r\n            else if (item.indexOf(\"odata.track-changes\") > -1) {\r\n                trackChanges = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    prefer = [];\r\n\r\n    if (config) {\r\n        if (returnRepresentation == null) {\r\n            returnRepresentation = config.returnRepresentation;\r\n        }\r\n        includeAnnotations = includeAnnotations ? includeAnnotations : config.includeAnnotations;\r\n        maxPageSize = maxPageSize ? maxPageSize : config.maxPageSize;\r\n    }\r\n\r\n    if (returnRepresentation) {\r\n        ErrorHelper.boolParameterCheck(returnRepresentation, \"DynamicsWebApi.\" + functionName, \"request.returnRepresentation\");\r\n        prefer.push(DWA.Prefer.ReturnRepresentation);\r\n    }\r\n\r\n    if (includeAnnotations) {\r\n        ErrorHelper.stringParameterCheck(includeAnnotations, \"DynamicsWebApi.\" + functionName, \"request.includeAnnotations\");\r\n        prefer.push('odata.include-annotations=\"' + includeAnnotations + '\"');\r\n    }\r\n\r\n    if (maxPageSize && maxPageSize > 0) {\r\n        ErrorHelper.numberParameterCheck(maxPageSize, \"DynamicsWebApi.\" + functionName, \"request.maxPageSize\");\r\n        prefer.push('odata.maxpagesize=' + maxPageSize);\r\n    }\r\n\r\n    if (trackChanges) {\r\n        ErrorHelper.boolParameterCheck(trackChanges, \"DynamicsWebApi.\" + functionName, \"request.trackChanges\");\r\n        prefer.push('odata.track-changes');\r\n    }\r\n\r\n    return prefer.join(',');\r\n}","var Utility = require('../utilities/Utility');\r\n\r\n/**\r\n * \r\n * @param {Array} requests - array of requests\r\n * @returns {any} batch request\r\n */\r\nvar convertToBatch = function (requests) {\r\n    var batchBoundary = 'dwa_batch_' + Utility.generateUUID();\r\n\r\n    var batchBody = [];\r\n    var currentChangeSet = null;\r\n    var contentId = 100000;\r\n\r\n    for (var i = 0; i < requests.length; i++) {\r\n        var request = requests[i];\r\n        var isGet = request.method === 'GET';\r\n\r\n        if (isGet && currentChangeSet) {\r\n            //end current change set\r\n            batchBody.push('\\n--' + currentChangeSet + '--');\r\n\r\n            currentChangeSet = null;\r\n            contentId = 100000;\r\n        }\r\n\r\n        if (!currentChangeSet) {\r\n            batchBody.push('\\n--' + batchBoundary);\r\n\r\n            if (!isGet) {\r\n                currentChangeSet = 'changeset_' + Utility.generateUUID();\r\n                batchBody.push('Content-Type: multipart/mixed;boundary=' + currentChangeSet);\r\n            }\r\n        }\r\n\r\n        if (!isGet) {\r\n            batchBody.push('\\n--' + currentChangeSet);\r\n        }\r\n\r\n        batchBody.push('Content-Type: application/http');\r\n        batchBody.push('Content-Transfer-Encoding: binary');\r\n\r\n        if (!isGet) {\r\n            var contentIdValue = request.headers.hasOwnProperty('Content-ID')\r\n                ? request.headers['Content-ID']\r\n                : ++contentId;\r\n\r\n            batchBody.push('Content-ID: ' + contentIdValue);\r\n        }\r\n\r\n        if (!request.path.startsWith(\"$\")) {\r\n            batchBody.push('\\n' + request.method + ' ' + request.config.webApiUrl + request.path + ' HTTP/1.1');\r\n        }\r\n        else {\r\n            batchBody.push('\\n' + request.method + ' ' + request.path + ' HTTP/1.1');\r\n        }\r\n\r\n        if (isGet) {\r\n            batchBody.push('Accept: application/json');\r\n        }\r\n        else {\r\n            batchBody.push('Content-Type: application/json');\r\n        }\r\n\r\n        for (var key in request.headers) {\r\n            if (key === 'Authorization' || key === 'Content-ID')\r\n                continue;\r\n\r\n            batchBody.push(key + ': ' + request.headers[key]);\r\n        }\r\n\r\n        if (!isGet && request.data && request.data.length) {\r\n            batchBody.push('\\n' + request.data);\r\n        }\r\n    }\r\n\r\n    if (currentChangeSet) {\r\n        batchBody.push('\\n--' + currentChangeSet + '--');\r\n    }\r\n\r\n    batchBody.push('\\n--' + batchBoundary + '--');\r\n\r\n    return { boundary: batchBoundary, body: batchBody.join('\\n') };\r\n};\r\n\r\nvar BatchConverter = {\r\n    convertToBatch: convertToBatch\r\n};\r\n\r\nmodule.exports = BatchConverter;","var DWA = require('../../dwa');\r\nvar Utility = require('../../utilities/Utility');\r\nvar ErrorHelper = require('../../helpers/ErrorHelper');\r\nvar dateReviver = require('./dateReviver');\r\n\r\n//string es6 polyfill\r\nif (!String.prototype.endsWith || !String.prototype.startsWith) {\r\n    require(\"../../polyfills/string-es6\");\r\n}\r\n\r\nfunction getFormattedKeyValue(keyName, value) {\r\n    var newKey = null;\r\n    if (keyName.indexOf('@') !== -1) {\r\n        var format = keyName.split('@');\r\n        switch (format[1]) {\r\n            case 'odata.context':\r\n                newKey = 'oDataContext';\r\n                break;\r\n            case 'odata.count':\r\n                newKey = 'oDataCount';\r\n                value = value != null\r\n                    ? parseInt(value)\r\n                    : 0;\r\n                break;\r\n            case 'odata.nextLink':\r\n                newKey = 'oDataNextLink';\r\n                break;\r\n            case 'odata.deltaLink':\r\n                newKey = 'oDataDeltaLink';\r\n                break;\r\n            case DWA.Prefer.Annotations.FormattedValue:\r\n                newKey = format[0] + '_Formatted';\r\n                break;\r\n            case DWA.Prefer.Annotations.AssociatedNavigationProperty:\r\n                newKey = format[0] + '_NavigationProperty';\r\n                break;\r\n            case DWA.Prefer.Annotations.LookupLogicalName:\r\n                newKey = format[0] + '_LogicalName';\r\n                break;\r\n        }\r\n    }\r\n\r\n    return [newKey, value];\r\n}\r\n\r\n/**\r\n *\r\n * @param {any} object - parsed JSON object\r\n * @param {any} parseParams - parameters for parsing the response\r\n * @returns {any} parsed batch response\r\n */\r\nfunction parseData(object, parseParams) {\r\n    if (parseParams) {\r\n        if (parseParams.isRef && object[\"@odata.id\"] != null) {\r\n            return Utility.convertToReferenceObject(object);\r\n        }\r\n\r\n        if (parseParams.toCount) {\r\n            return getFormattedKeyValue('@odata.count', object['@odata.count'])[1] || 0;\r\n        }\r\n    }\r\n\r\n    var keys = Object.keys(object);\r\n\r\n    for (var i = 0; i < keys.length; i++) {\r\n        var currentKey = keys[i];\r\n\r\n        if (object[currentKey] != null && object[currentKey].constructor === Array) {\r\n            for (var j = 0; j < object[currentKey].length; j++) {\r\n                object[currentKey][j] = parseData(object[currentKey][j]);\r\n            }\r\n        }\r\n\r\n        //parse formatted values\r\n        var formattedKeyValue = getFormattedKeyValue(currentKey, object[currentKey]);\r\n        if (formattedKeyValue[0]) {\r\n            object[formattedKeyValue[0]] = formattedKeyValue[1];\r\n        }\r\n\r\n        //parse aliased values\r\n        if (currentKey.indexOf('_x002e_') !== -1) {\r\n            var aliasKeys = currentKey.split('_x002e_');\r\n\r\n            if (!object.hasOwnProperty(aliasKeys[0])) {\r\n                object[aliasKeys[0]] = { _dwaType: 'alias' };\r\n            }\r\n            //throw an error if there is already a property which is not an 'alias'\r\n            else if (\r\n                typeof object[aliasKeys[0]] !== 'object' ||\r\n                typeof object[aliasKeys[0]] === 'object' && !object[aliasKeys[0]].hasOwnProperty('_dwaType')) {\r\n                throw new Error('The alias name of the linked entity must be unique!');\r\n            }\r\n\r\n            object[aliasKeys[0]][aliasKeys[1]] = object[currentKey];\r\n\r\n            //aliases also contain formatted values\r\n            formattedKeyValue = getFormattedKeyValue(aliasKeys[1], object[currentKey]);\r\n            if (formattedKeyValue[0]) {\r\n                object[aliasKeys[0]][formattedKeyValue[0]] = formattedKeyValue[1];\r\n            }\r\n        }\r\n    }\r\n\r\n    if (parseParams) {\r\n        if (parseParams.hasOwnProperty('pageNumber') && object['@' + DWA.Prefer.Annotations.FetchXmlPagingCookie] != null) {\r\n            object.PagingInfo = Utility.getFetchXmlPagingCookie(object['@' + DWA.Prefer.Annotations.FetchXmlPagingCookie], parseParams.pageNumber);\r\n        }\r\n    }\r\n\r\n    return object;\r\n}\r\n\r\n//partially taken from https://github.com/emiltholin/google-api-batch-utils\r\n/**\r\n *\r\n * @param {string} response - response that needs to be parsed\r\n * @param {Array} parseParams - parameters for parsing the response\r\n * @param {Number} [requestNumber] - number of the request\r\n * @returns {any} parsed batch response\r\n */\r\nfunction parseBatchResponse(response, parseParams, requestNumber) {\r\n    // Not the same delimiter in the response as we specify ourselves in the request,\r\n    // so we have to extract it.\r\n    var delimiter = response.substr(0, response.indexOf('\\r\\n'));\r\n    var batchResponseParts = response.split(delimiter);\r\n    // The first part will always be an empty string. Just remove it.\r\n    batchResponseParts.shift();\r\n    // The last part will be the \"--\". Just remove it.\r\n    batchResponseParts.pop();\r\n\r\n    requestNumber = requestNumber || 0;\r\n\r\n    var result = [];\r\n    for (var i = 0; i < batchResponseParts.length; i++) {\r\n        var batchResponse = batchResponseParts[i];\r\n        if (batchResponse.indexOf('--changesetresponse_') > -1) {\r\n            batchResponse = batchResponse.trim();\r\n            var batchToProcess = batchResponse\r\n                .substring(batchResponse.indexOf('\\r\\n') + 1).trim();\r\n\r\n            result = result.concat(parseBatchResponse(batchToProcess, parseParams, requestNumber));\r\n        }\r\n        else {\r\n            //check http status\r\n            var httpStatusReg = /HTTP\\/?\\s*[\\d.]*\\s+(\\d{3})\\s+([\\w\\s]*)$/gm.exec(batchResponse);\r\n            var httpStatus = parseInt(httpStatusReg[1]);\r\n            var httpStatusMessage = httpStatusReg[2].trim();\r\n\r\n            var responseData = batchResponse.substring(batchResponse.indexOf(\"{\"), batchResponse.lastIndexOf(\"}\") + 1);\r\n\r\n            if (!responseData) {\r\n                if (/Content-Type: text\\/plain/i.test(batchResponse)) {\r\n                    var plainContentReg = /\\w+$/gi.exec(batchResponse.trim());\r\n                    var plainContent = plainContentReg && plainContentReg.length ? plainContentReg[0] : undefined;\r\n\r\n                    //check if a plain content is a number or not\r\n                    result.push(isNaN(plainContent) ? plainContent : parseInt(plainContent));\r\n                }\r\n                else\r\n                    if (parseParams.length && parseParams[requestNumber] && parseParams[requestNumber].hasOwnProperty('valueIfEmpty')) {\r\n                        result.push(parseParams[requestNumber].valueIfEmpty);\r\n                    }\r\n                    else {\r\n                        var entityUrl = /OData-EntityId.+/i.exec(batchResponse);\r\n\r\n                        if (entityUrl && entityUrl.length) {\r\n                            var guidResult = /([0-9A-F]{8}[-]?([0-9A-F]{4}[-]?){3}[0-9A-F]{12})\\)$/i.exec(entityUrl[0]);\r\n\r\n                            result.push(guidResult ? guidResult[1] : undefined);\r\n                        }\r\n                        else {\r\n                            result.push(undefined);\r\n                        }\r\n                    }\r\n            }\r\n            else {\r\n                var parsedResponse = parseData(JSON.parse(responseData, dateReviver), parseParams[requestNumber]);\r\n\r\n                if (httpStatus >= 400) {\r\n                    result.push(ErrorHelper.handleHttpError(parsedResponse, {\r\n                        status: httpStatus,\r\n                        statusText: httpStatusMessage,\r\n                        statusMessage: httpStatusMessage\r\n                    }));\r\n                }\r\n                else {\r\n                    result.push(parsedResponse);\r\n                }\r\n            }\r\n        }\r\n\r\n        requestNumber++;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} response - response that needs to be parsed\r\n * @param {Array} responseHeaders - response headers\r\n * @param {Array} parseParams - parameters for parsing the response\r\n * @returns {any} parsed response\r\n */\r\nmodule.exports = function parseResponse(response, responseHeaders, parseParams) {\r\n    var parseResult = undefined;\r\n    if (response.length) {\r\n        if (response.indexOf('--batchresponse_') > -1) {\r\n            var batch = parseBatchResponse(response, parseParams);\r\n\r\n            parseResult = parseParams.length === 1 && parseParams[0].convertedToBatch\r\n                ? batch[0]\r\n                : batch;\r\n        }\r\n        else {\r\n            parseResult = parseData(JSON.parse(response, dateReviver), parseParams[0]);\r\n        }\r\n    }\r\n    else {\r\n        if (parseParams.length && parseParams[0].hasOwnProperty('valueIfEmpty')) {\r\n            parseResult = parseParams[0].valueIfEmpty;\r\n        }\r\n        else\r\n            if (responseHeaders['OData-EntityId'] || responseHeaders['odata-entityid']) {\r\n                var entityUrl = responseHeaders['OData-EntityId']\r\n                    ? responseHeaders['OData-EntityId']\r\n                    : responseHeaders['odata-entityid'];\r\n\r\n                var guidResult = /([0-9A-F]{8}[-]?([0-9A-F]{4}[-]?){3}[0-9A-F]{12})\\)$/i.exec(entityUrl);\r\n\r\n                if (guidResult) {\r\n                    parseResult = guidResult[1];\r\n                }\r\n            }\r\n    }\r\n\r\n    parseParams.length = 0;\r\n\r\n    return parseResult;\r\n}","module.exports = function dateReviver(key, value) {\r\n    ///<summary>\r\n    /// Private function to convert matching string values to Date objects.\r\n    ///</summary>\r\n    ///<param name=\"key\" type=\"String\">\r\n    /// The key used to identify the object property\r\n    ///</param>\r\n    ///<param name=\"value\" type=\"String\">\r\n    /// The string value representing a date\r\n    ///</param>\r\n    var a;\r\n    if (typeof value === 'string') {\r\n        a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:Z|[-+]\\d{2}:\\d{2})$/.exec(value);\r\n        if (a) {\r\n            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));\r\n        }\r\n    }\r\n    return value;\r\n};","module.exports = function parseResponseHeaders(headerStr) {\r\n    var headers = {};\r\n    if (!headerStr) {\r\n        return headers;\r\n    }\r\n    var headerPairs = headerStr.split('\\u000d\\u000a');\r\n    for (var i = 0, ilen = headerPairs.length; i < ilen; i++) {\r\n        var headerPair = headerPairs[i];\r\n        var index = headerPair.indexOf('\\u003a\\u0020');\r\n        if (index > 0) {\r\n            headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\r\n        }\r\n    }\r\n    return headers;\r\n};","Array.isArray = function (arg) {\r\n    return Object.prototype.toString.call(arg) === '[object Array]';\r\n};"],"sourceRoot":""}