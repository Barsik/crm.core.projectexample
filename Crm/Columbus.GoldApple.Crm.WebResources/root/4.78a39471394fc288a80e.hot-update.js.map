{"version":3,"sources":["webpack:///./src/common/dialogUtils.ts","webpack:///./src/app/transactionalEmailSyncTemplatesApp.tsx","webpack:///./src/components/transactionalEmail/syncTemplates/index.tsx","webpack:///./src/common/webapiClientUtils.ts"],"names":["OpenDialog","url","width","height","callback","options","Xrm","DialogOptions","Internal","openDialog","OpenWebResourceInDialog","webResourceName","data","size","DialogUtils","Page","context","getClientUrl","SetEmptyCrossCallback","window","onunload","Mscrm","Utilities","setReturnValue","CloseThisDialog","returnValue","closeWindow","ReactDOM","render","document","getElementById","Text","props","fetch","params","RunAction","this","setState","isError","errorText","console","log","handleOkClick","WhenError","type","style","whiteSpace","textAlign","Button","onClick","WhenLoading","src","bind","state","loadingText","componentDidMount","content","className","React","Component","actionName","target","async","request","Requests","Request","bound","method","payload","name","undefined","entityId","id","entityName","Execute"],"mappings":"sGAKA,+BAsBA,OArBW,EAAAA,WAAP,SAAkBC,EAAaC,EAAeC,EAAgBC,GAC1D,IAAIC,EAAU,IAAIC,IAAIC,cACtBF,EAAQH,MAAQA,EAChBG,EAAQF,OAASA,EAEjBG,IAAIE,SAASC,WAAWR,EAAKI,EACzB,KAAM,KAAMD,GAAY,eAGzB,EAAAM,wBAAP,SAA+BC,EAAyBC,EAAqBC,EAAYT,GACrFU,EAAYd,WAAcM,IAAIS,KAAKC,QAAQC,eAAc,iBAAiBN,EAAe,SAASC,EAAQC,EAAKX,MAAOW,EAAKV,OAAQC,IAGhI,EAAAc,sBAAP,WACIC,OAAOC,SAAW,WAAcC,MAAMC,UAAUC,eAAe,QAG5D,EAAAC,gBAAP,SAAuBC,GACnBJ,MAAMC,UAAUC,eAAeE,GAC/BN,OAAOO,aAAY,IAE3B,EAtBA,G,4VCLA,cACA,WACA,OACA,gBAEAC,EAASC,OACP,gBAAC,UAA+B,MAChCC,SAASC,eAAe,U,shECP1B,cACA,SACA,SACA,YACA,YAEQC,EAAA,aAAAA,KAUR,cACI,WAAYC,GAAZ,MACI,YAAMA,IAAM,K,OAchB,EAAAC,MAAQ,SAAOC,G,YAAA,IAAAA,MAAA,I,uGAGP,O,sBAAA,GAAM,UAAYC,UAAU,wC,cAA5B,SACA,UAAYX,kB,+BAEZY,KAAKC,SAAS,CAAEC,SAAS,EAAMC,UAAW,IAC1CC,QAAQC,IAAI,G,+BAIpB,EAAAC,cAAgB,WACZ,UAAYlB,mBAGhB,EAAAmB,UAAY,WACR,OAAO,2BACH,2BACI,gBAACZ,EAAI,CAACa,KAAK,SAASC,MAAO,CAAEC,WAAY,WAAU,wCAEvD,uBAAKD,MAAO,CAAEE,UAAW,WACrB,gBAAC,EAAAC,OAAM,CAACJ,KAAK,SAASK,QAAS,EAAKP,eAAa,SAK7D,EAAAQ,YAAc,WACV,OAAO,2BACH,2BACI,uBAAKC,IAAI,iCAEb,2BACI,4DA7CR,EAAKT,cAAgB,EAAKA,cAAcU,KAAK,GAC7C,EAAKC,MAAQ,CACTf,SAAS,EACTgB,YAAa,4BACbf,UAAW,I,EAuDvB,OA9D6D,OAWnD,YAAAgB,kBAAN,W,0FAEI,SAAMnB,KAAKH,S,cAAX,S,YA0CJ,YAAAL,OAAA,WACI,IAAI4B,EAAUpB,KAAKiB,MAAMf,QAAU,gBAACF,KAAKO,UAAS,MAAM,gBAACP,KAAKc,YAAW,MACzE,OACI,uBAAKO,UAAU,0BACVD,IAGjB,EA9DA,CAA6DE,EAAMC,W,mLChBnE,gBAEA,2BAcA,OAbW,EAAAxB,UAAP,SAAiCyB,EAAoBC,EAAwB3B,EAAqB4B,GAC9F,IAAMC,EAAU,IAAI,UAAOC,SAASC,QAUpC,OATAF,EAAQG,QAAUL,EAClBE,EAAQI,OAAS,OACjBJ,EAAQK,QAAUlC,EAClB6B,EAAQM,KAAOT,EACfG,EAAQD,MAAiBQ,MAATR,KAA8BA,EAC1CD,IACAE,EAAQQ,SAAWV,EAAOW,GAC1BT,EAAQU,WAAaZ,EAAOY,YAEzB,UAAOC,QAAQX,IAE9B,EAdA,G","file":"4.78a39471394fc288a80e.hot-update.js","sourcesContent":["interface Size {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport default class DialogUtils {\r\n    static OpenDialog(url: string, width: number, height: number, callback?: (returnedValue: any) => void): void {\r\n        let options = new Xrm.DialogOptions();\r\n        options.width = width;\r\n        options.height = height;\r\n\r\n        Xrm.Internal.openDialog(url, options,\r\n            null, null, callback || (() => { }));\r\n    }\r\n\r\n    static OpenWebResourceInDialog(webResourceName: string, data: string | null, size: Size, callback?: (returnedValue: any) => void): void {\r\n        DialogUtils.OpenDialog(`${Xrm.Page.context.getClientUrl()}/webresources/${webResourceName}?data=${data}`, size.width, size.height, callback);\r\n    }\r\n\r\n    static SetEmptyCrossCallback() {\r\n        window.onunload = function () { Mscrm.Utilities.setReturnValue(null); }\r\n    }\r\n\r\n    static CloseThisDialog(returnValue?: any) {\r\n        Mscrm.Utilities.setReturnValue(returnValue);\r\n        window.closeWindow(true);\r\n    }\r\n}","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport \"./../assets/main.scss\"\r\nimport TransactionalEmailSyncTemplates from \"../components/transactionalEmail/syncTemplates\";\r\n\r\nReactDOM.render(\r\n  <TransactionalEmailSyncTemplates />,\r\n  document.getElementById(\"root\")\r\n);\r\n","import * as React from \"react\";\r\nimport { Button } from 'antd';\r\nimport { Typography } from 'antd';\r\nimport WebApiUtils from \"../../../common/webapiClientUtils\";\r\nimport DialogUtils from \"../../../common/dialogUtils\";\r\n\r\nconst { Text } = Typography;\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n    isError: boolean;\r\n    errorText: string;\r\n    loadingText: string;\r\n}\r\n\r\nexport default class TransactionalEmailSyncTemplates extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.handleOkClick = this.handleOkClick.bind(this);\r\n        this.state = {\r\n            isError: false,\r\n            loadingText: 'Синхронизируем шаблоны...',\r\n            errorText: ''\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        debugger;\r\n        await this.fetch();\r\n    }\r\n\r\n    fetch = async (params = {}) => {\r\n        debugger;\r\n        try {\r\n            await WebApiUtils.RunAction(\"cmb_TransactionalEmailTemplatesSync\");\r\n            DialogUtils.CloseThisDialog();\r\n        } catch (error) {\r\n            this.setState({ isError: true, errorText: error })\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    handleOkClick = () => {\r\n        DialogUtils.CloseThisDialog();\r\n    };\r\n\r\n    WhenError = () => {\r\n        return <div>\r\n            <div>\r\n                <Text type=\"danger\" style={{ whiteSpace: 'nowrap' }}>Произошла ошибка. Попробуйте позже.</Text>\r\n            </div>\r\n            <div style={{ textAlign: 'center' }}>\r\n                <Button type=\"danger\" onClick={this.handleOkClick}>Ок</Button>\r\n            </div>\r\n        </div>;\r\n    };\r\n\r\n    WhenLoading = () => {\r\n        return <div>\r\n            <div>\r\n                <img src='/_imgs/AdvFind/progress.gif'></img>\r\n            </div>\r\n            <div>\r\n                <span>Синхронизируем шаблоны...</span>\r\n            </div>\r\n        </div>;\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        var content = this.state.isError ? <this.WhenError /> : <this.WhenLoading />;\r\n        return (\r\n            <div className=\"content-sync-templates\">\r\n                {content}\r\n            </div>);\r\n    }\r\n}\r\n","import webapi from 'xrm-webapi-client'\r\n\r\nexport default class webapiClientUtils {\r\n    static RunAction<T = Parameters>(actionName: string, target?: Target | null, params?: Parameters, async?: boolean | null): Promise<T> | any {\r\n        const request = new webapi.Requests.Request();\r\n        request.bound = !!target;\r\n        request.method = \"POST\";\r\n        request.payload = params;\r\n        request.name = actionName;\r\n        request.async = async == undefined ? true : !!async;\r\n        if (target) {\r\n            request.entityId = target.id;\r\n            request.entityName = target.entityName;\r\n        }\r\n        return webapi.Execute(request);\r\n    }\r\n}\r\n\r\ntype ParameterType = string | any | number | boolean | null | { \"@odata.type\": string, [id: string]: string  }; //TODO extend\r\ninterface Parameters {\r\n    [key: string]: ParameterType;\r\n}\r\ninterface Target {\r\n    entityName: string;\r\n    id: string;\r\n}"],"sourceRoot":""}